
AP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011efc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080120bc  080120bc  000220bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012254  08012254  00030194  2**0
                  CONTENTS
  4 .ARM          00000000  08012254  08012254  00030194  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012254  08012254  00030194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012254  08012254  00022254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012258  08012258  00022258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0801225c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000455c  20000194  080123f0  00030194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046f0  080123f0  000346f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042183  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000078bc  00000000  00000000  00072347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dc0  00000000  00000000  00079c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a88  00000000  00000000  0007c9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000be05  00000000  00000000  0007f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003851d  00000000  00000000  0008b255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015659f  00000000  00000000  000c3772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00219d11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c0c4  00000000  00000000  00219d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000194 	.word	0x20000194
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080120a4 	.word	0x080120a4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000198 	.word	0x20000198
 80001fc:	080120a4 	.word	0x080120a4

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f001 faff 	bl	8001806 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f876 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 fccc 	bl	8000ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000210:	f000 fca0 	bl	8000b54 <MX_DMA_Init>
  MX_ADC1_Init();
 8000214:	f000 f916 	bl	8000444 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000218:	f000 f978 	bl	800050c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800021c:	f000 f9da 	bl	80005d4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000220:	f000 fa18 	bl	8000654 <MX_I2C3_Init>
  MX_RTC_Init();
 8000224:	f000 fa56 	bl	80006d4 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000228:	f000 fab0 	bl	800078c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800022c:	f000 fad0 	bl	80007d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000230:	f000 fb0c 	bl	800084c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000234:	f000 fb48 	bl	80008c8 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000238:	f000 fb84 	bl	8000944 <MX_TIM2_Init>
  MX_TIM6_Init();
 800023c:	f000 fc1e 	bl	8000a7c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000240:	f000 fc52 	bl	8000ae8 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000244:	f00b fcd6 	bl	800bbf4 <MX_FATFS_Init>
  MX_TIM5_Init();
 8000248:	f000 fbca 	bl	80009e0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800024c:	f00d fc5c 	bl	800db08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000250:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <main+0xbc>)
 8000252:	2100      	movs	r1, #0
 8000254:	481a      	ldr	r0, [pc, #104]	; (80002c0 <main+0xc0>)
 8000256:	f00d fcd8 	bl	800dc0a <osThreadNew>
 800025a:	4603      	mov	r3, r0
 800025c:	4a19      	ldr	r2, [pc, #100]	; (80002c4 <main+0xc4>)
 800025e:	6013      	str	r3, [r2, #0]

  /* creation of fastTask */
  fastTaskHandle = osThreadNew(StartFastTask, NULL, &fastTask_attributes);
 8000260:	4a19      	ldr	r2, [pc, #100]	; (80002c8 <main+0xc8>)
 8000262:	2100      	movs	r1, #0
 8000264:	4819      	ldr	r0, [pc, #100]	; (80002cc <main+0xcc>)
 8000266:	f00d fcd0 	bl	800dc0a <osThreadNew>
 800026a:	4603      	mov	r3, r0
 800026c:	4a18      	ldr	r2, [pc, #96]	; (80002d0 <main+0xd0>)
 800026e:	6013      	str	r3, [r2, #0]

  /* creation of normalTask */
  normalTaskHandle = osThreadNew(StartNormalTask, NULL, &normalTask_attributes);
 8000270:	4a18      	ldr	r2, [pc, #96]	; (80002d4 <main+0xd4>)
 8000272:	2100      	movs	r1, #0
 8000274:	4818      	ldr	r0, [pc, #96]	; (80002d8 <main+0xd8>)
 8000276:	f00d fcc8 	bl	800dc0a <osThreadNew>
 800027a:	4603      	mov	r3, r0
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <main+0xdc>)
 800027e:	6013      	str	r3, [r2, #0]

  /* creation of slowTask */
  slowTaskHandle = osThreadNew(StartSlowTask, NULL, &slowTask_attributes);
 8000280:	4a17      	ldr	r2, [pc, #92]	; (80002e0 <main+0xe0>)
 8000282:	2100      	movs	r1, #0
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <main+0xe4>)
 8000286:	f00d fcc0 	bl	800dc0a <osThreadNew>
 800028a:	4603      	mov	r3, r0
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <main+0xe8>)
 800028e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_TIM_Base_Start_IT(&htim5);
 8000290:	4816      	ldr	r0, [pc, #88]	; (80002ec <main+0xec>)
 8000292:	f009 f85d 	bl	8009350 <HAL_TIM_Base_Start_IT>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of taskEvent */
  taskEventHandle = osEventFlagsNew(&taskEvent_attributes);
 8000296:	4816      	ldr	r0, [pc, #88]	; (80002f0 <main+0xf0>)
 8000298:	f00d fd64 	bl	800dd64 <osEventFlagsNew>
 800029c:	4603      	mov	r3, r0
 800029e:	4a15      	ldr	r2, [pc, #84]	; (80002f4 <main+0xf4>)
 80002a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  InitFastTask(&taskEventHandle);
 80002a2:	4814      	ldr	r0, [pc, #80]	; (80002f4 <main+0xf4>)
 80002a4:	f011 f812 	bl	80112cc <InitFastTask>
  InitNormalTask(&taskEventHandle);
 80002a8:	4812      	ldr	r0, [pc, #72]	; (80002f4 <main+0xf4>)
 80002aa:	f011 f84b 	bl	8011344 <InitNormalTask>
  InitSlowTask(&taskEventHandle);
 80002ae:	4811      	ldr	r0, [pc, #68]	; (80002f4 <main+0xf4>)
 80002b0:	f011 f884 	bl	80113bc <InitSlowTask>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002b4:	f00d fc6e 	bl	800db94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <main+0xb8>
 80002ba:	bf00      	nop
 80002bc:	08012158 	.word	0x08012158
 80002c0:	08000e81 	.word	0x08000e81
 80002c4:	20001d04 	.word	0x20001d04
 80002c8:	0801217c 	.word	0x0801217c
 80002cc:	080112ed 	.word	0x080112ed
 80002d0:	20002594 	.word	0x20002594
 80002d4:	080121a0 	.word	0x080121a0
 80002d8:	08011365 	.word	0x08011365
 80002dc:	20002338 	.word	0x20002338
 80002e0:	080121c4 	.word	0x080121c4
 80002e4:	080113dd 	.word	0x080113dd
 80002e8:	20002454 	.word	0x20002454
 80002ec:	2000233c 	.word	0x2000233c
 80002f0:	080121e8 	.word	0x080121e8
 80002f4:	20001fb8 	.word	0x20001fb8

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0be      	sub	sp, #248	; 0xf8
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000302:	2244      	movs	r2, #68	; 0x44
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f011 fec4 	bl	8012094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	229c      	movs	r2, #156	; 0x9c
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f011 feb6 	bl	8012094 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000328:	2000      	movs	r0, #0
 800032a:	f004 fa4b 	bl	80047c4 <HAL_PWREx_ControlVoltageScaling>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000334:	f000 fdc8 	bl	8000ec8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000338:	f004 fa14 	bl	8004764 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800033c:	4b3f      	ldr	r3, [pc, #252]	; (800043c <SystemClock_Config+0x144>)
 800033e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000342:	4a3e      	ldr	r2, [pc, #248]	; (800043c <SystemClock_Config+0x144>)
 8000344:	f023 0318 	bic.w	r3, r3, #24
 8000348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800034c:	2325      	movs	r3, #37	; 0x25
 800034e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800035a:	2301      	movs	r3, #1
 800035c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036c:	2303      	movs	r3, #3
 800036e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000372:	2304      	movs	r3, #4
 8000374:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000378:	233c      	movs	r3, #60	; 0x3c
 800037a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 800037e:	2305      	movs	r3, #5
 8000380:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000384:	2302      	movs	r3, #2
 8000386:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800038a:	2302      	movs	r3, #2
 800038c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000394:	4618      	mov	r0, r3
 8000396:	f004 fad9 	bl	800494c <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003a0:	f000 fd92 	bl	8000ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003aa:	2303      	movs	r3, #3
 80003ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80003c6:	2105      	movs	r1, #5
 80003c8:	4618      	mov	r0, r3
 80003ca:	f004 fee5 	bl	8005198 <HAL_RCC_ClockConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80003d4:	f000 fd78 	bl	8000ec8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
 80003d8:	4b19      	ldr	r3, [pc, #100]	; (8000440 <SystemClock_Config+0x148>)
 80003da:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80003dc:	2300      	movs	r3, #0
 80003de:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80003ec:	2300      	movs	r3, #0
 80003ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80003f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80003fa:	2300      	movs	r3, #0
 80003fc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80003fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000402:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000404:	2303      	movs	r3, #3
 8000406:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000408:	2305      	movs	r3, #5
 800040a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 800040c:	2360      	movs	r3, #96	; 0x60
 800040e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000410:	2302      	movs	r3, #2
 8000412:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000414:	2304      	movs	r3, #4
 8000416:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000418:	2304      	movs	r3, #4
 800041a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800041c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000420:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4618      	mov	r0, r3
 8000426:	f005 f997 	bl	8005758 <HAL_RCCEx_PeriphCLKConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000430:	f000 fd4a 	bl	8000ec8 <Error_Handler>
  }
}
 8000434:	bf00      	nop
 8000436:	37f8      	adds	r7, #248	; 0xf8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	000b6140 	.word	0x000b6140

08000444 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800044a:	463b      	mov	r3, r7
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
 8000458:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <MX_ADC1_Init+0xbc>)
 800045c:	4a29      	ldr	r2, [pc, #164]	; (8000504 <MX_ADC1_Init+0xc0>)
 800045e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <MX_ADC1_Init+0xbc>)
 8000462:	2200      	movs	r2, #0
 8000464:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <MX_ADC1_Init+0xbc>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046c:	4b24      	ldr	r3, [pc, #144]	; (8000500 <MX_ADC1_Init+0xbc>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000472:	4b23      	ldr	r3, [pc, #140]	; (8000500 <MX_ADC1_Init+0xbc>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000478:	4b21      	ldr	r3, [pc, #132]	; (8000500 <MX_ADC1_Init+0xbc>)
 800047a:	2204      	movs	r2, #4
 800047c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800047e:	4b20      	ldr	r3, [pc, #128]	; (8000500 <MX_ADC1_Init+0xbc>)
 8000480:	2200      	movs	r2, #0
 8000482:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000484:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <MX_ADC1_Init+0xbc>)
 8000486:	2201      	movs	r2, #1
 8000488:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800048a:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <MX_ADC1_Init+0xbc>)
 800048c:	2201      	movs	r2, #1
 800048e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <MX_ADC1_Init+0xbc>)
 8000492:	2200      	movs	r2, #0
 8000494:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <MX_ADC1_Init+0xbc>)
 800049a:	2200      	movs	r2, #0
 800049c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_ADC1_Init+0xbc>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004a4:	4b16      	ldr	r3, [pc, #88]	; (8000500 <MX_ADC1_Init+0xbc>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_ADC1_Init+0xbc>)
 80004ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004b2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_ADC1_Init+0xbc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004bc:	4810      	ldr	r0, [pc, #64]	; (8000500 <MX_ADC1_Init+0xbc>)
 80004be:	f001 fb9f 	bl	8001c00 <HAL_ADC_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80004c8:	f000 fcfe 	bl	8000ec8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_ADC1_Init+0xc4>)
 80004ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004d0:	2306      	movs	r3, #6
 80004d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80004d4:	2302      	movs	r3, #2
 80004d6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004d8:	237f      	movs	r3, #127	; 0x7f
 80004da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004dc:	2304      	movs	r3, #4
 80004de:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e4:	463b      	mov	r3, r7
 80004e6:	4619      	mov	r1, r3
 80004e8:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_ADC1_Init+0xbc>)
 80004ea:	f001 fcd5 	bl	8001e98 <HAL_ADC_ConfigChannel>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80004f4:	f000 fce8 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f8:	bf00      	nop
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200023ec 	.word	0x200023ec
 8000504:	50040000 	.word	0x50040000
 8000508:	21800100 	.word	0x21800100

0800050c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000510:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <MX_DFSDM1_Init+0xb8>)
 8000512:	4a2d      	ldr	r2, [pc, #180]	; (80005c8 <MX_DFSDM1_Init+0xbc>)
 8000514:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <MX_DFSDM1_Init+0xb8>)
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800051c:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <MX_DFSDM1_Init+0xb8>)
 800051e:	2201      	movs	r2, #1
 8000520:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <MX_DFSDM1_Init+0xb8>)
 8000524:	2201      	movs	r2, #1
 8000526:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8000528:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <MX_DFSDM1_Init+0xb8>)
 800052a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800052e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 8000530:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <MX_DFSDM1_Init+0xb8>)
 8000532:	22c0      	movs	r2, #192	; 0xc0
 8000534:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000536:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <MX_DFSDM1_Init+0xb8>)
 8000538:	2201      	movs	r2, #1
 800053a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800053c:	4821      	ldr	r0, [pc, #132]	; (80005c4 <MX_DFSDM1_Init+0xb8>)
 800053e:	f002 fa49 	bl	80029d4 <HAL_DFSDM_FilterInit>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000548:	f000 fcbe 	bl	8000ec8 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 800054e:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <MX_DFSDM1_Init+0xc4>)
 8000550:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000552:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 8000554:	2200      	movs	r2, #0
 8000556:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800055e:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 8000560:	2202      	movs	r2, #2
 8000562:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 8000566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800056a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 800056e:	2200      	movs	r2, #0
 8000570:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 8000580:	2200      	movs	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 8000586:	2200      	movs	r2, #0
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 800058c:	2201      	movs	r2, #1
 800058e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 8000592:	2200      	movs	r2, #0
 8000594:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 8000598:	2207      	movs	r2, #7
 800059a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <MX_DFSDM1_Init+0xc0>)
 800059e:	f002 f959 	bl	8002854 <HAL_DFSDM_ChannelInit>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80005a8:	f000 fc8e 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80005ac:	2201      	movs	r2, #1
 80005ae:	2101      	movs	r1, #1
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <MX_DFSDM1_Init+0xb8>)
 80005b2:	f002 fae9 	bl	8002b88 <HAL_DFSDM_FilterConfigRegChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 80005bc:	f000 fc84 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20002008 	.word	0x20002008
 80005c8:	40016100 	.word	0x40016100
 80005cc:	200025e4 	.word	0x200025e4
 80005d0:	40016000 	.word	0x40016000

080005d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_I2C1_Init+0x74>)
 80005da:	4a1c      	ldr	r2, [pc, #112]	; (800064c <MX_I2C1_Init+0x78>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_I2C1_Init+0x74>)
 80005e0:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <MX_I2C1_Init+0x7c>)
 80005e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_I2C1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_I2C1_Init+0x74>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_I2C1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060e:	480e      	ldr	r0, [pc, #56]	; (8000648 <MX_I2C1_Init+0x74>)
 8000610:	f002 fee2 	bl	80033d8 <HAL_I2C_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800061a:	f000 fc55 	bl	8000ec8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800061e:	2100      	movs	r1, #0
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <MX_I2C1_Init+0x74>)
 8000622:	f002 ff68 	bl	80034f6 <HAL_I2CEx_ConfigAnalogFilter>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800062c:	f000 fc4c 	bl	8000ec8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000630:	2100      	movs	r1, #0
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_I2C1_Init+0x74>)
 8000634:	f002 ffaa 	bl	800358c <HAL_I2CEx_ConfigDigitalFilter>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800063e:	f000 fc43 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20001fbc 	.word	0x20001fbc
 800064c:	40005400 	.word	0x40005400
 8000650:	00b03fdb 	.word	0x00b03fdb

08000654 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_I2C3_Init+0x74>)
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_I2C3_Init+0x78>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_I2C3_Init+0x74>)
 8000660:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <MX_I2C3_Init+0x7c>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_I2C3_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_I2C3_Init+0x74>)
 800066c:	2201      	movs	r2, #1
 800066e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_I2C3_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_I2C3_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C3_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2C3_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C3_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <MX_I2C3_Init+0x74>)
 8000690:	f002 fea2 	bl	80033d8 <HAL_I2C_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800069a:	f000 fc15 	bl	8000ec8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <MX_I2C3_Init+0x74>)
 80006a2:	f002 ff28 	bl	80034f6 <HAL_I2CEx_ConfigAnalogFilter>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006ac:	f000 fc0c 	bl	8000ec8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_I2C3_Init+0x74>)
 80006b4:	f002 ff6a 	bl	800358c <HAL_I2CEx_ConfigDigitalFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 fc03 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20001d08 	.word	0x20001d08
 80006cc:	40005c00 	.word	0x40005c00
 80006d0:	00b03fdb 	.word	0x00b03fdb

080006d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_RTC_Init+0xb0>)
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <MX_RTC_Init+0xb4>)
 80006f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_RTC_Init+0xb0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_RTC_Init+0xb0>)
 80006fa:	227f      	movs	r2, #127	; 0x7f
 80006fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_RTC_Init+0xb0>)
 8000700:	22ff      	movs	r2, #255	; 0xff
 8000702:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_RTC_Init+0xb0>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_RTC_Init+0xb0>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_RTC_Init+0xb0>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_RTC_Init+0xb0>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800071c:	4819      	ldr	r0, [pc, #100]	; (8000784 <MX_RTC_Init+0xb0>)
 800071e:	f006 fdc1 	bl	80072a4 <HAL_RTC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000728:	f000 fbce 	bl	8000ec8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	480f      	ldr	r0, [pc, #60]	; (8000784 <MX_RTC_Init+0xb0>)
 8000748:	f006 fe27 	bl	800739a <HAL_RTC_SetTime>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000752:	f000 fbb9 	bl	8000ec8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000756:	2302      	movs	r3, #2
 8000758:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 800075a:	2304      	movs	r3, #4
 800075c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 800075e:	2303      	movs	r3, #3
 8000760:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 8000762:	2314      	movs	r3, #20
 8000764:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_RTC_Init+0xb0>)
 800076e:	f006 feb1 	bl	80074d4 <HAL_RTC_SetDate>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000778:	f000 fba6 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20002570 	.word	0x20002570
 8000788:	40002800 	.word	0x40002800

0800078c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_SDMMC1_SD_Init+0x3c>)
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <MX_SDMMC1_SD_Init+0x40>)
 8000794:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_SDMMC1_SD_Init+0x3c>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_SDMMC1_SD_Init+0x3c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_SDMMC1_SD_Init+0x3c>)
 80007a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_SDMMC1_SD_Init+0x3c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <MX_SDMMC1_SD_Init+0x3c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <MX_SDMMC1_SD_Init+0x3c>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	2000205c 	.word	0x2000205c
 80007cc:	50062400 	.word	0x50062400

080007d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_SPI1_Init+0x74>)
 80007d6:	4a1c      	ldr	r2, [pc, #112]	; (8000848 <MX_SPI1_Init+0x78>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_SPI1_Init+0x74>)
 80007dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_SPI1_Init+0x74>)
 80007ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_SPI1_Init+0x74>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_SPI1_Init+0x74>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_SPI1_Init+0x74>)
 80007fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000802:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI1_Init+0x74>)
 8000806:	2218      	movs	r2, #24
 8000808:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_SPI1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_SPI1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_SPI1_Init+0x74>)
 800081e:	2207      	movs	r2, #7
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_SPI1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_SPI1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_SPI1_Init+0x74>)
 8000830:	f008 fc93 	bl	800915a <HAL_SPI_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 fb45 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000261c 	.word	0x2000261c
 8000848:	40013000 	.word	0x40013000

0800084c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_SPI2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000866:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800086a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_SPI2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000874:	2201      	movs	r2, #1
 8000876:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_SPI2_Init+0x74>)
 800087a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SPI2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_SPI2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SPI2_Init+0x74>)
 800089a:	2207      	movs	r2, #7
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_SPI2_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI2_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_SPI2_Init+0x74>)
 80008ac:	f008 fc55 	bl	800915a <HAL_SPI_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fb07 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20001f54 	.word	0x20001f54
 80008c4:	40003800 	.word	0x40003800

080008c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_SPI3_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_SPI3_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_SPI3_Init+0x74>)
 80008d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_SPI3_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_SPI3_Init+0x74>)
 80008e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_SPI3_Init+0x74>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_SPI3_Init+0x74>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_SPI3_Init+0x74>)
 80008f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_SPI3_Init+0x74>)
 80008fe:	2218      	movs	r2, #24
 8000900:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_SPI3_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_SPI3_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_SPI3_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_SPI3_Init+0x74>)
 8000916:	2207      	movs	r2, #7
 8000918:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_SPI3_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_SPI3_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_SPI3_Init+0x74>)
 8000928:	f008 fc17 	bl	800915a <HAL_SPI_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 fac9 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20002388 	.word	0x20002388
 8000940:	40003c00 	.word	0x40003c00

08000944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_TIM2_Init+0x98>)
 8000964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000968:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_TIM2_Init+0x98>)
 800096c:	2277      	movs	r2, #119	; 0x77
 800096e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_TIM2_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_TIM2_Init+0x98>)
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_TIM2_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_TIM2_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800098a:	4814      	ldr	r0, [pc, #80]	; (80009dc <MX_TIM2_Init+0x98>)
 800098c:	f008 fc88 	bl	80092a0 <HAL_TIM_Base_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000996:	f000 fa97 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4619      	mov	r1, r3
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_TIM2_Init+0x98>)
 80009a8:	f008 fe61 	bl	800966e <HAL_TIM_ConfigClockSource>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009b2:	f000 fa89 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_TIM2_Init+0x98>)
 80009c4:	f009 f876 	bl	8009ab4 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009ce:	f000 fa7b 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20002680 	.word	0x20002680

080009e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_TIM5_Init+0x94>)
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <MX_TIM5_Init+0x98>)
 8000a02:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 120;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_TIM5_Init+0x94>)
 8000a06:	2278      	movs	r2, #120	; 0x78
 8000a08:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_TIM5_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_TIM5_Init+0x94>)
 8000a12:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a16:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_TIM5_Init+0x94>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_TIM5_Init+0x94>)
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <MX_TIM5_Init+0x94>)
 8000a26:	f008 fc3b 	bl	80092a0 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000a30:	f000 fa4a 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_TIM5_Init+0x94>)
 8000a42:	f008 fe14 	bl	800966e <HAL_TIM_ConfigClockSource>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000a4c:	f000 fa3c 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_TIM5_Init+0x94>)
 8000a5e:	f009 f829 	bl	8009ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000a68:	f000 fa2e 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000233c 	.word	0x2000233c
 8000a78:	40000c00 	.word	0x40000c00

08000a7c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_TIM6_Init+0x64>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <MX_TIM6_Init+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_TIM6_Init+0x64>)
 8000a94:	2277      	movs	r2, #119	; 0x77
 8000a96:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_TIM6_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_TIM6_Init+0x64>)
 8000aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_TIM6_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_TIM6_Init+0x64>)
 8000aae:	f008 fbf7 	bl	80092a0 <HAL_TIM_Base_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ab8:	f000 fa06 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_TIM6_Init+0x64>)
 8000aca:	f008 fff3 	bl	8009ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ad4:	f000 f9f8 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20002598 	.word	0x20002598
 8000ae4:	40001000 	.word	0x40001000

08000ae8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_TIM7_Init+0x64>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <MX_TIM7_Init+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_TIM7_Init+0x64>)
 8000b00:	2277      	movs	r2, #119	; 0x77
 8000b02:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_TIM7_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_TIM7_Init+0x64>)
 8000b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b10:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_TIM7_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <MX_TIM7_Init+0x64>)
 8000b1a:	f008 fbc1 	bl	80092a0 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000b24:	f000 f9d0 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_TIM7_Init+0x64>)
 8000b36:	f008 ffbd 	bl	8009ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b40:	f000 f9c2 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200026cc 	.word	0x200026cc
 8000b50:	40001400 	.word	0x40001400

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_DMA_Init+0x50>)
 8000b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b5e:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <MX_DMA_Init+0x50>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6493      	str	r3, [r2, #72]	; 0x48
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_DMA_Init+0x50>)
 8000b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_DMA_Init+0x50>)
 8000b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <MX_DMA_Init+0x50>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_DMA_Init+0x50>)
 8000b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	200e      	movs	r0, #14
 8000b90:	f001 fe36 	bl	8002800 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b94:	200e      	movs	r0, #14
 8000b96:	f001 fe4f 	bl	8002838 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4ba7      	ldr	r3, [pc, #668]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4aa6      	ldr	r2, [pc, #664]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4ba4      	ldr	r3, [pc, #656]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	4ba1      	ldr	r3, [pc, #644]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4aa0      	ldr	r2, [pc, #640]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b9e      	ldr	r3, [pc, #632]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b9b      	ldr	r3, [pc, #620]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a9a      	ldr	r2, [pc, #616]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b98      	ldr	r3, [pc, #608]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c06:	4b95      	ldr	r3, [pc, #596]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a94      	ldr	r2, [pc, #592]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b92      	ldr	r3, [pc, #584]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b8f      	ldr	r3, [pc, #572]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a8e      	ldr	r2, [pc, #568]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b8c      	ldr	r3, [pc, #560]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c36:	4b89      	ldr	r3, [pc, #548]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a88      	ldr	r2, [pc, #544]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b86      	ldr	r3, [pc, #536]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0320 	and.w	r3, r3, #32
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4e:	4b83      	ldr	r3, [pc, #524]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a82      	ldr	r2, [pc, #520]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b80      	ldr	r3, [pc, #512]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000c66:	f003 fe61 	bl	800492c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6a:	4b7c      	ldr	r3, [pc, #496]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a7b      	ldr	r2, [pc, #492]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b79      	ldr	r3, [pc, #484]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f002 fb72 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8000c90:	2201      	movs	r2, #1
 8000c92:	f641 4130 	movw	r1, #7216	; 0x1c30
 8000c96:	4872      	ldr	r0, [pc, #456]	; (8000e60 <MX_GPIO_Init+0x2b8>)
 8000c98:	f002 fb6c 	bl	8003374 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2105      	movs	r1, #5
 8000ca0:	4870      	ldr	r0, [pc, #448]	; (8000e64 <MX_GPIO_Init+0x2bc>)
 8000ca2:	f002 fb67 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cac:	486e      	ldr	r0, [pc, #440]	; (8000e68 <MX_GPIO_Init+0x2c0>)
 8000cae:	f002 fb61 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	486b      	ldr	r0, [pc, #428]	; (8000e64 <MX_GPIO_Init+0x2bc>)
 8000cb8:	f002 fb5c 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4869      	ldr	r0, [pc, #420]	; (8000e68 <MX_GPIO_Init+0x2c0>)
 8000cc2:	f002 fb57 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ccc:	4867      	ldr	r0, [pc, #412]	; (8000e6c <MX_GPIO_Init+0x2c4>)
 8000cce:	f002 fb51 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 8000cd2:	2348      	movs	r3, #72	; 0x48
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd6:	4b66      	ldr	r3, [pc, #408]	; (8000e70 <MX_GPIO_Init+0x2c8>)
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	485e      	ldr	r0, [pc, #376]	; (8000e60 <MX_GPIO_Init+0x2b8>)
 8000ce6:	f002 f99b 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8000cea:	2360      	movs	r3, #96	; 0x60
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	485b      	ldr	r0, [pc, #364]	; (8000e74 <MX_GPIO_Init+0x2cc>)
 8000d06:	f002 f98b 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 8000d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d10:	2311      	movs	r3, #17
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f002 f97b 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 8000d2a:	2330      	movs	r3, #48	; 0x30
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4847      	ldr	r0, [pc, #284]	; (8000e60 <MX_GPIO_Init+0x2b8>)
 8000d42:	f002 f96d 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 8000d46:	2385      	movs	r3, #133	; 0x85
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4841      	ldr	r0, [pc, #260]	; (8000e64 <MX_GPIO_Init+0x2bc>)
 8000d5e:	f002 f95f 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 8000d62:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	483b      	ldr	r0, [pc, #236]	; (8000e68 <MX_GPIO_Init+0x2c0>)
 8000d7c:	f002 f950 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 8000d80:	2308      	movs	r3, #8
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4835      	ldr	r0, [pc, #212]	; (8000e68 <MX_GPIO_Init+0x2c0>)
 8000d94:	f002 f944 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8000d98:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9e:	4b34      	ldr	r3, [pc, #208]	; (8000e70 <MX_GPIO_Init+0x2c8>)
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	4831      	ldr	r0, [pc, #196]	; (8000e74 <MX_GPIO_Init+0x2cc>)
 8000dae:	f002 f937 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8000db2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000db8:	2311      	movs	r3, #17
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4825      	ldr	r0, [pc, #148]	; (8000e60 <MX_GPIO_Init+0x2b8>)
 8000dcc:	f002 f928 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8000dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	4820      	ldr	r0, [pc, #128]	; (8000e6c <MX_GPIO_Init+0x2c4>)
 8000dea:	f002 f919 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 8000dee:	2320      	movs	r3, #32
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_GPIO_Init+0x2c8>)
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481d      	ldr	r0, [pc, #116]	; (8000e78 <MX_GPIO_Init+0x2d0>)
 8000e02:	f002 f90d 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 8000e06:	2304      	movs	r3, #4
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_GPIO_Init+0x2c8>)
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f002 f900 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_GPIO_Init+0x2c4>)
 8000e36:	f002 f8f3 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_GPIO_Init+0x2d4>)
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_GPIO_Init+0x2c0>)
 8000e4e:	f002 f8e7 	bl	8003020 <HAL_GPIO_Init>

}
 8000e52:	bf00      	nop
 8000e54:	3738      	adds	r7, #56	; 0x38
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	48001000 	.word	0x48001000
 8000e64:	48001400 	.word	0x48001400
 8000e68:	48001800 	.word	0x48001800
 8000e6c:	48000400 	.word	0x48000400
 8000e70:	10110000 	.word	0x10110000
 8000e74:	48000c00 	.word	0x48000c00
 8000e78:	48000800 	.word	0x48000800
 8000e7c:	10210000 	.word	0x10210000

08000e80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e88:	f010 faca 	bl	8011420 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f00c ff4e 	bl	800dd2e <osDelay>
 8000e92:	e7fb      	b.n	8000e8c <StartDefaultTask+0xc>

08000e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d102      	bne.n	8000eac <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000ea6:	f000 fcc7 	bl	8001838 <HAL_IncTick>
  else {
	  osEventFlagsSet(taskEventHandle, FAST_TASK_EVENT);
  }

  /* USER CODE END Callback 1 */
}
 8000eaa:	e005      	b.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x24>
	  osEventFlagsSet(taskEventHandle, FAST_TASK_EVENT);
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00c ff96 	bl	800dde4 <osEventFlagsSet>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40000400 	.word	0x40000400
 8000ec4:	20001fb8 	.word	0x20001fb8

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_MspInit+0x4c>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	f06f 0001 	mvn.w	r0, #1
 8000f12:	f001 fc75 	bl	8002800 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <HAL_ADC_MspInit+0xa4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d13c      	bne.n	8000fc0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_ADC_MspInit+0xa8>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <HAL_ADC_MspInit+0xa8>)
 8000f4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <HAL_ADC_MspInit+0xa8>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_ADC_MspInit+0xa8>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <HAL_ADC_MspInit+0xa8>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_ADC_MspInit+0xa8>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_ADC_MspInit+0xa8>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <HAL_ADC_MspInit+0xa8>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_ADC_MspInit+0xa8>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f92:	230b      	movs	r3, #11
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <HAL_ADC_MspInit+0xac>)
 8000fa2:	f002 f83d 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000faa:	230b      	movs	r3, #11
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f002 f830 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	50040000 	.word	0x50040000
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48000800 	.word	0x48000800

08000fd4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <HAL_DFSDM_FilterMspInit+0xbc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d119      	bne.n	8001018 <HAL_DFSDM_FilterMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <HAL_DFSDM_FilterMspInit+0xc0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <HAL_DFSDM_FilterMspInit+0xc0>)
 8000fec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <HAL_DFSDM_FilterMspInit+0xc0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d10b      	bne.n	800100e <HAL_DFSDM_FilterMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	4a27      	ldr	r2, [pc, #156]	; (8001098 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000ffc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001000:	6613      	str	r3, [r2, #96]	; 0x60
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <HAL_DFSDM_FilterMspInit+0xc4>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_DFSDM_FilterMspInit+0xbc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	4a1e      	ldr	r2, [pc, #120]	; (8001090 <HAL_DFSDM_FilterMspInit+0xbc>)
 8001016:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_DFSDM_FilterMspInit+0xc8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d131      	bne.n	8001086 <HAL_DFSDM_FilterMspInit+0xb2>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001024:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <HAL_DFSDM_FilterMspInit+0xd0>)
 8001026:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 800102a:	2256      	movs	r2, #86	; 0x56
 800102c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001046:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 800104a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800104e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001052:	2220      	movs	r2, #32
 8001054:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001058:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800105e:	4810      	ldr	r0, [pc, #64]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001060:	f001 fe24 	bl	8002cac <HAL_DMA_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_DFSDM_FilterMspInit+0x9a>
    {
      Error_Handler();
 800106a:	f7ff ff2d 	bl	8000ec8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001b4 	.word	0x200001b4
 8001094:	200001b0 	.word	0x200001b0
 8001098:	40021000 	.word	0x40021000
 800109c:	40016100 	.word	0x40016100
 80010a0:	20002458 	.word	0x20002458
 80010a4:	40020044 	.word	0x40020044

080010a8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0x50>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d119      	bne.n	80010ec <HAL_DFSDM_ChannelMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_DFSDM_ChannelMspInit+0x54>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_DFSDM_ChannelMspInit+0x54>)
 80010c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_DFSDM_ChannelMspInit+0x54>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d10b      	bne.n	80010e2 <HAL_DFSDM_ChannelMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_DFSDM_ChannelMspInit+0x58>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_DFSDM_ChannelMspInit+0x58>)
 80010d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010d4:	6613      	str	r3, [r2, #96]	; 0x60
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_DFSDM_ChannelMspInit+0x58>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0x50>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a03      	ldr	r2, [pc, #12]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0x50>)
 80010ea:	6013      	str	r3, [r2, #0]
  }

}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	200001b4 	.word	0x200001b4
 80010fc:	200001b0 	.word	0x200001b0
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <HAL_I2C_MspInit+0xdc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d128      	bne.n	8001178 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a2e      	ldr	r2, [pc, #184]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 800113e:	23c0      	movs	r3, #192	; 0xc0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001142:	2312      	movs	r3, #18
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001146:	2301      	movs	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800114e:	2304      	movs	r3, #4
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <HAL_I2C_MspInit+0xe4>)
 800115a:	f001 ff61 	bl	8003020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 8001164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001168:	6593      	str	r3, [r2, #88]	; 0x58
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001176:	e02f      	b.n	80011d8 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_I2C_MspInit+0xe8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d12a      	bne.n	80011d8 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 8001188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800119a:	f003 fbc7 	bl	800492c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 800119e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a4:	2312      	movs	r3, #18
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011b0:	2304      	movs	r3, #4
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <HAL_I2C_MspInit+0xec>)
 80011bc:	f001 ff30 	bl	8003020 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 80011c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011ca:	6593      	str	r3, [r2, #88]	; 0x58
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_I2C_MspInit+0xe0>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	bf00      	nop
 80011da:	3730      	adds	r7, #48	; 0x30
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40005400 	.word	0x40005400
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48000400 	.word	0x48000400
 80011ec:	40005c00 	.word	0x40005c00
 80011f0:	48001800 	.word	0x48001800

080011f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_RTC_MspInit+0x30>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d107      	bne.n	8001216 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_RTC_MspInit+0x34>)
 8001208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_RTC_MspInit+0x34>)
 800120e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40002800 	.word	0x40002800
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a40      	ldr	r2, [pc, #256]	; (800134c <HAL_SD_MspInit+0x120>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d179      	bne.n	8001342 <HAL_SD_MspInit+0x116>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800124e:	4b40      	ldr	r3, [pc, #256]	; (8001350 <HAL_SD_MspInit+0x124>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a3f      	ldr	r2, [pc, #252]	; (8001350 <HAL_SD_MspInit+0x124>)
 8001254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <HAL_SD_MspInit+0x124>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_SD_MspInit+0x124>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a39      	ldr	r2, [pc, #228]	; (8001350 <HAL_SD_MspInit+0x124>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <HAL_SD_MspInit+0x124>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_SD_MspInit+0x124>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a33      	ldr	r2, [pc, #204]	; (8001350 <HAL_SD_MspInit+0x124>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_SD_MspInit+0x124>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <HAL_SD_MspInit+0x124>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a2d      	ldr	r2, [pc, #180]	; (8001350 <HAL_SD_MspInit+0x124>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_SD_MspInit+0x124>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 80012ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80012c0:	2308      	movs	r3, #8
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4822      	ldr	r0, [pc, #136]	; (8001354 <HAL_SD_MspInit+0x128>)
 80012cc:	f001 fea8 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 80012d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012d4:	61fb      	str	r3, [r7, #28]
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012e2:	230c      	movs	r3, #12
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	481a      	ldr	r0, [pc, #104]	; (8001358 <HAL_SD_MspInit+0x12c>)
 80012ee:	f001 fe97 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 80012f2:	2304      	movs	r3, #4
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001302:	230c      	movs	r3, #12
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <HAL_SD_MspInit+0x130>)
 800130e:	f001 fe87 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 8001312:	23c0      	movs	r3, #192	; 0xc0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001322:	2308      	movs	r3, #8
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	480a      	ldr	r0, [pc, #40]	; (8001358 <HAL_SD_MspInit+0x12c>)
 800132e:	f001 fe77 	bl	8003020 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2105      	movs	r1, #5
 8001336:	2031      	movs	r0, #49	; 0x31
 8001338:	f001 fa62 	bl	8002800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800133c:	2031      	movs	r0, #49	; 0x31
 800133e:	f001 fa7b 	bl	8002838 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3730      	adds	r7, #48	; 0x30
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	50062400 	.word	0x50062400
 8001350:	40021000 	.word	0x40021000
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00

08001360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a64      	ldr	r2, [pc, #400]	; (8001510 <HAL_SPI_MspInit+0x1b0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d13a      	bne.n	80013f8 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001382:	4b64      	ldr	r3, [pc, #400]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	4a63      	ldr	r2, [pc, #396]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138c:	6613      	str	r3, [r2, #96]	; 0x60
 800138e:	4b61      	ldr	r3, [pc, #388]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001396:	623b      	str	r3, [r7, #32]
 8001398:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800139a:	4b5e      	ldr	r3, [pc, #376]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a5d      	ldr	r2, [pc, #372]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 80013a0:	f043 0310 	orr.w	r3, r3, #16
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	61fb      	str	r3, [r7, #28]
 80013b0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013bc:	2301      	movs	r3, #1
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c4:	2305      	movs	r3, #5
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	4619      	mov	r1, r3
 80013ce:	4852      	ldr	r0, [pc, #328]	; (8001518 <HAL_SPI_MspInit+0x1b8>)
 80013d0:	f001 fe26 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 80013d4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013e6:	2305      	movs	r3, #5
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4849      	ldr	r0, [pc, #292]	; (8001518 <HAL_SPI_MspInit+0x1b8>)
 80013f2:	f001 fe15 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013f6:	e086      	b.n	8001506 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a47      	ldr	r2, [pc, #284]	; (800151c <HAL_SPI_MspInit+0x1bc>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d144      	bne.n	800148c <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	4a43      	ldr	r2, [pc, #268]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	6593      	str	r3, [r2, #88]	; 0x58
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a3d      	ldr	r2, [pc, #244]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	4b38      	ldr	r3, [pc, #224]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a37      	ldr	r2, [pc, #220]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b35      	ldr	r3, [pc, #212]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 800144a:	230a      	movs	r3, #10
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800145a:	2305      	movs	r3, #5
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	482e      	ldr	r0, [pc, #184]	; (8001520 <HAL_SPI_MspInit+0x1c0>)
 8001466:	f001 fddb 	bl	8003020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800146a:	2308      	movs	r3, #8
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147a:	2305      	movs	r3, #5
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	4827      	ldr	r0, [pc, #156]	; (8001524 <HAL_SPI_MspInit+0x1c4>)
 8001486:	f001 fdcb 	bl	8003020 <HAL_GPIO_Init>
}
 800148a:	e03c      	b.n	8001506 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a25      	ldr	r2, [pc, #148]	; (8001528 <HAL_SPI_MspInit+0x1c8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d137      	bne.n	8001506 <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 800149c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a0:	6593      	str	r3, [r2, #88]	; 0x58
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_SPI_MspInit+0x1b4>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 80014c6:	2330      	movs	r3, #48	; 0x30
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014d6:	2306      	movs	r3, #6
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	4812      	ldr	r0, [pc, #72]	; (800152c <HAL_SPI_MspInit+0x1cc>)
 80014e2:	f001 fd9d 	bl	8003020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 80014e6:	2308      	movs	r3, #8
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014f6:	2306      	movs	r3, #6
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	480a      	ldr	r0, [pc, #40]	; (800152c <HAL_SPI_MspInit+0x1cc>)
 8001502:	f001 fd8d 	bl	8003020 <HAL_GPIO_Init>
}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40013000 	.word	0x40013000
 8001514:	40021000 	.word	0x40021000
 8001518:	48001000 	.word	0x48001000
 800151c:	40003800 	.word	0x40003800
 8001520:	48000c00 	.word	0x48000c00
 8001524:	48000800 	.word	0x48000800
 8001528:	40003c00 	.word	0x40003c00
 800152c:	48000400 	.word	0x48000400

08001530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001540:	d10c      	bne.n	800155c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6593      	str	r3, [r2, #88]	; 0x58
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800155a:	e044      	b.n	80015e6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <HAL_TIM_Base_MspInit+0xc4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d114      	bne.n	8001590 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	6593      	str	r3, [r2, #88]	; 0x58
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2105      	movs	r1, #5
 8001582:	2032      	movs	r0, #50	; 0x32
 8001584:	f001 f93c 	bl	8002800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001588:	2032      	movs	r0, #50	; 0x32
 800158a:	f001 f955 	bl	8002838 <HAL_NVIC_EnableIRQ>
}
 800158e:	e02a      	b.n	80015e6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <HAL_TIM_Base_MspInit+0xc8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d114      	bne.n	80015c4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	6593      	str	r3, [r2, #88]	; 0x58
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2105      	movs	r1, #5
 80015b6:	2036      	movs	r0, #54	; 0x36
 80015b8:	f001 f922 	bl	8002800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015bc:	2036      	movs	r0, #54	; 0x36
 80015be:	f001 f93b 	bl	8002838 <HAL_NVIC_EnableIRQ>
}
 80015c2:	e010      	b.n	80015e6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <HAL_TIM_Base_MspInit+0xcc>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d10b      	bne.n	80015e6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 80015d4:	f043 0320 	orr.w	r3, r3, #32
 80015d8:	6593      	str	r3, [r2, #88]	; 0x58
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_TIM_Base_MspInit+0xc0>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	f003 0320 	and.w	r3, r3, #32
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40000c00 	.word	0x40000c00
 80015f8:	40001000 	.word	0x40001000
 80015fc:	40001400 	.word	0x40001400

08001600 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	201d      	movs	r0, #29
 8001616:	f001 f8f3 	bl	8002800 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800161a:	201d      	movs	r0, #29
 800161c:	f001 f90c 	bl	8002838 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_InitTick+0x9c>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_InitTick+0x9c>)
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	6593      	str	r3, [r2, #88]	; 0x58
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_InitTick+0x9c>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001638:	f107 0210 	add.w	r2, r7, #16
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f003 ff96 	bl	8005574 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001648:	f003 ff68 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 800164c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <HAL_InitTick+0xa0>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	3b01      	subs	r3, #1
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_InitTick+0xa4>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <HAL_InitTick+0xa8>)
 8001660:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_InitTick+0xa4>)
 8001664:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001668:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_InitTick+0xa4>)
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_InitTick+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_InitTick+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <HAL_InitTick+0xa4>)
 800167e:	f007 fe0f 	bl	80092a0 <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d104      	bne.n	8001692 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001688:	4806      	ldr	r0, [pc, #24]	; (80016a4 <HAL_InitTick+0xa4>)
 800168a:	f007 fe61 	bl	8009350 <HAL_TIM_Base_Start_IT>
 800168e:	4603      	mov	r3, r0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3730      	adds	r7, #48	; 0x30
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	431bde83 	.word	0x431bde83
 80016a4:	20002918 	.word	0x20002918
 80016a8:	40000400 	.word	0x40000400

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <DMA1_Channel4_IRQHandler+0x10>)
 80016de:	f001 fb8d 	bl	8002dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20002458 	.word	0x20002458

080016ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM3_IRQHandler+0x10>)
 80016f2:	f007 fe9d 	bl	8009430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20002918 	.word	0x20002918

08001700 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <SDMMC1_IRQHandler+0x10>)
 8001706:	f006 faad 	bl	8007c64 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000205c 	.word	0x2000205c

08001714 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM5_IRQHandler+0x10>)
 800171a:	f007 fe89 	bl	8009430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000233c 	.word	0x2000233c

08001728 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <TIM6_DAC_IRQHandler+0x10>)
 800172e:	f007 fe7f 	bl	8009430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20002598 	.word	0x20002598

0800173c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <OTG_FS_IRQHandler+0x10>)
 8001742:	f002 f8c2 	bl	80038ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200042e8 	.word	0x200042e8

08001750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <SystemInit+0x5c>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a14      	ldr	r2, [pc, #80]	; (80017ac <SystemInit+0x5c>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <SystemInit+0x60>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <SystemInit+0x60>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <SystemInit+0x60>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <SystemInit+0x60>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <SystemInit+0x60>)
 800177c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001780:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001784:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <SystemInit+0x60>)
 8001788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800178c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <SystemInit+0x60>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <SystemInit+0x60>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SystemInit+0x60>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00
 80017b0:	40021000 	.word	0x40021000

080017b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b8:	f7ff ffca 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017be:	e003      	b.n	80017c8 <LoopCopyDataInit>

080017c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017c6:	3104      	adds	r1, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017c8:	480a      	ldr	r0, [pc, #40]	; (80017f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017d0:	d3f6      	bcc.n	80017c0 <CopyDataInit>
	ldr	r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80017d4:	e002      	b.n	80017dc <LoopFillZerobss>

080017d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017d8:	f842 3b04 	str.w	r3, [r2], #4

080017dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <LoopForever+0x16>)
	cmp	r2, r3
 80017de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017e0:	d3f9      	bcc.n	80017d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e2:	f010 fc25 	bl	8012030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017e6:	f7fe fd0b 	bl	8000200 <main>

080017ea <LoopForever>:

LoopForever:
    b LoopForever
 80017ea:	e7fe      	b.n	80017ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017ec:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80017f0:	0801225c 	.word	0x0801225c
	ldr	r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017f8:	20000194 	.word	0x20000194
	ldr	r2, =_sbss
 80017fc:	20000194 	.word	0x20000194
	ldr	r3, = _ebss
 8001800:	200046f0 	.word	0x200046f0

08001804 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_IRQHandler>

08001806 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 ffea 	bl	80027ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fef2 	bl	8001600 <HAL_InitTick>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	e001      	b.n	800182c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001828:	f7ff fb54 	bl	8000ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x20>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_IncTick+0x24>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008
 800185c:	20002964 	.word	0x20002964

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20002964 	.word	0x20002964

08001878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff ffee 	bl	8001860 <HAL_GetTick>
 8001884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d005      	beq.n	800189e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_Delay+0x44>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189e:	bf00      	nop
 80018a0:	f7ff ffde 	bl	8001860 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <HAL_Delay+0x28>
  {
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008

080018c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	609a      	str	r2, [r3, #8]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	609a      	str	r2, [r3, #8]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3360      	adds	r3, #96	; 0x60
 800193a:	461a      	mov	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <LL_ADC_SetOffset+0x44>)
 800194a:	4013      	ands	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	4313      	orrs	r3, r2
 8001958:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	03fff000 	.word	0x03fff000

08001970 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3360      	adds	r3, #96	; 0x60
 800197e:	461a      	mov	r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3360      	adds	r3, #96	; 0x60
 80019ac:	461a      	mov	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	615a      	str	r2, [r3, #20]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3330      	adds	r3, #48	; 0x30
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	211f      	movs	r1, #31
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	f003 011f 	and.w	r1, r3, #31
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a44:	bf00      	nop
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3314      	adds	r3, #20
 8001a60:	461a      	mov	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	0e5b      	lsrs	r3, r3, #25
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	4413      	add	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	0d1b      	lsrs	r3, r3, #20
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	2107      	movs	r1, #7
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	401a      	ands	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	0d1b      	lsrs	r3, r3, #20
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	431a      	orrs	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0318 	and.w	r3, r3, #24
 8001aca:	4908      	ldr	r1, [pc, #32]	; (8001aec <LL_ADC_SetChannelSingleDiff+0x44>)
 8001acc:	40d9      	lsrs	r1, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	0007ffff 	.word	0x0007ffff

08001af0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6093      	str	r3, [r2, #8]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b28:	d101      	bne.n	8001b2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b78:	d101      	bne.n	8001b7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <LL_ADC_IsEnabled+0x18>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <LL_ADC_IsEnabled+0x1a>
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d101      	bne.n	8001bca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d101      	bne.n	8001bf0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e12f      	b.n	8001e7a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff f97b 	bl	8000f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff67 	bl	8001b14 <LL_ADC_IsDeepPowerDownEnabled>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff4d 	bl	8001af0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff82 	bl	8001b64 <LL_ADC_IsInternalRegulatorEnabled>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d115      	bne.n	8001c92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff66 	bl	8001b3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c70:	4b84      	ldr	r3, [pc, #528]	; (8001e84 <HAL_ADC_Init+0x284>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	4a84      	ldr	r2, [pc, #528]	; (8001e88 <HAL_ADC_Init+0x288>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	3301      	adds	r3, #1
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c84:	e002      	b.n	8001c8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f9      	bne.n	8001c86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff64 	bl	8001b64 <LL_ADC_IsInternalRegulatorEnabled>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10d      	bne.n	8001cbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	f043 0210 	orr.w	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff75 	bl	8001bb2 <LL_ADC_REG_IsConversionOngoing>
 8001cc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 80c8 	bne.w	8001e68 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 80c4 	bne.w	8001e68 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ce8:	f043 0202 	orr.w	r2, r3, #2
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff49 	bl	8001b8c <LL_ADC_IsEnabled>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10b      	bne.n	8001d18 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d00:	4862      	ldr	r0, [pc, #392]	; (8001e8c <HAL_ADC_Init+0x28c>)
 8001d02:	f7ff ff43 	bl	8001b8c <LL_ADC_IsEnabled>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4619      	mov	r1, r3
 8001d12:	485f      	ldr	r0, [pc, #380]	; (8001e90 <HAL_ADC_Init+0x290>)
 8001d14:	f7ff fdd4 	bl	80018c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7e5b      	ldrb	r3, [r3, #25]
 8001d1c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d22:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d28:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d2e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d36:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d106      	bne.n	8001d54 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	045b      	lsls	r3, r3, #17
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_ADC_Init+0x294>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	69b9      	ldr	r1, [r7, #24]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff12 	bl	8001bb2 <LL_ADC_REG_IsConversionOngoing>
 8001d8e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff1f 	bl	8001bd8 <LL_ADC_INJ_IsConversionOngoing>
 8001d9a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d140      	bne.n	8001e24 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d13d      	bne.n	8001e24 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7e1b      	ldrb	r3, [r3, #24]
 8001db0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001db2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dca:	f023 0306 	bic.w	r3, r3, #6
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	69b9      	ldr	r1, [r7, #24]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d118      	bne.n	8001e14 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001df8:	4311      	orrs	r1, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e04:	430a      	orrs	r2, r1
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	e007      	b.n	8001e24 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d10c      	bne.n	8001e46 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f023 010f 	bic.w	r1, r3, #15
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	1e5a      	subs	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
 8001e44:	e007      	b.n	8001e56 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 020f 	bic.w	r2, r2, #15
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	f023 0303 	bic.w	r3, r3, #3
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	; 0x58
 8001e66:	e007      	b.n	8001e78 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f043 0210 	orr.w	r2, r3, #16
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000
 8001e88:	053e2d63 	.word	0x053e2d63
 8001e8c:	50040000 	.word	0x50040000
 8001e90:	50040300 	.word	0x50040300
 8001e94:	fff0c007 	.word	0xfff0c007

08001e98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0b6      	sub	sp, #216	; 0xd8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x22>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e3d5      	b.n	8002666 <HAL_ADC_ConfigChannel+0x7ce>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fe73 	bl	8001bb2 <LL_ADC_REG_IsConversionOngoing>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 83ba 	bne.w	8002648 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d824      	bhi.n	8001f26 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	3b02      	subs	r3, #2
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d81b      	bhi.n	8001f1e <HAL_ADC_ConfigChannel+0x86>
 8001ee6:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <HAL_ADC_ConfigChannel+0x54>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001efd 	.word	0x08001efd
 8001ef0:	08001f05 	.word	0x08001f05
 8001ef4:	08001f0d 	.word	0x08001f0d
 8001ef8:	08001f15 	.word	0x08001f15
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	220c      	movs	r2, #12
 8001f00:	605a      	str	r2, [r3, #4]
          break;
 8001f02:	e011      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2212      	movs	r2, #18
 8001f08:	605a      	str	r2, [r3, #4]
          break;
 8001f0a:	e00d      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2218      	movs	r2, #24
 8001f10:	605a      	str	r2, [r3, #4]
          break;
 8001f12:	e009      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f1a:	605a      	str	r2, [r3, #4]
          break;
 8001f1c:	e004      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2206      	movs	r2, #6
 8001f22:	605a      	str	r2, [r3, #4]
          break;
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001f26:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	f7ff fd5f 	bl	80019f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fe37 	bl	8001bb2 <LL_ADC_REG_IsConversionOngoing>
 8001f44:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fe43 	bl	8001bd8 <LL_ADC_INJ_IsConversionOngoing>
 8001f52:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 81c1 	bne.w	80022e2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f040 81bc 	bne.w	80022e2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f72:	d10f      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7ff fd66 	bl	8001a50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fd20 	bl	80019d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f92:	e00e      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f7ff fd55 	bl	8001a50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fd10 	bl	80019d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	08db      	lsrs	r3, r3, #3
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d00a      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6919      	ldr	r1, [r3, #16]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fe4:	f7ff fca0 	bl	8001928 <LL_ADC_SetOffset>
 8001fe8:	e17b      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fcbd 	bl	8001970 <LL_ADC_GetOffsetChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10a      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x17e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fcb2 	bl	8001970 <LL_ADC_GetOffsetChannel>
 800200c:	4603      	mov	r3, r0
 800200e:	0e9b      	lsrs	r3, r3, #26
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	e01e      	b.n	8002054 <HAL_ADC_ConfigChannel+0x1bc>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fca7 	bl	8001970 <LL_ADC_GetOffsetChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002034:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800203c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002044:	2320      	movs	r3, #32
 8002046:	e004      	b.n	8002052 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002048:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_ADC_ConfigChannel+0x1d4>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	e018      	b.n	800209e <HAL_ADC_ConfigChannel+0x206>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002088:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e004      	b.n	800209e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002094:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800209e:	429a      	cmp	r2, r3
 80020a0:	d106      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fc76 	bl	800199c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fc5a 	bl	8001970 <LL_ADC_GetOffsetChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10a      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x244>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2101      	movs	r1, #1
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fc4f 	bl	8001970 <LL_ADC_GetOffsetChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	f003 021f 	and.w	r2, r3, #31
 80020da:	e01e      	b.n	800211a <HAL_ADC_ConfigChannel+0x282>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fc44 	bl	8001970 <LL_ADC_GetOffsetChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80020fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800210a:	2320      	movs	r3, #32
 800210c:	e004      	b.n	8002118 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800210e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002122:	2b00      	cmp	r3, #0
 8002124:	d105      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x29a>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	0e9b      	lsrs	r3, r3, #26
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	e018      	b.n	8002164 <HAL_ADC_ConfigChannel+0x2cc>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800214a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800214e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002156:	2320      	movs	r3, #32
 8002158:	e004      	b.n	8002164 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800215a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002164:	429a      	cmp	r2, r3
 8002166:	d106      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fc13 	bl	800199c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2102      	movs	r1, #2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fbf7 	bl	8001970 <LL_ADC_GetOffsetChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10a      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x30a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2102      	movs	r1, #2
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fbec 	bl	8001970 <LL_ADC_GetOffsetChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	0e9b      	lsrs	r3, r3, #26
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	e01e      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x348>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2102      	movs	r1, #2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fbe1 	bl	8001970 <LL_ADC_GetOffsetChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80021c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e004      	b.n	80021de <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80021d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x360>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	e016      	b.n	8002226 <HAL_ADC_ConfigChannel+0x38e>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800220a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800220c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e004      	b.n	8002226 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800221c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002226:	429a      	cmp	r2, r3
 8002228:	d106      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	2102      	movs	r1, #2
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fbb2 	bl	800199c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2103      	movs	r1, #3
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fb96 	bl	8001970 <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x3cc>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2103      	movs	r1, #3
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fb8b 	bl	8001970 <LL_ADC_GetOffsetChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	0e9b      	lsrs	r3, r3, #26
 800225e:	f003 021f 	and.w	r2, r3, #31
 8002262:	e017      	b.n	8002294 <HAL_ADC_ConfigChannel+0x3fc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2103      	movs	r1, #3
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fb80 	bl	8001970 <LL_ADC_GetOffsetChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800227c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800227e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002286:	2320      	movs	r3, #32
 8002288:	e003      	b.n	8002292 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800228a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x414>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0e9b      	lsrs	r3, r3, #26
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	e011      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x438>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e003      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80022c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d106      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2200      	movs	r2, #0
 80022da:	2103      	movs	r1, #3
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fb5d 	bl	800199c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fc50 	bl	8001b8c <LL_ADC_IsEnabled>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 8140 	bne.w	8002574 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	461a      	mov	r2, r3
 8002302:	f7ff fbd1 	bl	8001aa8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4a8f      	ldr	r2, [pc, #572]	; (8002548 <HAL_ADC_ConfigChannel+0x6b0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	f040 8131 	bne.w	8002574 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10b      	bne.n	800233a <HAL_ADC_ConfigChannel+0x4a2>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	3301      	adds	r3, #1
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2b09      	cmp	r3, #9
 8002330:	bf94      	ite	ls
 8002332:	2301      	movls	r3, #1
 8002334:	2300      	movhi	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	e019      	b.n	800236e <HAL_ADC_ConfigChannel+0x4d6>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800234a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800234c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e003      	b.n	800235e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2b09      	cmp	r3, #9
 8002366:	bf94      	ite	ls
 8002368:	2301      	movls	r3, #1
 800236a:	2300      	movhi	r3, #0
 800236c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800236e:	2b00      	cmp	r3, #0
 8002370:	d079      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_ADC_ConfigChannel+0x4f6>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	3301      	adds	r3, #1
 8002386:	069b      	lsls	r3, r3, #26
 8002388:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800238c:	e015      	b.n	80023ba <HAL_ADC_ConfigChannel+0x522>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800239c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80023a6:	2320      	movs	r3, #32
 80023a8:	e003      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80023aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	069b      	lsls	r3, r3, #26
 80023b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_ADC_ConfigChannel+0x542>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	e017      	b.n	800240a <HAL_ADC_ConfigChannel+0x572>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e003      	b.n	80023fe <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80023f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	ea42 0103 	orr.w	r1, r2, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x598>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	3301      	adds	r3, #1
 8002422:	f003 021f 	and.w	r2, r3, #31
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	e018      	b.n	8002462 <HAL_ADC_ConfigChannel+0x5ca>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800243e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002448:	2320      	movs	r3, #32
 800244a:	e003      	b.n	8002454 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800244c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	3301      	adds	r3, #1
 8002456:	f003 021f 	and.w	r2, r3, #31
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002462:	430b      	orrs	r3, r1
 8002464:	e081      	b.n	800256a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x5ea>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	3301      	adds	r3, #1
 800247a:	069b      	lsls	r3, r3, #26
 800247c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002480:	e015      	b.n	80024ae <HAL_ADC_ConfigChannel+0x616>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e003      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	069b      	lsls	r3, r3, #26
 80024aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x636>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	3301      	adds	r3, #1
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	e017      	b.n	80024fe <HAL_ADC_ConfigChannel+0x666>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	61fb      	str	r3, [r7, #28]
  return result;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e003      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	ea42 0103 	orr.w	r1, r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_ADC_ConfigChannel+0x692>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	0e9b      	lsrs	r3, r3, #26
 8002514:	3301      	adds	r3, #1
 8002516:	f003 021f 	and.w	r2, r3, #31
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	3b1e      	subs	r3, #30
 8002522:	051b      	lsls	r3, r3, #20
 8002524:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002528:	e01e      	b.n	8002568 <HAL_ADC_ConfigChannel+0x6d0>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	613b      	str	r3, [r7, #16]
  return result;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d104      	bne.n	800254c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e006      	b.n	8002554 <HAL_ADC_ConfigChannel+0x6bc>
 8002546:	bf00      	nop
 8002548:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f003 021f 	and.w	r2, r3, #31
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	3b1e      	subs	r3, #30
 8002562:	051b      	lsls	r3, r3, #20
 8002564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002568:	430b      	orrs	r3, r1
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	6892      	ldr	r2, [r2, #8]
 800256e:	4619      	mov	r1, r3
 8002570:	f7ff fa6e 	bl	8001a50 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_ADC_ConfigChannel+0x7d8>)
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d06c      	beq.n	800265a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002580:	483c      	ldr	r0, [pc, #240]	; (8002674 <HAL_ADC_ConfigChannel+0x7dc>)
 8002582:	f7ff f9c3 	bl	800190c <LL_ADC_GetCommonPathInternalCh>
 8002586:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a3a      	ldr	r2, [pc, #232]	; (8002678 <HAL_ADC_ConfigChannel+0x7e0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d127      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002594:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d121      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a35      	ldr	r2, [pc, #212]	; (800267c <HAL_ADC_ConfigChannel+0x7e4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d157      	bne.n	800265a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025b2:	4619      	mov	r1, r3
 80025b4:	482f      	ldr	r0, [pc, #188]	; (8002674 <HAL_ADC_ConfigChannel+0x7dc>)
 80025b6:	f7ff f996 	bl	80018e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_ADC_ConfigChannel+0x7e8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	4a30      	ldr	r2, [pc, #192]	; (8002684 <HAL_ADC_ConfigChannel+0x7ec>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025d4:	e002      	b.n	80025dc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3b01      	subs	r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f9      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025e2:	e03a      	b.n	800265a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a27      	ldr	r2, [pc, #156]	; (8002688 <HAL_ADC_ConfigChannel+0x7f0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d113      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x77e>
 80025ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10d      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_ADC_ConfigChannel+0x7e4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d12a      	bne.n	800265a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260c:	4619      	mov	r1, r3
 800260e:	4819      	ldr	r0, [pc, #100]	; (8002674 <HAL_ADC_ConfigChannel+0x7dc>)
 8002610:	f7ff f969 	bl	80018e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002614:	e021      	b.n	800265a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1c      	ldr	r2, [pc, #112]	; (800268c <HAL_ADC_ConfigChannel+0x7f4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d11c      	bne.n	800265a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d116      	bne.n	800265a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_ADC_ConfigChannel+0x7e4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d111      	bne.n	800265a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002636:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800263a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800263e:	4619      	mov	r1, r3
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <HAL_ADC_ConfigChannel+0x7dc>)
 8002642:	f7ff f950 	bl	80018e6 <LL_ADC_SetCommonPathInternalCh>
 8002646:	e008      	b.n	800265a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002662:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002666:	4618      	mov	r0, r3
 8002668:	37d8      	adds	r7, #216	; 0xd8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	80080000 	.word	0x80080000
 8002674:	50040300 	.word	0x50040300
 8002678:	c7520000 	.word	0xc7520000
 800267c:	50040000 	.word	0x50040000
 8002680:	20000000 	.word	0x20000000
 8002684:	053e2d63 	.word	0x053e2d63
 8002688:	cb840000 	.word	0xcb840000
 800268c:	80000001 	.word	0x80000001

08002690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4907      	ldr	r1, [pc, #28]	; (800272c <__NVIC_EnableIRQ+0x38>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	; (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
         );
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ff4c 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002812:	f7ff ff61 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 8002816:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	6978      	ldr	r0, [r7, #20]
 800281e:	f7ff ffb1 	bl	8002784 <NVIC_EncodePriority>
 8002822:	4602      	mov	r2, r0
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff80 	bl	8002730 <__NVIC_SetPriority>
}
 8002830:	bf00      	nop
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff54 	bl	80026f4 <__NVIC_EnableIRQ>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e0ac      	b.n	80029c0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f9d2 	bl	8002c14 <DFSDM_GetChannelFromInstance>
 8002870:	4603      	mov	r3, r0
 8002872:	4a55      	ldr	r2, [pc, #340]	; (80029c8 <HAL_DFSDM_ChannelInit+0x174>)
 8002874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e09f      	b.n	80029c0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7fe fc11 	bl	80010a8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002886:	4b51      	ldr	r3, [pc, #324]	; (80029cc <HAL_DFSDM_ChannelInit+0x178>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_DFSDM_ChannelInit+0x178>)
 800288e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002890:	4b4e      	ldr	r3, [pc, #312]	; (80029cc <HAL_DFSDM_ChannelInit+0x178>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d125      	bne.n	80028e4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002898:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a4c      	ldr	r2, [pc, #304]	; (80029d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800289e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028a2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80028a4:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4948      	ldr	r1, [pc, #288]	; (80029d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a46      	ldr	r2, [pc, #280]	; (80029d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028b8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80028bc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	791b      	ldrb	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80028c6:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	041b      	lsls	r3, r3, #16
 80028d2:	493f      	ldr	r1, [pc, #252]	; (80029d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80028d8:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028e2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80028f2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002902:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002908:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 020f 	bic.w	r2, r2, #15
 8002920:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6819      	ldr	r1, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002948:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6899      	ldr	r1, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f002 0207 	and.w	r2, r2, #7
 8002974:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029a0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f930 	bl	8002c14 <DFSDM_GetChannelFromInstance>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4904      	ldr	r1, [pc, #16]	; (80029c8 <HAL_DFSDM_ChannelInit+0x174>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200001bc 	.word	0x200001bc
 80029cc:	200001b8 	.word	0x200001b8
 80029d0:	40016000 	.word	0x40016000

080029d4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0ca      	b.n	8002b7c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a66      	ldr	r2, [pc, #408]	; (8002b84 <HAL_DFSDM_FilterInit+0x1b0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d109      	bne.n	8002a04 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d003      	beq.n	8002a00 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0bb      	b.n	8002b7c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7fe fad9 	bl	8000fd4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002a30:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7a1b      	ldrb	r3, [r3, #8]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d108      	bne.n	8002a4c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e007      	b.n	8002a5c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7a5b      	ldrb	r3, [r3, #9]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d108      	bne.n	8002a76 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e007      	b.n	8002a86 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a94:	f023 0308 	bic.w	r3, r3, #8
 8002a98:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d108      	bne.n	8002ab4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6819      	ldr	r1, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7c1b      	ldrb	r3, [r3, #16]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d108      	bne.n	8002ace <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0210 	orr.w	r2, r2, #16
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e007      	b.n	8002ade <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0210 	bic.w	r2, r2, #16
 8002adc:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7c5b      	ldrb	r3, [r3, #17]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d108      	bne.n	8002af8 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0220 	orr.w	r2, r2, #32
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e007      	b.n	8002b08 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0220 	bic.w	r2, r2, #32
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002b16:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002b1a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6959      	ldr	r1, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002b2e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002b36:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	7c1a      	ldrb	r2, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40016100 	.word	0x40016100

08002b88 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d02e      	beq.n	8002c00 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002ba8:	2bff      	cmp	r3, #255	; 0xff
 8002baa:	d029      	beq.n	8002c00 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d10d      	bne.n	8002be2 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e00a      	b.n	8002bf8 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfe:	e001      	b.n	8002c04 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a1c      	ldr	r2, [pc, #112]	; (8002c90 <DFSDM_GetChannelFromInstance+0x7c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d102      	bne.n	8002c2a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e02b      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <DFSDM_GetChannelFromInstance+0x80>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d102      	bne.n	8002c38 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e024      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <DFSDM_GetChannelFromInstance+0x84>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d102      	bne.n	8002c46 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c40:	2302      	movs	r3, #2
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e01d      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <DFSDM_GetChannelFromInstance+0x88>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d102      	bne.n	8002c54 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e016      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d102      	bne.n	8002c62 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c5c:	2305      	movs	r3, #5
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e00f      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a0f      	ldr	r2, [pc, #60]	; (8002ca4 <DFSDM_GetChannelFromInstance+0x90>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d102      	bne.n	8002c70 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e008      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <DFSDM_GetChannelFromInstance+0x94>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d102      	bne.n	8002c7e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c78:	2307      	movs	r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e001      	b.n	8002c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40016000 	.word	0x40016000
 8002c94:	40016020 	.word	0x40016020
 8002c98:	40016040 	.word	0x40016040
 8002c9c:	40016080 	.word	0x40016080
 8002ca0:	400160a0 	.word	0x400160a0
 8002ca4:	400160c0 	.word	0x400160c0
 8002ca8:	400160e0 	.word	0x400160e0

08002cac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e08d      	b.n	8002dda <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_DMA_Init+0x138>)
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d80f      	bhi.n	8002cea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4b45      	ldr	r3, [pc, #276]	; (8002de8 <HAL_DMA_Init+0x13c>)
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a45      	ldr	r2, [pc, #276]	; (8002dec <HAL_DMA_Init+0x140>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	009a      	lsls	r2, r3, #2
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a42      	ldr	r2, [pc, #264]	; (8002df0 <HAL_DMA_Init+0x144>)
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ce8:	e00e      	b.n	8002d08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b40      	ldr	r3, [pc, #256]	; (8002df4 <HAL_DMA_Init+0x148>)
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a3d      	ldr	r2, [pc, #244]	; (8002dec <HAL_DMA_Init+0x140>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a3c      	ldr	r2, [pc, #240]	; (8002df8 <HAL_DMA_Init+0x14c>)
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8fe 	bl	8002f5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d68:	d102      	bne.n	8002d70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d84:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_DMA_Init+0x104>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d80c      	bhi.n	8002db0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f91e 	bl	8002fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	e008      	b.n	8002dc2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40020407 	.word	0x40020407
 8002de8:	bffdfff8 	.word	0xbffdfff8
 8002dec:	cccccccd 	.word	0xcccccccd
 8002df0:	40020000 	.word	0x40020000
 8002df4:	bffdfbf8 	.word	0xbffdfbf8
 8002df8:	40020400 	.word	0x40020400

08002dfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	f003 031c 	and.w	r3, r3, #28
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d026      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x7a>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d021      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d107      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0204 	bic.w	r2, r2, #4
 8002e4e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	f003 021c 	and.w	r2, r3, #28
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d071      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002e74:	e06c      	b.n	8002f50 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f003 031c 	and.w	r3, r3, #28
 8002e7e:	2202      	movs	r2, #2
 8002e80:	409a      	lsls	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d02e      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0xec>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d029      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 020a 	bic.w	r2, r2, #10
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f003 021c 	and.w	r2, r3, #28
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d038      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ee6:	e033      	b.n	8002f50 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	f003 031c 	and.w	r3, r3, #28
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02a      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x156>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d025      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 020e 	bic.w	r2, r2, #14
 8002f14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f003 021c 	and.w	r2, r3, #28
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f202 	lsl.w	r2, r1, r2
 8002f28:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
}
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d80a      	bhi.n	8002f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f7c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6493      	str	r3, [r2, #72]	; 0x48
 8002f84:	e007      	b.n	8002f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	009a      	lsls	r2, r3, #2
 8002f8e:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002f90:	4413      	add	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3b08      	subs	r3, #8
 8002f9e:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002fac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40020407 	.word	0x40020407
 8002fcc:	4002081c 	.word	0x4002081c
 8002fd0:	cccccccd 	.word	0xcccccccd
 8002fd4:	40020880 	.word	0x40020880

08002fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a08      	ldr	r2, [pc, #32]	; (800301c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ffa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2201      	movs	r2, #1
 8003006:	409a      	lsls	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	1000823f 	.word	0x1000823f
 800301c:	40020940 	.word	0x40020940

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800302e:	e166      	b.n	80032fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8158 	beq.w	80032f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d00b      	beq.n	8003068 <HAL_GPIO_Init+0x48>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d007      	beq.n	8003068 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800305c:	2b11      	cmp	r3, #17
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b12      	cmp	r3, #18
 8003066:	d130      	bne.n	80030ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800309e:	2201      	movs	r2, #1
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f003 0201 	and.w	r2, r3, #1
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	2203      	movs	r2, #3
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0xea>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b12      	cmp	r3, #18
 8003108:	d123      	bne.n	8003152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	08da      	lsrs	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3208      	adds	r2, #8
 8003112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	08da      	lsrs	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	6939      	ldr	r1, [r7, #16]
 800314e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	2203      	movs	r2, #3
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0203 	and.w	r2, r3, #3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80b2 	beq.w	80032f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003194:	4b61      	ldr	r3, [pc, #388]	; (800331c <HAL_GPIO_Init+0x2fc>)
 8003196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003198:	4a60      	ldr	r2, [pc, #384]	; (800331c <HAL_GPIO_Init+0x2fc>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6613      	str	r3, [r2, #96]	; 0x60
 80031a0:	4b5e      	ldr	r3, [pc, #376]	; (800331c <HAL_GPIO_Init+0x2fc>)
 80031a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ac:	4a5c      	ldr	r2, [pc, #368]	; (8003320 <HAL_GPIO_Init+0x300>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	220f      	movs	r2, #15
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031d6:	d02b      	beq.n	8003230 <HAL_GPIO_Init+0x210>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_GPIO_Init+0x304>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d025      	beq.n	800322c <HAL_GPIO_Init+0x20c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a51      	ldr	r2, [pc, #324]	; (8003328 <HAL_GPIO_Init+0x308>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d01f      	beq.n	8003228 <HAL_GPIO_Init+0x208>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a50      	ldr	r2, [pc, #320]	; (800332c <HAL_GPIO_Init+0x30c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d019      	beq.n	8003224 <HAL_GPIO_Init+0x204>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a4f      	ldr	r2, [pc, #316]	; (8003330 <HAL_GPIO_Init+0x310>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d013      	beq.n	8003220 <HAL_GPIO_Init+0x200>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a4e      	ldr	r2, [pc, #312]	; (8003334 <HAL_GPIO_Init+0x314>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00d      	beq.n	800321c <HAL_GPIO_Init+0x1fc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a4d      	ldr	r2, [pc, #308]	; (8003338 <HAL_GPIO_Init+0x318>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d007      	beq.n	8003218 <HAL_GPIO_Init+0x1f8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a4c      	ldr	r2, [pc, #304]	; (800333c <HAL_GPIO_Init+0x31c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_GPIO_Init+0x1f4>
 8003210:	2307      	movs	r3, #7
 8003212:	e00e      	b.n	8003232 <HAL_GPIO_Init+0x212>
 8003214:	2308      	movs	r3, #8
 8003216:	e00c      	b.n	8003232 <HAL_GPIO_Init+0x212>
 8003218:	2306      	movs	r3, #6
 800321a:	e00a      	b.n	8003232 <HAL_GPIO_Init+0x212>
 800321c:	2305      	movs	r3, #5
 800321e:	e008      	b.n	8003232 <HAL_GPIO_Init+0x212>
 8003220:	2304      	movs	r3, #4
 8003222:	e006      	b.n	8003232 <HAL_GPIO_Init+0x212>
 8003224:	2303      	movs	r3, #3
 8003226:	e004      	b.n	8003232 <HAL_GPIO_Init+0x212>
 8003228:	2302      	movs	r3, #2
 800322a:	e002      	b.n	8003232 <HAL_GPIO_Init+0x212>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_GPIO_Init+0x212>
 8003230:	2300      	movs	r3, #0
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	f002 0203 	and.w	r2, r2, #3
 8003238:	0092      	lsls	r2, r2, #2
 800323a:	4093      	lsls	r3, r2
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003242:	4937      	ldr	r1, [pc, #220]	; (8003320 <HAL_GPIO_Init+0x300>)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	3302      	adds	r3, #2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003250:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_GPIO_Init+0x320>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	43db      	mvns	r3, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003274:	4a32      	ldr	r2, [pc, #200]	; (8003340 <HAL_GPIO_Init+0x320>)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800327a:	4b31      	ldr	r3, [pc, #196]	; (8003340 <HAL_GPIO_Init+0x320>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800329e:	4a28      	ldr	r2, [pc, #160]	; (8003340 <HAL_GPIO_Init+0x320>)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032a4:	4b26      	ldr	r3, [pc, #152]	; (8003340 <HAL_GPIO_Init+0x320>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032c8:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <HAL_GPIO_Init+0x320>)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032ce:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <HAL_GPIO_Init+0x320>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032f2:	4a13      	ldr	r2, [pc, #76]	; (8003340 <HAL_GPIO_Init+0x320>)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	3301      	adds	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	f47f ae91 	bne.w	8003030 <HAL_GPIO_Init+0x10>
  }
}
 800330e:	bf00      	nop
 8003310:	bf00      	nop
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40021000 	.word	0x40021000
 8003320:	40010000 	.word	0x40010000
 8003324:	48000400 	.word	0x48000400
 8003328:	48000800 	.word	0x48000800
 800332c:	48000c00 	.word	0x48000c00
 8003330:	48001000 	.word	0x48001000
 8003334:	48001400 	.word	0x48001400
 8003338:	48001800 	.word	0x48001800
 800333c:	48001c00 	.word	0x48001c00
 8003340:	40010400 	.word	0x40010400

08003344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	887b      	ldrh	r3, [r7, #2]
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e001      	b.n	8003366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
 8003380:	4613      	mov	r3, r2
 8003382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003384:	787b      	ldrb	r3, [r7, #1]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003390:	e002      	b.n	8003398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033b6:	887a      	ldrh	r2, [r7, #2]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4013      	ands	r3, r2
 80033bc:	041a      	lsls	r2, r3, #16
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	43d9      	mvns	r1, r3
 80033c2:	887b      	ldrh	r3, [r7, #2]
 80033c4:	400b      	ands	r3, r1
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	619a      	str	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e081      	b.n	80034ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd fe80 	bl	8001104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	e006      	b.n	8003460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800345e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d104      	bne.n	8003472 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003470:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003484:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003494:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	ea42 0103 	orr.w	r1, r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	021a      	lsls	r2, r3, #8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69d9      	ldr	r1, [r3, #28]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1a      	ldr	r2, [r3, #32]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b20      	cmp	r3, #32
 800350a:	d138      	bne.n	800357e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003516:	2302      	movs	r3, #2
 8003518:	e032      	b.n	8003580 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2224      	movs	r2, #36	; 0x24
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003548:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e000      	b.n	8003580 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d139      	bne.n	8003616 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e033      	b.n	8003618 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	; 0x24
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003626:	b08f      	sub	sp, #60	; 0x3c
 8003628:	af0a      	add	r7, sp, #40	; 0x28
 800362a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e116      	b.n	8003864 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f00e f8d7 	bl	8011804 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2203      	movs	r2, #3
 800365a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f007 f982 	bl	800a97e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	687e      	ldr	r6, [r7, #4]
 8003682:	466d      	mov	r5, sp
 8003684:	f106 0410 	add.w	r4, r6, #16
 8003688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800368c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003690:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003694:	e885 0003 	stmia.w	r5, {r0, r1}
 8003698:	1d33      	adds	r3, r6, #4
 800369a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800369c:	6838      	ldr	r0, [r7, #0]
 800369e:	f007 f895 	bl	800a7cc <USB_CoreInit>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0d7      	b.n	8003864 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f007 f970 	bl	800a9a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]
 80036c4:	e04a      	b.n	800375c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	333d      	adds	r3, #61	; 0x3d
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	333c      	adds	r3, #60	; 0x3c
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	b298      	uxth	r0, r3
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3342      	adds	r3, #66	; 0x42
 8003702:	4602      	mov	r2, r0
 8003704:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	333f      	adds	r3, #63	; 0x3f
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3344      	adds	r3, #68	; 0x44
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3348      	adds	r3, #72	; 0x48
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	3350      	adds	r3, #80	; 0x50
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	3301      	adds	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d3af      	bcc.n	80036c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
 800376a:	e044      	b.n	80037f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	3301      	adds	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3b5      	bcc.n	800376c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	687e      	ldr	r6, [r7, #4]
 8003808:	466d      	mov	r5, sp
 800380a:	f106 0410 	add.w	r4, r6, #16
 800380e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003816:	e894 0003 	ldmia.w	r4, {r0, r1}
 800381a:	e885 0003 	stmia.w	r5, {r0, r1}
 800381e:	1d33      	adds	r3, r6, #4
 8003820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003822:	6838      	ldr	r0, [r7, #0]
 8003824:	f007 f8e6 	bl	800a9f4 <USB_DevInit>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e014      	b.n	8003864 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b01      	cmp	r3, #1
 8003850:	d102      	bne.n	8003858 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 ff62 	bl	800471c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f008 f868 	bl	800b932 <USB_DevDisconnect>

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800386c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_PCD_Start+0x1c>
 8003884:	2302      	movs	r3, #2
 8003886:	e01c      	b.n	80038c2 <HAL_PCD_Start+0x56>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f007 f857 	bl	800a95c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f008 f81c 	bl	800b8f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038ca:	b590      	push	{r4, r7, lr}
 80038cc:	b08d      	sub	sp, #52	; 0x34
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f008 f8da 	bl	800ba9a <USB_GetMode>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 838f 	bne.w	800400c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f008 f83e 	bl	800b974 <USB_ReadInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8385 	beq.w	800400a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f008 f835 	bl	800b974 <USB_ReadInterrupts>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b02      	cmp	r3, #2
 8003912:	d107      	bne.n	8003924 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f002 0202 	and.w	r2, r2, #2
 8003922:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f008 f823 	bl	800b974 <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b10      	cmp	r3, #16
 8003936:	d161      	bne.n	80039fc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0210 	bic.w	r2, r2, #16
 8003946:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	0c5b      	lsrs	r3, r3, #17
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	2b02      	cmp	r3, #2
 8003972:	d124      	bne.n	80039be <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d035      	beq.n	80039ec <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800398a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6a38      	ldr	r0, [r7, #32]
 8003994:	f007 fe89 	bl	800b6aa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a4:	441a      	add	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b6:	441a      	add	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	619a      	str	r2, [r3, #24]
 80039bc:	e016      	b.n	80039ec <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	0c5b      	lsrs	r3, r3, #17
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d110      	bne.n	80039ec <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039d0:	2208      	movs	r2, #8
 80039d2:	4619      	mov	r1, r3
 80039d4:	6a38      	ldr	r0, [r7, #32]
 80039d6:	f007 fe68 	bl	800b6aa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e6:	441a      	add	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0210 	orr.w	r2, r2, #16
 80039fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f007 ffb7 	bl	800b974 <USB_ReadInterrupts>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a10:	d16e      	bne.n	8003af0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f007 ffbd 	bl	800b99a <USB_ReadDevAllOutEpInterrupt>
 8003a20:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a22:	e062      	b.n	8003aea <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d057      	beq.n	8003ade <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	4611      	mov	r1, r2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f007 ffe2 	bl	800ba02 <USB_ReadDevOutEPInterrupt>
 8003a3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00c      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	461a      	mov	r2, r3
 8003a58:	2301      	movs	r3, #1
 8003a5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fd82 	bl	8004568 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00c      	beq.n	8003a88 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fdbe 	bl	8004604 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aba:	461a      	mov	r2, r3
 8003abc:	2320      	movs	r3, #32
 8003abe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003adc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d199      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f007 ff3d 	bl	800b974 <USB_ReadInterrupts>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b04:	f040 8087 	bne.w	8003c16 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f007 ff5e 	bl	800b9ce <USB_ReadDevAllInEpInterrupt>
 8003b12:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b18:	e07a      	b.n	8003c10 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d06f      	beq.n	8003c04 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f007 ff85 	bl	800ba3e <USB_ReadDevInEPInterrupt>
 8003b34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d020      	beq.n	8003b82 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	2201      	movs	r2, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69f9      	ldr	r1, [r7, #28]
 8003b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b60:	4013      	ands	r3, r2
 8003b62:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b70:	461a      	mov	r2, r3
 8003b72:	2301      	movs	r3, #1
 8003b74:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f00d fed4 	bl	801192a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2310      	movs	r3, #16
 8003bb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2340      	movs	r3, #64	; 0x40
 8003bd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bec:	461a      	mov	r2, r3
 8003bee:	2302      	movs	r3, #2
 8003bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fc29 	bl	8004456 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d181      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f007 feaa 	bl	800b974 <USB_ReadInterrupts>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c2a:	d122      	bne.n	8003c72 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d108      	bne.n	8003c5c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c52:	2100      	movs	r1, #0
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f00e f97f 	bl	8011f58 <HAL_PCDEx_LPM_Callback>
 8003c5a:	e002      	b.n	8003c62 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f00d fed1 	bl	8011a04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f007 fe7c 	bl	800b974 <USB_ReadInterrupts>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c86:	d112      	bne.n	8003cae <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d102      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f00d fe8d 	bl	80119b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f007 fe5e 	bl	800b974 <USB_ReadInterrupts>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc2:	d121      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003cd2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d111      	bne.n	8003d02 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	089b      	lsrs	r3, r3, #2
 8003cee:	f003 020f 	and.w	r2, r3, #15
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f00e f92c 	bl	8011f58 <HAL_PCDEx_LPM_Callback>
 8003d00:	e002      	b.n	8003d08 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f00d fe58 	bl	80119b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f007 fe31 	bl	800b974 <USB_ReadInterrupts>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	f040 80c5 	bne.w	8003eaa <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2110      	movs	r1, #16
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f006 ffa6 	bl	800ac8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d44:	e056      	b.n	8003df4 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d52:	461a      	mov	r2, r3
 8003d54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6a:	0151      	lsls	r1, r2, #5
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	440a      	add	r2, r1
 8003d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d78:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8a:	0151      	lsls	r1, r2, #5
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	440a      	add	r2, r1
 8003d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da6:	461a      	mov	r2, r3
 8003da8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dbe:	0151      	lsls	r1, r2, #5
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dde:	0151      	lsls	r1, r2, #5
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	440a      	add	r2, r1
 8003de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003de8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	3301      	adds	r3, #1
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d3a3      	bcc.n	8003d46 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e0c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d016      	beq.n	8003e48 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e2a:	f043 030b 	orr.w	r3, r3, #11
 8003e2e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e40:	f043 030b 	orr.w	r3, r3, #11
 8003e44:	6453      	str	r3, [r2, #68]	; 0x44
 8003e46:	e015      	b.n	8003e74 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e5a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e5e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e6e:	f043 030b 	orr.w	r3, r3, #11
 8003e72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f007 fe31 	bl	800bafc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f007 fd60 	bl	800b974 <USB_ReadInterrupts>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebe:	d124      	bne.n	8003f0a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f007 fdf6 	bl	800bab6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f006 ff3d 	bl	800ad4e <USB_GetDevSpeed>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681c      	ldr	r4, [r3, #0]
 8003ee0:	f001 fb10 	bl	8005504 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f006 fc98 	bl	800a824 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f00d fd40 	bl	801197a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f007 fd30 	bl	800b974 <USB_ReadInterrupts>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d10a      	bne.n	8003f34 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f00d fd1d 	bl	801195e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f002 0208 	and.w	r2, r2, #8
 8003f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f007 fd1b 	bl	800b974 <USB_ReadInterrupts>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f48:	d10f      	bne.n	8003f6a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f00d fd8f 	bl	8011a78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f007 fd00 	bl	800b974 <USB_ReadInterrupts>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f00d fd62 	bl	8011a54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f007 fce5 	bl	800b974 <USB_ReadInterrupts>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d10a      	bne.n	8003fcc <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f00d fd70 	bl	8011a9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f007 fccf 	bl	800b974 <USB_ReadInterrupts>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d115      	bne.n	800400c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f00d fd60 	bl	8011ab8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
 8004008:	e000      	b.n	800400c <HAL_PCD_IRQHandler+0x742>
      return;
 800400a:	bf00      	nop
    }
  }
}
 800400c:	3734      	adds	r7, #52	; 0x34
 800400e:	46bd      	mov	sp, r7
 8004010:	bd90      	pop	{r4, r7, pc}

08004012 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_PCD_SetAddress+0x1a>
 8004028:	2302      	movs	r3, #2
 800402a:	e013      	b.n	8004054 <HAL_PCD_SetAddress+0x42>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	78fa      	ldrb	r2, [r7, #3]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f007 fc2d 	bl	800b8a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	4603      	mov	r3, r0
 800406c:	70fb      	strb	r3, [r7, #3]
 800406e:	460b      	mov	r3, r1
 8004070:	803b      	strh	r3, [r7, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800407a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800407e:	2b00      	cmp	r3, #0
 8004080:	da0f      	bge.n	80040a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	3338      	adds	r3, #56	; 0x38
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	3304      	adds	r3, #4
 8004098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	705a      	strb	r2, [r3, #1]
 80040a0:	e00f      	b.n	80040c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	f003 020f 	and.w	r2, r3, #15
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040ce:	883a      	ldrh	r2, [r7, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	78ba      	ldrb	r2, [r7, #2]
 80040d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	785b      	ldrb	r3, [r3, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040ec:	78bb      	ldrb	r3, [r7, #2]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d102      	bne.n	80040f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_PCD_EP_Open+0xaa>
 8004102:	2302      	movs	r3, #2
 8004104:	e00e      	b.n	8004124 <HAL_PCD_EP_Open+0xc8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68f9      	ldr	r1, [r7, #12]
 8004114:	4618      	mov	r0, r3
 8004116:	f006 fe39 	bl	800ad8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004122:	7afb      	ldrb	r3, [r7, #11]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800413c:	2b00      	cmp	r3, #0
 800413e:	da0f      	bge.n	8004160 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	f003 020f 	and.w	r2, r3, #15
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	3338      	adds	r3, #56	; 0x38
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	3304      	adds	r3, #4
 8004156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	705a      	strb	r2, [r3, #1]
 800415e:	e00f      	b.n	8004180 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	b2da      	uxtb	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_PCD_EP_Close+0x6e>
 8004196:	2302      	movs	r3, #2
 8004198:	e00e      	b.n	80041b8 <HAL_PCD_EP_Close+0x8c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68f9      	ldr	r1, [r7, #12]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f006 fe77 	bl	800ae9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	460b      	mov	r3, r1
 80041ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d0:	7afb      	ldrb	r3, [r7, #11]
 80041d2:	f003 020f 	and.w	r2, r3, #15
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	3304      	adds	r3, #4
 80041e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2200      	movs	r2, #0
 80041fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2200      	movs	r2, #0
 8004200:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004202:	7afb      	ldrb	r3, [r7, #11]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	b2da      	uxtb	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	2b00      	cmp	r3, #0
 8004216:	d106      	bne.n	8004226 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6979      	ldr	r1, [r7, #20]
 800421e:	4618      	mov	r0, r3
 8004220:	f007 f8f4 	bl	800b40c <USB_EP0StartXfer>
 8004224:	e005      	b.n	8004232 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6979      	ldr	r1, [r7, #20]
 800422c:	4618      	mov	r0, r3
 800422e:	f006 ff11 	bl	800b054 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	f003 020f 	and.w	r2, r3, #15
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800425e:	681b      	ldr	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	460b      	mov	r3, r1
 800427a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800427c:	7afb      	ldrb	r3, [r7, #11]
 800427e:	f003 020f 	and.w	r2, r3, #15
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	3338      	adds	r3, #56	; 0x38
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	3304      	adds	r3, #4
 8004292:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2200      	movs	r2, #0
 80042a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2201      	movs	r2, #1
 80042aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ac:	7afb      	ldrb	r3, [r7, #11]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042b8:	7afb      	ldrb	r3, [r7, #11]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6979      	ldr	r1, [r7, #20]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f007 f89f 	bl	800b40c <USB_EP0StartXfer>
 80042ce:	e005      	b.n	80042dc <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6979      	ldr	r1, [r7, #20]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f006 febc 	bl	800b054 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	f003 020f 	and.w	r2, r3, #15
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d901      	bls.n	8004304 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e04e      	b.n	80043a2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004308:	2b00      	cmp	r3, #0
 800430a:	da0f      	bge.n	800432c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	f003 020f 	and.w	r2, r3, #15
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	3338      	adds	r3, #56	; 0x38
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	4413      	add	r3, r2
 8004320:	3304      	adds	r3, #4
 8004322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	705a      	strb	r2, [r3, #1]
 800432a:	e00d      	b.n	8004348 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	3304      	adds	r3, #4
 8004340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_PCD_EP_SetStall+0x82>
 8004364:	2302      	movs	r3, #2
 8004366:	e01c      	b.n	80043a2 <HAL_PCD_EP_SetStall+0xbc>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68f9      	ldr	r1, [r7, #12]
 8004376:	4618      	mov	r0, r3
 8004378:	f007 f9c0 	bl	800b6fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	2b00      	cmp	r3, #0
 8004384:	d108      	bne.n	8004398 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f007 fbb2 	bl	800bafc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	f003 020f 	and.w	r2, r3, #15
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d901      	bls.n	80043c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e042      	b.n	800444e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	da0f      	bge.n	80043f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 020f 	and.w	r2, r3, #15
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	3338      	adds	r3, #56	; 0x38
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	4413      	add	r3, r2
 80043e4:	3304      	adds	r3, #4
 80043e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	705a      	strb	r2, [r3, #1]
 80043ee:	e00f      	b.n	8004410 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	f003 020f 	and.w	r2, r3, #15
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	3304      	adds	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	b2da      	uxtb	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_PCD_EP_ClrStall+0x86>
 800442c:	2302      	movs	r3, #2
 800442e:	e00e      	b.n	800444e <HAL_PCD_EP_ClrStall+0xa4>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68f9      	ldr	r1, [r7, #12]
 800443e:	4618      	mov	r0, r3
 8004440:	f007 f9ca 	bl	800b7d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b088      	sub	sp, #32
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	3338      	adds	r3, #56	; 0x38
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	3304      	adds	r3, #4
 800447c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	429a      	cmp	r2, r3
 8004488:	d901      	bls.n	800448e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e067      	b.n	800455e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d902      	bls.n	80044aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3303      	adds	r3, #3
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044b2:	e026      	b.n	8004502 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d902      	bls.n	80044d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3303      	adds	r3, #3
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68d9      	ldr	r1, [r3, #12]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	6978      	ldr	r0, [r7, #20]
 80044e6:	f007 f8af 	bl	800b648 <USB_WritePacket>

    ep->xfer_buff  += len;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	441a      	add	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	441a      	add	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	b29b      	uxth	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	429a      	cmp	r2, r3
 8004516:	d809      	bhi.n	800452c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004520:	429a      	cmp	r2, r3
 8004522:	d203      	bcs.n	800452c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1c3      	bne.n	80044b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	695a      	ldr	r2, [r3, #20]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	429a      	cmp	r2, r3
 8004536:	d811      	bhi.n	800455c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	2201      	movs	r2, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	43db      	mvns	r3, r3
 8004552:	6939      	ldr	r1, [r7, #16]
 8004554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004558:	4013      	ands	r3, r2
 800455a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	333c      	adds	r3, #60	; 0x3c
 8004580:	3304      	adds	r3, #4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a19      	ldr	r2, [pc, #100]	; (8004600 <PCD_EP_OutXfrComplete_int+0x98>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d124      	bne.n	80045e8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b4:	461a      	mov	r2, r3
 80045b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ba:	6093      	str	r3, [r2, #8]
 80045bc:	e01a      	b.n	80045f4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	461a      	mov	r2, r3
 80045d6:	2320      	movs	r3, #32
 80045d8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f00d f987 	bl	80118f4 <HAL_PCD_DataOutStageCallback>
 80045e6:	e005      	b.n	80045f4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	4619      	mov	r1, r3
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f00d f980 	bl	80118f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	4f54310a 	.word	0x4f54310a

08004604 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	333c      	adds	r3, #60	; 0x3c
 800461c:	3304      	adds	r3, #4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a0c      	ldr	r2, [pc, #48]	; (8004668 <PCD_EP_OutSetupPacket_int+0x64>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d90e      	bls.n	8004658 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	461a      	mov	r2, r3
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f00d f939 	bl	80118d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	4f54300a 	.word	0x4f54300a

0800466c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	70fb      	strb	r3, [r7, #3]
 8004678:	4613      	mov	r3, r2
 800467a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d107      	bne.n	800469a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800468a:	883b      	ldrh	r3, [r7, #0]
 800468c:	0419      	lsls	r1, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	430a      	orrs	r2, r1
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
 8004698:	e028      	b.n	80046ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	4413      	add	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]
 80046ac:	e00d      	b.n	80046ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	3340      	adds	r3, #64	; 0x40
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	3301      	adds	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
 80046ca:	7bfa      	ldrb	r2, [r7, #15]
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d3ec      	bcc.n	80046ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046d4:	883b      	ldrh	r3, [r7, #0]
 80046d6:	0418      	lsls	r0, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	3b01      	subs	r3, #1
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	4302      	orrs	r2, r0
 80046e4:	3340      	adds	r3, #64	; 0x40
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	887a      	ldrh	r2, [r7, #2]
 800470c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	f043 0303 	orr.w	r3, r3, #3
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800476e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004772:	6013      	str	r3, [r2, #0]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40007000 	.word	0x40007000

08004784 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004794:	d102      	bne.n	800479c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479a:	e00b      	b.n	80047b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800479e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047aa:	d102      	bne.n	80047b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80047ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047b0:	e000      	b.n	80047b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80047b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40007000 	.word	0x40007000

080047c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d141      	bne.n	8004856 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d2:	4b4b      	ldr	r3, [pc, #300]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d131      	bne.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047e0:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e6:	4a46      	ldr	r2, [pc, #280]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f0:	4b43      	ldr	r3, [pc, #268]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047f8:	4a41      	ldr	r2, [pc, #260]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004800:	4b40      	ldr	r3, [pc, #256]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2232      	movs	r2, #50	; 0x32
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	4a3f      	ldr	r2, [pc, #252]	; (8004908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	0c9b      	lsrs	r3, r3, #18
 8004812:	3301      	adds	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004816:	e002      	b.n	800481e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482a:	d102      	bne.n	8004832 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f2      	bne.n	8004818 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004832:	4b33      	ldr	r3, [pc, #204]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483e:	d158      	bne.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e057      	b.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004844:	4b2e      	ldr	r3, [pc, #184]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800484a:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004854:	e04d      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d141      	bne.n	80048e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800485e:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d131      	bne.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004872:	4a23      	ldr	r2, [pc, #140]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800487c:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004884:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800488a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2232      	movs	r2, #50	; 0x32
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	0c9b      	lsrs	r3, r3, #18
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a2:	e002      	b.n	80048aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b6:	d102      	bne.n	80048be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f2      	bne.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048be:	4b10      	ldr	r3, [pc, #64]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ca:	d112      	bne.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e011      	b.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048e0:	e007      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40007000 	.word	0x40007000
 8004904:	20000000 	.word	0x20000000
 8004908:	431bde83 	.word	0x431bde83

0800490c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	4a04      	ldr	r2, [pc, #16]	; (8004928 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800491a:	6053      	str	r3, [r2, #4]
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40007000 	.word	0x40007000

0800492c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4a04      	ldr	r2, [pc, #16]	; (8004948 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800493a:	6053      	str	r3, [r2, #4]
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40007000 	.word	0x40007000

0800494c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f000 bc16 	b.w	800518c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004960:	4ba0      	ldr	r3, [pc, #640]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800496a:	4b9e      	ldr	r3, [pc, #632]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80e4 	beq.w	8004b4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <HAL_RCC_OscConfig+0x4c>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b0c      	cmp	r3, #12
 800498c:	f040 808b 	bne.w	8004aa6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b01      	cmp	r3, #1
 8004994:	f040 8087 	bne.w	8004aa6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004998:	4b92      	ldr	r3, [pc, #584]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_OscConfig+0x64>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e3ed      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	4b8b      	ldr	r3, [pc, #556]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <HAL_RCC_OscConfig+0x7e>
 80049c0:	4b88      	ldr	r3, [pc, #544]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c8:	e005      	b.n	80049d6 <HAL_RCC_OscConfig+0x8a>
 80049ca:	4b86      	ldr	r3, [pc, #536]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 80049cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d223      	bcs.n	8004a22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fdfa 	bl	80055d8 <RCC_SetFlashLatencyFromMSIRange>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e3ce      	b.n	800518c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ee:	4b7d      	ldr	r3, [pc, #500]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a7c      	ldr	r2, [pc, #496]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 80049f4:	f043 0308 	orr.w	r3, r3, #8
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b7a      	ldr	r3, [pc, #488]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4977      	ldr	r1, [pc, #476]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a0c:	4b75      	ldr	r3, [pc, #468]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	4972      	ldr	r1, [pc, #456]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]
 8004a20:	e025      	b.n	8004a6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a22:	4b70      	ldr	r3, [pc, #448]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a6f      	ldr	r2, [pc, #444]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a28:	f043 0308 	orr.w	r3, r3, #8
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	4b6d      	ldr	r3, [pc, #436]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	496a      	ldr	r1, [pc, #424]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a40:	4b68      	ldr	r3, [pc, #416]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	4965      	ldr	r1, [pc, #404]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fdba 	bl	80055d8 <RCC_SetFlashLatencyFromMSIRange>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e38e      	b.n	800518c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a6e:	f000 fcbf 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8004a72:	4602      	mov	r2, r0
 8004a74:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	495a      	ldr	r1, [pc, #360]	; (8004be8 <HAL_RCC_OscConfig+0x29c>)
 8004a80:	5ccb      	ldrb	r3, [r1, r3]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8a:	4a58      	ldr	r2, [pc, #352]	; (8004bec <HAL_RCC_OscConfig+0x2a0>)
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a8e:	4b58      	ldr	r3, [pc, #352]	; (8004bf0 <HAL_RCC_OscConfig+0x2a4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc fdb4 	bl	8001600 <HAL_InitTick>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d052      	beq.n	8004b48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	e372      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d032      	beq.n	8004b14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004aae:	4b4d      	ldr	r3, [pc, #308]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a4c      	ldr	r2, [pc, #304]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004aba:	f7fc fed1 	bl	8001860 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ac2:	f7fc fecd 	bl	8001860 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e35b      	b.n	800518c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ad4:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f0      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae0:	4b40      	ldr	r3, [pc, #256]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a3f      	ldr	r2, [pc, #252]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004ae6:	f043 0308 	orr.w	r3, r3, #8
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b3d      	ldr	r3, [pc, #244]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	493a      	ldr	r1, [pc, #232]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004afe:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	4935      	ldr	r1, [pc, #212]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	604b      	str	r3, [r1, #4]
 8004b12:	e01a      	b.n	8004b4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b14:	4b33      	ldr	r3, [pc, #204]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a32      	ldr	r2, [pc, #200]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b20:	f7fc fe9e 	bl	8001860 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b28:	f7fc fe9a 	bl	8001860 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e328      	b.n	800518c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b3a:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x1dc>
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d073      	beq.n	8004c3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_OscConfig+0x21c>
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d10e      	bne.n	8004b80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d10b      	bne.n	8004b80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b68:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d063      	beq.n	8004c3c <HAL_RCC_OscConfig+0x2f0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d15f      	bne.n	8004c3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e305      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d106      	bne.n	8004b98 <HAL_RCC_OscConfig+0x24c>
 8004b8a:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e01d      	b.n	8004bd4 <HAL_RCC_OscConfig+0x288>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x270>
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a0c      	ldr	r2, [pc, #48]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0x288>
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a05      	ldr	r2, [pc, #20]	; (8004be4 <HAL_RCC_OscConfig+0x298>)
 8004bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fc fe40 	bl	8001860 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004be2:	e010      	b.n	8004c06 <HAL_RCC_OscConfig+0x2ba>
 8004be4:	40021000 	.word	0x40021000
 8004be8:	080121f8 	.word	0x080121f8
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7fc fe34 	bl	8001860 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e2c2      	b.n	800518c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c06:	4baf      	ldr	r3, [pc, #700]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x2a8>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fc fe24 	bl	8001860 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7fc fe20 	bl	8001860 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	; 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e2ae      	b.n	800518c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c2e:	4ba5      	ldr	r3, [pc, #660]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x2d0>
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d060      	beq.n	8004d0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_OscConfig+0x310>
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d119      	bne.n	8004c8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d116      	bne.n	8004c8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c5c:	4b99      	ldr	r3, [pc, #612]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_OscConfig+0x328>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e28b      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c74:	4b93      	ldr	r3, [pc, #588]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	4990      	ldr	r1, [pc, #576]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c88:	e040      	b.n	8004d0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d023      	beq.n	8004cda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c92:	4b8c      	ldr	r3, [pc, #560]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a8b      	ldr	r2, [pc, #556]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9e:	f7fc fddf 	bl	8001860 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca6:	f7fc fddb 	bl	8001860 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e269      	b.n	800518c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb8:	4b82      	ldr	r3, [pc, #520]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	4b7f      	ldr	r3, [pc, #508]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	061b      	lsls	r3, r3, #24
 8004cd2:	497c      	ldr	r1, [pc, #496]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
 8004cd8:	e018      	b.n	8004d0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cda:	4b7a      	ldr	r3, [pc, #488]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a79      	ldr	r2, [pc, #484]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fc fdbb 	bl	8001860 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cee:	f7fc fdb7 	bl	8001860 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e245      	b.n	800518c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d00:	4b70      	ldr	r3, [pc, #448]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d03c      	beq.n	8004d92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01c      	beq.n	8004d5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d20:	4b68      	ldr	r3, [pc, #416]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d26:	4a67      	ldr	r2, [pc, #412]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fc fd96 	bl	8001860 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d38:	f7fc fd92 	bl	8001860 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e220      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d4a:	4b5e      	ldr	r3, [pc, #376]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0ef      	beq.n	8004d38 <HAL_RCC_OscConfig+0x3ec>
 8004d58:	e01b      	b.n	8004d92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5a:	4b5a      	ldr	r3, [pc, #360]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d60:	4a58      	ldr	r2, [pc, #352]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6a:	f7fc fd79 	bl	8001860 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d72:	f7fc fd75 	bl	8001860 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e203      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d84:	4b4f      	ldr	r3, [pc, #316]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1ef      	bne.n	8004d72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80a6 	beq.w	8004eec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da0:	2300      	movs	r3, #0
 8004da2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004da4:	4b47      	ldr	r3, [pc, #284]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10d      	bne.n	8004dcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db0:	4b44      	ldr	r3, [pc, #272]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db4:	4a43      	ldr	r2, [pc, #268]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dba:	6593      	str	r3, [r2, #88]	; 0x58
 8004dbc:	4b41      	ldr	r3, [pc, #260]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dcc:	4b3e      	ldr	r3, [pc, #248]	; (8004ec8 <HAL_RCC_OscConfig+0x57c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d118      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd8:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <HAL_RCC_OscConfig+0x57c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a3a      	ldr	r2, [pc, #232]	; (8004ec8 <HAL_RCC_OscConfig+0x57c>)
 8004dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de4:	f7fc fd3c 	bl	8001860 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dec:	f7fc fd38 	bl	8001860 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e1c6      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dfe:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <HAL_RCC_OscConfig+0x57c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d108      	bne.n	8004e24 <HAL_RCC_OscConfig+0x4d8>
 8004e12:	4b2c      	ldr	r3, [pc, #176]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e22:	e024      	b.n	8004e6e <HAL_RCC_OscConfig+0x522>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b05      	cmp	r3, #5
 8004e2a:	d110      	bne.n	8004e4e <HAL_RCC_OscConfig+0x502>
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	4a24      	ldr	r2, [pc, #144]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e34:	f043 0304 	orr.w	r3, r3, #4
 8004e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e3c:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e4c:	e00f      	b.n	8004e6e <HAL_RCC_OscConfig+0x522>
 8004e4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e54:	4a1b      	ldr	r2, [pc, #108]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e5e:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e66:	f023 0304 	bic.w	r3, r3, #4
 8004e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d016      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fc fcf3 	bl	8001860 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f7fc fcef 	bl	8001860 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e17b      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0ed      	beq.n	8004e7e <HAL_RCC_OscConfig+0x532>
 8004ea2:	e01a      	b.n	8004eda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea4:	f7fc fcdc 	bl	8001860 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eaa:	e00f      	b.n	8004ecc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eac:	f7fc fcd8 	bl	8001860 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d906      	bls.n	8004ecc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e164      	b.n	800518c <HAL_RCC_OscConfig+0x840>
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ecc:	4ba8      	ldr	r3, [pc, #672]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e8      	bne.n	8004eac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eda:	7ffb      	ldrb	r3, [r7, #31]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d105      	bne.n	8004eec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee0:	4ba3      	ldr	r3, [pc, #652]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	4aa2      	ldr	r2, [pc, #648]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d03c      	beq.n	8004f72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01c      	beq.n	8004f3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f00:	4b9b      	ldr	r3, [pc, #620]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f06:	4a9a      	ldr	r2, [pc, #616]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f10:	f7fc fca6 	bl	8001860 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f18:	f7fc fca2 	bl	8001860 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e130      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f2a:	4b91      	ldr	r3, [pc, #580]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ef      	beq.n	8004f18 <HAL_RCC_OscConfig+0x5cc>
 8004f38:	e01b      	b.n	8004f72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f3a:	4b8d      	ldr	r3, [pc, #564]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f40:	4a8b      	ldr	r2, [pc, #556]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4a:	f7fc fc89 	bl	8001860 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f52:	f7fc fc85 	bl	8001860 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e113      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f64:	4b82      	ldr	r3, [pc, #520]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1ef      	bne.n	8004f52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8107 	beq.w	800518a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	f040 80cb 	bne.w	800511c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f86:	4b7a      	ldr	r3, [pc, #488]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f003 0203 	and.w	r2, r3, #3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d12c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d123      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d11b      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d113      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d109      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	3b01      	subs	r3, #1
 8004fee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d06d      	beq.n	80050d0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b0c      	cmp	r3, #12
 8004ff8:	d068      	beq.n	80050cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ffa:	4b5d      	ldr	r3, [pc, #372]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d105      	bne.n	8005012 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005006:	4b5a      	ldr	r3, [pc, #360]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e0ba      	b.n	800518c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005016:	4b56      	ldr	r3, [pc, #344]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a55      	ldr	r2, [pc, #340]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 800501c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005020:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005022:	f7fc fc1d 	bl	8001860 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502a:	f7fc fc19 	bl	8001860 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e0a7      	b.n	800518c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800503c:	4b4c      	ldr	r3, [pc, #304]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005048:	4b49      	ldr	r3, [pc, #292]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	4b49      	ldr	r3, [pc, #292]	; (8005174 <HAL_RCC_OscConfig+0x828>)
 800504e:	4013      	ands	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005058:	3a01      	subs	r2, #1
 800505a:	0112      	lsls	r2, r2, #4
 800505c:	4311      	orrs	r1, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005062:	0212      	lsls	r2, r2, #8
 8005064:	4311      	orrs	r1, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800506a:	0852      	lsrs	r2, r2, #1
 800506c:	3a01      	subs	r2, #1
 800506e:	0552      	lsls	r2, r2, #21
 8005070:	4311      	orrs	r1, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005076:	0852      	lsrs	r2, r2, #1
 8005078:	3a01      	subs	r2, #1
 800507a:	0652      	lsls	r2, r2, #25
 800507c:	4311      	orrs	r1, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005082:	06d2      	lsls	r2, r2, #27
 8005084:	430a      	orrs	r2, r1
 8005086:	493a      	ldr	r1, [pc, #232]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8005088:	4313      	orrs	r3, r2
 800508a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800508c:	4b38      	ldr	r3, [pc, #224]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a37      	ldr	r2, [pc, #220]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8005092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005096:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005098:	4b35      	ldr	r3, [pc, #212]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a34      	ldr	r2, [pc, #208]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050a4:	f7fc fbdc 	bl	8001860 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fc fbd8 	bl	8001860 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e066      	b.n	800518c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050be:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050ca:	e05e      	b.n	800518a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e05d      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d0:	4b27      	ldr	r3, [pc, #156]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d156      	bne.n	800518a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050dc:	4b24      	ldr	r3, [pc, #144]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a23      	ldr	r2, [pc, #140]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 80050e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050e8:	4b21      	ldr	r3, [pc, #132]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4a20      	ldr	r2, [pc, #128]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 80050ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050f4:	f7fc fbb4 	bl	8001860 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fc fbb0 	bl	8001860 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e03e      	b.n	800518c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800510e:	4b18      	ldr	r3, [pc, #96]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0x7b0>
 800511a:	e036      	b.n	800518a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d031      	beq.n	8005186 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a12      	ldr	r2, [pc, #72]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8005128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800512c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d105      	bne.n	8005146 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800513a:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	4a0c      	ldr	r2, [pc, #48]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8005140:	f023 0303 	bic.w	r3, r3, #3
 8005144:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005146:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	4a09      	ldr	r2, [pc, #36]	; (8005170 <HAL_RCC_OscConfig+0x824>)
 800514c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005154:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005156:	f7fc fb83 	bl	8001860 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800515c:	e00c      	b.n	8005178 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515e:	f7fc fb7f 	bl	8001860 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d905      	bls.n	8005178 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e00d      	b.n	800518c <HAL_RCC_OscConfig+0x840>
 8005170:	40021000 	.word	0x40021000
 8005174:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_RCC_OscConfig+0x848>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ec      	bne.n	800515e <HAL_RCC_OscConfig+0x812>
 8005184:	e001      	b.n	800518a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40021000 	.word	0x40021000

08005198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e10f      	b.n	80053d0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b89      	ldr	r3, [pc, #548]	; (80053d8 <HAL_RCC_ClockConfig+0x240>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d910      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b86      	ldr	r3, [pc, #536]	; (80053d8 <HAL_RCC_ClockConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 020f 	bic.w	r2, r3, #15
 80051c6:	4984      	ldr	r1, [pc, #528]	; (80053d8 <HAL_RCC_ClockConfig+0x240>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b82      	ldr	r3, [pc, #520]	; (80053d8 <HAL_RCC_ClockConfig+0x240>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0f7      	b.n	80053d0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8089 	beq.w	8005300 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d133      	bne.n	800525e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f6:	4b79      	ldr	r3, [pc, #484]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0e4      	b.n	80053d0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005206:	f000 fa41 	bl	800568c <RCC_GetSysClockFreqFromPLLSource>
 800520a:	4603      	mov	r3, r0
 800520c:	4a74      	ldr	r2, [pc, #464]	; (80053e0 <HAL_RCC_ClockConfig+0x248>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d955      	bls.n	80052be <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005212:	4b72      	ldr	r3, [pc, #456]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800521e:	4b6f      	ldr	r3, [pc, #444]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005226:	4a6d      	ldr	r2, [pc, #436]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 8005228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e044      	b.n	80052be <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d03e      	beq.n	80052be <HAL_RCC_ClockConfig+0x126>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d13a      	bne.n	80052be <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005248:	4b64      	ldr	r3, [pc, #400]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005250:	4a62      	ldr	r2, [pc, #392]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 8005252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005256:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e02f      	b.n	80052be <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005266:	4b5d      	ldr	r3, [pc, #372]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d115      	bne.n	800529e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e0ac      	b.n	80053d0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800527e:	4b57      	ldr	r3, [pc, #348]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e0a0      	b.n	80053d0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800528e:	4b53      	ldr	r3, [pc, #332]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e098      	b.n	80053d0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800529e:	f000 f8a7 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4a4e      	ldr	r2, [pc, #312]	; (80053e0 <HAL_RCC_ClockConfig+0x248>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d909      	bls.n	80052be <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052aa:	4b4c      	ldr	r3, [pc, #304]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b2:	4a4a      	ldr	r2, [pc, #296]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 80052b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052be:	4b47      	ldr	r3, [pc, #284]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f023 0203 	bic.w	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	4944      	ldr	r1, [pc, #272]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d0:	f7fc fac6 	bl	8001860 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d8:	f7fc fac2 	bl	8001860 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e070      	b.n	80053d0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ee:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 020c 	and.w	r2, r3, #12
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d1eb      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800530c:	4b33      	ldr	r3, [pc, #204]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4930      	ldr	r1, [pc, #192]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
 800531e:	e008      	b.n	8005332 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d105      	bne.n	8005332 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005326:	4b2d      	ldr	r3, [pc, #180]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4a2c      	ldr	r2, [pc, #176]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 800532c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005330:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005332:	4b29      	ldr	r3, [pc, #164]	; (80053d8 <HAL_RCC_ClockConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d210      	bcs.n	8005362 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005340:	4b25      	ldr	r3, [pc, #148]	; (80053d8 <HAL_RCC_ClockConfig+0x240>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f023 020f 	bic.w	r2, r3, #15
 8005348:	4923      	ldr	r1, [pc, #140]	; (80053d8 <HAL_RCC_ClockConfig+0x240>)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	4313      	orrs	r3, r2
 800534e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005350:	4b21      	ldr	r3, [pc, #132]	; (80053d8 <HAL_RCC_ClockConfig+0x240>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d001      	beq.n	8005362 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e036      	b.n	80053d0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	4918      	ldr	r1, [pc, #96]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 800537c:	4313      	orrs	r3, r2
 800537e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d009      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800538c:	4b13      	ldr	r3, [pc, #76]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	4910      	ldr	r1, [pc, #64]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053a0:	f000 f826 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80053a4:	4602      	mov	r2, r0
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <HAL_RCC_ClockConfig+0x244>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	091b      	lsrs	r3, r3, #4
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	490c      	ldr	r1, [pc, #48]	; (80053e4 <HAL_RCC_ClockConfig+0x24c>)
 80053b2:	5ccb      	ldrb	r3, [r1, r3]
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <HAL_RCC_ClockConfig+0x250>)
 80053be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <HAL_RCC_ClockConfig+0x254>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fc f91b 	bl	8001600 <HAL_InitTick>
 80053ca:	4603      	mov	r3, r0
 80053cc:	73fb      	strb	r3, [r7, #15]

  return status;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40022000 	.word	0x40022000
 80053dc:	40021000 	.word	0x40021000
 80053e0:	04c4b400 	.word	0x04c4b400
 80053e4:	080121f8 	.word	0x080121f8
 80053e8:	20000000 	.word	0x20000000
 80053ec:	20000004 	.word	0x20000004

080053f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	; 0x24
 80053f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053fe:	4b3e      	ldr	r3, [pc, #248]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005408:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x34>
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b0c      	cmp	r3, #12
 800541c:	d121      	bne.n	8005462 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d11e      	bne.n	8005462 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005424:	4b34      	ldr	r3, [pc, #208]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d107      	bne.n	8005440 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005430:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	e005      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005440:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800544c:	4a2b      	ldr	r2, [pc, #172]	; (80054fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10d      	bne.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005460:	e00a      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b04      	cmp	r3, #4
 8005466:	d102      	bne.n	800546e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005468:	4b25      	ldr	r3, [pc, #148]	; (8005500 <HAL_RCC_GetSysClockFreq+0x110>)
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e004      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d101      	bne.n	8005478 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005474:	4b22      	ldr	r3, [pc, #136]	; (8005500 <HAL_RCC_GetSysClockFreq+0x110>)
 8005476:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d134      	bne.n	80054e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800547e:	4b1e      	ldr	r3, [pc, #120]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d003      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0xa6>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d003      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0xac>
 8005494:	e005      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005496:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <HAL_RCC_GetSysClockFreq+0x110>)
 8005498:	617b      	str	r3, [r7, #20]
      break;
 800549a:	e005      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800549c:	4b18      	ldr	r3, [pc, #96]	; (8005500 <HAL_RCC_GetSysClockFreq+0x110>)
 800549e:	617b      	str	r3, [r7, #20]
      break;
 80054a0:	e002      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	617b      	str	r3, [r7, #20]
      break;
 80054a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054a8:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	3301      	adds	r3, #1
 80054b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054b6:	4b10      	ldr	r3, [pc, #64]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	fb02 f203 	mul.w	r2, r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	0e5b      	lsrs	r3, r3, #25
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	3301      	adds	r3, #1
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054e8:	69bb      	ldr	r3, [r7, #24]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000
 80054fc:	08012210 	.word	0x08012210
 8005500:	00f42400 	.word	0x00f42400

08005504 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005508:	4b03      	ldr	r3, [pc, #12]	; (8005518 <HAL_RCC_GetHCLKFreq+0x14>)
 800550a:	681b      	ldr	r3, [r3, #0]
}
 800550c:	4618      	mov	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	20000000 	.word	0x20000000

0800551c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005520:	f7ff fff0 	bl	8005504 <HAL_RCC_GetHCLKFreq>
 8005524:	4602      	mov	r2, r0
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	4904      	ldr	r1, [pc, #16]	; (8005544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005532:	5ccb      	ldrb	r3, [r1, r3]
 8005534:	f003 031f 	and.w	r3, r3, #31
 8005538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40021000 	.word	0x40021000
 8005544:	08012208 	.word	0x08012208

08005548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800554c:	f7ff ffda 	bl	8005504 <HAL_RCC_GetHCLKFreq>
 8005550:	4602      	mov	r2, r0
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	0adb      	lsrs	r3, r3, #11
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	4904      	ldr	r1, [pc, #16]	; (8005570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800555e:	5ccb      	ldrb	r3, [r1, r3]
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021000 	.word	0x40021000
 8005570:	08012208 	.word	0x08012208

08005574 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	220f      	movs	r2, #15
 8005582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005584:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0203 	and.w	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005590:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800559c:	4b0c      	ldr	r3, [pc, #48]	; (80055d0 <HAL_RCC_GetClockConfig+0x5c>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80055a8:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <HAL_RCC_GetClockConfig+0x5c>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	08db      	lsrs	r3, r3, #3
 80055ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80055b6:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <HAL_RCC_GetClockConfig+0x60>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 020f 	and.w	r2, r3, #15
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	601a      	str	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40021000 	.word	0x40021000
 80055d4:	40022000 	.word	0x40022000

080055d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055f0:	f7ff f8c8 	bl	8004784 <HAL_PWREx_GetVoltageRange>
 80055f4:	6178      	str	r0, [r7, #20]
 80055f6:	e014      	b.n	8005622 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055f8:	4b22      	ldr	r3, [pc, #136]	; (8005684 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fc:	4a21      	ldr	r2, [pc, #132]	; (8005684 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005602:	6593      	str	r3, [r2, #88]	; 0x58
 8005604:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005610:	f7ff f8b8 	bl	8004784 <HAL_PWREx_GetVoltageRange>
 8005614:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005616:	4b1b      	ldr	r3, [pc, #108]	; (8005684 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561a:	4a1a      	ldr	r2, [pc, #104]	; (8005684 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800561c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005620:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005628:	d10b      	bne.n	8005642 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b80      	cmp	r3, #128	; 0x80
 800562e:	d913      	bls.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2ba0      	cmp	r3, #160	; 0xa0
 8005634:	d902      	bls.n	800563c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005636:	2302      	movs	r3, #2
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	e00d      	b.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800563c:	2301      	movs	r3, #1
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e00a      	b.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b7f      	cmp	r3, #127	; 0x7f
 8005646:	d902      	bls.n	800564e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005648:	2302      	movs	r3, #2
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	e004      	b.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b70      	cmp	r3, #112	; 0x70
 8005652:	d101      	bne.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005654:	2301      	movs	r3, #1
 8005656:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f023 020f 	bic.w	r2, r3, #15
 8005660:	4909      	ldr	r1, [pc, #36]	; (8005688 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005668:	4b07      	ldr	r3, [pc, #28]	; (8005688 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	429a      	cmp	r2, r3
 8005674:	d001      	beq.n	800567a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40021000 	.word	0x40021000
 8005688:	40022000 	.word	0x40022000

0800568c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005696:	4b2d      	ldr	r3, [pc, #180]	; (800574c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d118      	bne.n	80056d4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056a2:	4b2a      	ldr	r3, [pc, #168]	; (800574c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d107      	bne.n	80056be <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056ae:	4b27      	ldr	r3, [pc, #156]	; (800574c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80056b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b4:	0a1b      	lsrs	r3, r3, #8
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e005      	b.n	80056ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80056be:	4b23      	ldr	r3, [pc, #140]	; (800574c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80056ca:	4a21      	ldr	r2, [pc, #132]	; (8005750 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d003      	beq.n	80056ec <RCC_GetSysClockFreqFromPLLSource+0x60>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d003      	beq.n	80056f2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80056ea:	e005      	b.n	80056f8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80056ec:	4b19      	ldr	r3, [pc, #100]	; (8005754 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80056ee:	613b      	str	r3, [r7, #16]
    break;
 80056f0:	e005      	b.n	80056fe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80056f2:	4b18      	ldr	r3, [pc, #96]	; (8005754 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80056f4:	613b      	str	r3, [r7, #16]
    break;
 80056f6:	e002      	b.n	80056fe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	613b      	str	r3, [r7, #16]
    break;
 80056fc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	3301      	adds	r3, #1
 800570a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800570c:	4b0f      	ldr	r3, [pc, #60]	; (800574c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	0a1b      	lsrs	r3, r3, #8
 8005712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	fb02 f203 	mul.w	r2, r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005722:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005724:	4b09      	ldr	r3, [pc, #36]	; (800574c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	0e5b      	lsrs	r3, r3, #25
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	3301      	adds	r3, #1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	fbb2 f3f3 	udiv	r3, r2, r3
 800573c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800573e:	683b      	ldr	r3, [r7, #0]
}
 8005740:	4618      	mov	r0, r3
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40021000 	.word	0x40021000
 8005750:	08012210 	.word	0x08012210
 8005754:	00f42400 	.word	0x00f42400

08005758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005760:	2300      	movs	r3, #0
 8005762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005764:	2300      	movs	r3, #0
 8005766:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005770:	2b00      	cmp	r3, #0
 8005772:	d040      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005778:	2b80      	cmp	r3, #128	; 0x80
 800577a:	d02a      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d825      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005780:	2b60      	cmp	r3, #96	; 0x60
 8005782:	d026      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005784:	2b60      	cmp	r3, #96	; 0x60
 8005786:	d821      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005788:	2b40      	cmp	r3, #64	; 0x40
 800578a:	d006      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d81d      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d009      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005794:	2b20      	cmp	r3, #32
 8005796:	d010      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005798:	e018      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800579a:	4b89      	ldr	r3, [pc, #548]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	4a88      	ldr	r2, [pc, #544]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057a6:	e015      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	2100      	movs	r1, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fa7e 	bl	8006cb0 <RCCEx_PLLSAI1_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057b8:	e00c      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3320      	adds	r3, #32
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 fb69 	bl	8006e98 <RCCEx_PLLSAI2_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057ca:	e003      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	74fb      	strb	r3, [r7, #19]
      break;
 80057d0:	e000      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80057d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d4:	7cfb      	ldrb	r3, [r7, #19]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10b      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057da:	4b79      	ldr	r3, [pc, #484]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057e0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e8:	4975      	ldr	r1, [pc, #468]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80057f0:	e001      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f2:	7cfb      	ldrb	r3, [r7, #19]
 80057f4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d047      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580a:	d030      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800580c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005810:	d82a      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005816:	d02a      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800581c:	d824      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800581e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005822:	d008      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005828:	d81e      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800582e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005832:	d010      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005834:	e018      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005836:	4b62      	ldr	r3, [pc, #392]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	4a61      	ldr	r2, [pc, #388]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800583c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005840:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005842:	e015      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3304      	adds	r3, #4
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f001 fa30 	bl	8006cb0 <RCCEx_PLLSAI1_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005854:	e00c      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3320      	adds	r3, #32
 800585a:	2100      	movs	r1, #0
 800585c:	4618      	mov	r0, r3
 800585e:	f001 fb1b 	bl	8006e98 <RCCEx_PLLSAI2_Config>
 8005862:	4603      	mov	r3, r0
 8005864:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005866:	e003      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	74fb      	strb	r3, [r7, #19]
      break;
 800586c:	e000      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800586e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005876:	4b52      	ldr	r3, [pc, #328]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005878:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800587c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005884:	494e      	ldr	r1, [pc, #312]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800588c:	e001      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588e:	7cfb      	ldrb	r3, [r7, #19]
 8005890:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 809f 	beq.w	80059de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a0:	2300      	movs	r3, #0
 80058a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058a4:	4b46      	ldr	r3, [pc, #280]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80058b4:	2300      	movs	r3, #0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ba:	4b41      	ldr	r3, [pc, #260]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058be:	4a40      	ldr	r2, [pc, #256]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6593      	str	r3, [r2, #88]	; 0x58
 80058c6:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d2:	2301      	movs	r3, #1
 80058d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d6:	4b3b      	ldr	r3, [pc, #236]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3a      	ldr	r2, [pc, #232]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058e2:	f7fb ffbd 	bl	8001860 <HAL_GetTick>
 80058e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058e8:	e009      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ea:	f7fb ffb9 	bl	8001860 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d902      	bls.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	74fb      	strb	r3, [r7, #19]
        break;
 80058fc:	e005      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058fe:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ef      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800590a:	7cfb      	ldrb	r3, [r7, #19]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d15b      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005910:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01f      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	429a      	cmp	r2, r3
 800592c:	d019      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800592e:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005938:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800593a:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005940:	4a1f      	ldr	r2, [pc, #124]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800595a:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d016      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596c:	f7fb ff78 	bl	8001860 <HAL_GetTick>
 8005970:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005972:	e00b      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005974:	f7fb ff74 	bl	8001860 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005982:	4293      	cmp	r3, r2
 8005984:	d902      	bls.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	74fb      	strb	r3, [r7, #19]
            break;
 800598a:	e006      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800598c:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0ec      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800599a:	7cfb      	ldrb	r3, [r7, #19]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10c      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a0:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b0:	4903      	ldr	r1, [pc, #12]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059b8:	e008      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059ba:	7cfb      	ldrb	r3, [r7, #19]
 80059bc:	74bb      	strb	r3, [r7, #18]
 80059be:	e005      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c8:	7cfb      	ldrb	r3, [r7, #19]
 80059ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059cc:	7c7b      	ldrb	r3, [r7, #17]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d2:	4ba0      	ldr	r3, [pc, #640]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d6:	4a9f      	ldr	r2, [pc, #636]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059ea:	4b9a      	ldr	r3, [pc, #616]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f0:	f023 0203 	bic.w	r2, r3, #3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f8:	4996      	ldr	r1, [pc, #600]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a0c:	4b91      	ldr	r3, [pc, #580]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	f023 020c 	bic.w	r2, r3, #12
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	498e      	ldr	r1, [pc, #568]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a2e:	4b89      	ldr	r3, [pc, #548]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3c:	4985      	ldr	r1, [pc, #532]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a50:	4b80      	ldr	r3, [pc, #512]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5e:	497d      	ldr	r1, [pc, #500]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a72:	4b78      	ldr	r3, [pc, #480]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a80:	4974      	ldr	r1, [pc, #464]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a94:	4b6f      	ldr	r3, [pc, #444]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa2:	496c      	ldr	r1, [pc, #432]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ab6:	4b67      	ldr	r3, [pc, #412]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac4:	4963      	ldr	r1, [pc, #396]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ad8:	4b5e      	ldr	r3, [pc, #376]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae6:	495b      	ldr	r1, [pc, #364]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005afa:	4b56      	ldr	r3, [pc, #344]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b08:	4952      	ldr	r1, [pc, #328]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b1c:	4b4d      	ldr	r3, [pc, #308]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	494a      	ldr	r1, [pc, #296]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b3e:	4b45      	ldr	r3, [pc, #276]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4c:	4941      	ldr	r1, [pc, #260]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b60:	4b3c      	ldr	r3, [pc, #240]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b66:	f023 0203 	bic.w	r2, r3, #3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6e:	4939      	ldr	r1, [pc, #228]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d028      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b82:	4b34      	ldr	r3, [pc, #208]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b90:	4930      	ldr	r1, [pc, #192]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba0:	d106      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ba2:	4b2c      	ldr	r3, [pc, #176]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	4a2b      	ldr	r2, [pc, #172]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bac:	60d3      	str	r3, [r2, #12]
 8005bae:	e011      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 f875 	bl	8006cb0 <RCCEx_PLLSAI1_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005bca:	7cfb      	ldrb	r3, [r7, #19]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
 8005bd2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d04d      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005be8:	d108      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005bea:	4b1a      	ldr	r3, [pc, #104]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bf0:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bf6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005bfa:	e012      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005bfc:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c02:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005c0c:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c1a:	490e      	ldr	r1, [pc, #56]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c2a:	d106      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c2c:	4b09      	ldr	r3, [pc, #36]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	4a08      	ldr	r2, [pc, #32]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c36:	60d3      	str	r3, [r2, #12]
 8005c38:	e020      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c42:	d109      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c44:	4b03      	ldr	r3, [pc, #12]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4a02      	ldr	r2, [pc, #8]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c4e:	60d3      	str	r3, [r2, #12]
 8005c50:	e014      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005c52:	bf00      	nop
 8005c54:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c60:	d10c      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3304      	adds	r3, #4
 8005c66:	2101      	movs	r1, #1
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f001 f821 	bl	8006cb0 <RCCEx_PLLSAI1_Config>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c72:	7cfb      	ldrb	r3, [r7, #19]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005c78:	7cfb      	ldrb	r3, [r7, #19]
 8005c7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d028      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c88:	4b7a      	ldr	r3, [pc, #488]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c96:	4977      	ldr	r1, [pc, #476]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca6:	d106      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca8:	4b72      	ldr	r3, [pc, #456]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a71      	ldr	r2, [pc, #452]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb2:	60d3      	str	r3, [r2, #12]
 8005cb4:	e011      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cbe:	d10c      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fff2 	bl	8006cb0 <RCCEx_PLLSAI1_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01e      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ce6:	4b63      	ldr	r3, [pc, #396]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cf6:	495f      	ldr	r1, [pc, #380]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d08:	d10c      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	2102      	movs	r1, #2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 ffcd 	bl	8006cb0 <RCCEx_PLLSAI1_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d1a:	7cfb      	ldrb	r3, [r7, #19]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005d20:	7cfb      	ldrb	r3, [r7, #19]
 8005d22:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d30:	4b50      	ldr	r3, [pc, #320]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d36:	f023 0204 	bic.w	r2, r3, #4
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d40:	494c      	ldr	r1, [pc, #304]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005d54:	4b47      	ldr	r3, [pc, #284]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d5a:	f023 0218 	bic.w	r2, r3, #24
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d64:	4943      	ldr	r1, [pc, #268]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d035      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d78:	4b3e      	ldr	r3, [pc, #248]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a3d      	ldr	r2, [pc, #244]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d84:	f7fb fd6c 	bl	8001860 <HAL_GetTick>
 8005d88:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d8a:	e009      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d8c:	f7fb fd68 	bl	8001860 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d902      	bls.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	74fb      	strb	r3, [r7, #19]
        break;
 8005d9e:	e005      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005da0:	4b34      	ldr	r3, [pc, #208]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1ef      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005dac:	7cfb      	ldrb	r3, [r7, #19]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d113      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005db2:	4b30      	ldr	r3, [pc, #192]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005db4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc2:	492c      	ldr	r1, [pc, #176]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3320      	adds	r3, #32
 8005dce:	2102      	movs	r1, #2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 f861 	bl	8006e98 <RCCEx_PLLSAI2_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005dda:	7cfb      	ldrb	r3, [r7, #19]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01e      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e00:	491c      	ldr	r1, [pc, #112]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	d10c      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3320      	adds	r3, #32
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 f83c 	bl	8006e98 <RCCEx_PLLSAI2_Config>
 8005e20:	4603      	mov	r3, r0
 8005e22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e24:	7cfb      	ldrb	r3, [r7, #19]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005e2a:	7cfb      	ldrb	r3, [r7, #19]
 8005e2c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d017      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e3a:	4b0e      	ldr	r3, [pc, #56]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e4a:	490a      	ldr	r1, [pc, #40]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e5c:	d105      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	4a04      	ldr	r2, [pc, #16]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e68:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40021000 	.word	0x40021000

08005e78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e8a:	d13e      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e8c:	4bbd      	ldr	r3, [pc, #756]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e96:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e9e:	d028      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ea6:	f200 86ec 	bhi.w	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb0:	d005      	beq.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb8:	d00e      	beq.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005eba:	f000 bee2 	b.w	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ebe:	4bb1      	ldr	r3, [pc, #708]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	f040 86e3 	bne.w	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
        frequency = LSE_VALUE;
 8005ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed2:	61fb      	str	r3, [r7, #28]
      break;
 8005ed4:	f000 bede 	b.w	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ed8:	4baa      	ldr	r3, [pc, #680]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	f040 86d8 	bne.w	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
          frequency = LSI_VALUE;
 8005ee8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005eec:	61fb      	str	r3, [r7, #28]
      break;
 8005eee:	f000 bed3 	b.w	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ef2:	4ba4      	ldr	r3, [pc, #656]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005efe:	f040 86cd 	bne.w	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
        frequency = HSE_VALUE / 32U;
 8005f02:	4ba1      	ldr	r3, [pc, #644]	; (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8005f04:	61fb      	str	r3, [r7, #28]
      break;
 8005f06:	f000 bec9 	b.w	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f0a:	4b9e      	ldr	r3, [pc, #632]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d036      	beq.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d840      	bhi.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d003      	beq.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d020      	beq.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005f2c:	e039      	b.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f2e:	4b95      	ldr	r3, [pc, #596]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d116      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f3a:	4b92      	ldr	r3, [pc, #584]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005f46:	4b8f      	ldr	r3, [pc, #572]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	e005      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005f52:	4b8c      	ldr	r3, [pc, #560]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	4a8b      	ldr	r2, [pc, #556]	; (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8005f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005f66:	e01f      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61bb      	str	r3, [r7, #24]
      break;
 8005f6c:	e01c      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f6e:	4b85      	ldr	r3, [pc, #532]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7a:	d102      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005f7c:	4b84      	ldr	r3, [pc, #528]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8005f7e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005f80:	e012      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61bb      	str	r3, [r7, #24]
      break;
 8005f86:	e00f      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f88:	4b7e      	ldr	r3, [pc, #504]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f94:	d102      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005f96:	4b7e      	ldr	r3, [pc, #504]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8005f98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005f9a:	e005      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61bb      	str	r3, [r7, #24]
      break;
 8005fa0:	e002      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61bb      	str	r3, [r7, #24]
      break;
 8005fa6:	bf00      	nop
    }

    switch(PeriphClk)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fae:	f000 85fe 	beq.w	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fb8:	f200 8672 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fc2:	f000 8466 	beq.w	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fcc:	f200 8668 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd6:	f000 852d 	beq.w	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe0:	f200 865e 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fea:	f000 8183 	beq.w	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ff4:	f200 8654 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ffe:	f000 80c9 	beq.w	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006008:	f200 864a 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006012:	f000 842d 	beq.w	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800601c:	f200 8640 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006026:	f000 83e1 	beq.w	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006030:	f200 8636 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800603a:	f000 80ab 	beq.w	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006044:	f200 862c 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604e:	f000 8091 	beq.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006058:	f200 8622 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006062:	d07f      	beq.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800606a:	f200 8619 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006074:	f000 8551 	beq.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607e:	f200 860f 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006088:	f000 84fd 	beq.w	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006092:	f200 8605 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609c:	f000 849e 	beq.w	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a6:	f200 85fb 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	f000 8463 	beq.w	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b80      	cmp	r3, #128	; 0x80
 80060b6:	f200 85f3 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b20      	cmp	r3, #32
 80060be:	d84b      	bhi.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 85ec 	beq.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	2b1f      	cmp	r3, #31
 80060ce:	f200 85e7 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080064e7 	.word	0x080064e7
 80060dc:	08006557 	.word	0x08006557
 80060e0:	08006ca1 	.word	0x08006ca1
 80060e4:	080065eb 	.word	0x080065eb
 80060e8:	08006ca1 	.word	0x08006ca1
 80060ec:	08006ca1 	.word	0x08006ca1
 80060f0:	08006ca1 	.word	0x08006ca1
 80060f4:	08006663 	.word	0x08006663
 80060f8:	08006ca1 	.word	0x08006ca1
 80060fc:	08006ca1 	.word	0x08006ca1
 8006100:	08006ca1 	.word	0x08006ca1
 8006104:	08006ca1 	.word	0x08006ca1
 8006108:	08006ca1 	.word	0x08006ca1
 800610c:	08006ca1 	.word	0x08006ca1
 8006110:	08006ca1 	.word	0x08006ca1
 8006114:	080066db 	.word	0x080066db
 8006118:	08006ca1 	.word	0x08006ca1
 800611c:	08006ca1 	.word	0x08006ca1
 8006120:	08006ca1 	.word	0x08006ca1
 8006124:	08006ca1 	.word	0x08006ca1
 8006128:	08006ca1 	.word	0x08006ca1
 800612c:	08006ca1 	.word	0x08006ca1
 8006130:	08006ca1 	.word	0x08006ca1
 8006134:	08006ca1 	.word	0x08006ca1
 8006138:	08006ca1 	.word	0x08006ca1
 800613c:	08006ca1 	.word	0x08006ca1
 8006140:	08006ca1 	.word	0x08006ca1
 8006144:	08006ca1 	.word	0x08006ca1
 8006148:	08006ca1 	.word	0x08006ca1
 800614c:	08006ca1 	.word	0x08006ca1
 8006150:	08006ca1 	.word	0x08006ca1
 8006154:	0800676b 	.word	0x0800676b
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	f000 83e0 	beq.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006160:	f000 bd9e 	b.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006164:	69b9      	ldr	r1, [r7, #24]
 8006166:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800616a:	f000 ff89 	bl	8007080 <RCCEx_GetSAIxPeriphCLKFreq>
 800616e:	61f8      	str	r0, [r7, #28]
      break;
 8006170:	f000 bd99 	b.w	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006174:	69b9      	ldr	r1, [r7, #24]
 8006176:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800617a:	f000 ff81 	bl	8007080 <RCCEx_GetSAIxPeriphCLKFreq>
 800617e:	61f8      	str	r0, [r7, #28]
      break;
 8006180:	f000 bd91 	b.w	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006184:	40021000 	.word	0x40021000
 8006188:	0007a120 	.word	0x0007a120
 800618c:	08012210 	.word	0x08012210
 8006190:	00f42400 	.word	0x00f42400
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006194:	4bb0      	ldr	r3, [pc, #704]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061a6:	d015      	beq.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061ae:	f200 8092 	bhi.w	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061b8:	d029      	beq.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c0:	f200 8089 	bhi.w	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d07b      	beq.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061d0:	d04a      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
          break;
 80061d2:	e080      	b.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80061d4:	4ba0      	ldr	r3, [pc, #640]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d17d      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80061e0:	4b9d      	ldr	r3, [pc, #628]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 80061ec:	4b9a      	ldr	r3, [pc, #616]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	e005      	b.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 80061f8:	4b97      	ldr	r3, [pc, #604]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	4a95      	ldr	r2, [pc, #596]	; (800645c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620a:	61fb      	str	r3, [r7, #28]
          break;
 800620c:	e066      	b.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800620e:	4b92      	ldr	r3, [pc, #584]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800621a:	d162      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800621c:	4b8e      	ldr	r3, [pc, #568]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006228:	d15b      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800622a:	4b8b      	ldr	r3, [pc, #556]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	0a1b      	lsrs	r3, r3, #8
 8006230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006234:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	fb02 f203 	mul.w	r2, r2, r3
 800623e:	4b86      	ldr	r3, [pc, #536]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	3301      	adds	r3, #1
 800624a:	fbb2 f3f3 	udiv	r3, r2, r3
 800624e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006250:	4b81      	ldr	r3, [pc, #516]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	0d5b      	lsrs	r3, r3, #21
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	3301      	adds	r3, #1
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	61fb      	str	r3, [r7, #28]
          break;
 8006266:	e03c      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006268:	4b7b      	ldr	r3, [pc, #492]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006274:	d138      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006276:	4b78      	ldr	r3, [pc, #480]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800627e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006282:	d131      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006284:	4b74      	ldr	r3, [pc, #464]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	0a1b      	lsrs	r3, r3, #8
 800628a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800628e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	fb02 f203 	mul.w	r2, r2, r3
 8006298:	4b6f      	ldr	r3, [pc, #444]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	091b      	lsrs	r3, r3, #4
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	3301      	adds	r3, #1
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80062aa:	4b6b      	ldr	r3, [pc, #428]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	0d5b      	lsrs	r3, r3, #21
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	3301      	adds	r3, #1
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	61fb      	str	r3, [r7, #28]
          break;
 80062c0:	e012      	b.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80062c2:	4b65      	ldr	r3, [pc, #404]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80062c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d10e      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x476>
            frequency = HSI48_VALUE;
 80062d0:	4b63      	ldr	r3, [pc, #396]	; (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80062d2:	61fb      	str	r3, [r7, #28]
          break;
 80062d4:	e00b      	b.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x476>
          break;
 80062d6:	bf00      	nop
 80062d8:	f000 bce5 	b.w	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80062dc:	bf00      	nop
 80062de:	f000 bce2 	b.w	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80062e2:	bf00      	nop
 80062e4:	f000 bcdf 	b.w	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80062e8:	bf00      	nop
 80062ea:	f000 bcdc 	b.w	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80062ee:	bf00      	nop
        break;
 80062f0:	f000 bcd9 	b.w	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80062f4:	4b58      	ldr	r3, [pc, #352]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80062f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006302:	d13d      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006304:	4b54      	ldr	r3, [pc, #336]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006310:	f040 84c8 	bne.w	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006314:	4b50      	ldr	r3, [pc, #320]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006320:	f040 84c0 	bne.w	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006324:	4b4c      	ldr	r3, [pc, #304]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	0a1b      	lsrs	r3, r3, #8
 800632a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	fb02 f203 	mul.w	r2, r2, r3
 8006338:	4b47      	ldr	r3, [pc, #284]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	091b      	lsrs	r3, r3, #4
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	3301      	adds	r3, #1
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800634a:	4b43      	ldr	r3, [pc, #268]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	0edb      	lsrs	r3, r3, #27
 8006350:	f003 031f 	and.w	r3, r3, #31
 8006354:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10a      	bne.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800635c:	4b3e      	ldr	r3, [pc, #248]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
                pllp = 17U;
 8006368:	2311      	movs	r3, #17
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e001      	b.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 7U;
 800636e:	2307      	movs	r3, #7
 8006370:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	61fb      	str	r3, [r7, #28]
      break;
 800637c:	f000 bc92 	b.w	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006380:	4b35      	ldr	r3, [pc, #212]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006386:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006392:	d016      	beq.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800639a:	f200 809a 	bhi.w	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a4:	d02b      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ac:	f200 8091 	bhi.w	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8083 	beq.w	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063be:	d051      	beq.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 80063c0:	e087      	b.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80063c2:	4b25      	ldr	r3, [pc, #148]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	f040 8083 	bne.w	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80063d0:	4b21      	ldr	r3, [pc, #132]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
 80063dc:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	091b      	lsrs	r3, r3, #4
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	e005      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 80063e8:	4b1b      	ldr	r3, [pc, #108]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80063ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	4a19      	ldr	r2, [pc, #100]	; (800645c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80063f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063fa:	61fb      	str	r3, [r7, #28]
          break;
 80063fc:	e06b      	b.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80063fe:	4b16      	ldr	r3, [pc, #88]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800640a:	d166      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800640c:	4b12      	ldr	r3, [pc, #72]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006418:	d15f      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x662>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006424:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	fb02 f203 	mul.w	r2, r2, r3
 800642e:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	3301      	adds	r3, #1
 800643a:	fbb2 f3f3 	udiv	r3, r2, r3
 800643e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	0d5b      	lsrs	r3, r3, #21
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	3301      	adds	r3, #1
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	fbb2 f3f3 	udiv	r3, r2, r3
 8006454:	61fb      	str	r3, [r7, #28]
          break;
 8006456:	e040      	b.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8006458:	40021000 	.word	0x40021000
 800645c:	08012210 	.word	0x08012210
 8006460:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006464:	4bae      	ldr	r3, [pc, #696]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800646c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006470:	d135      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x666>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006472:	4bab      	ldr	r3, [pc, #684]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800647a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800647e:	d12e      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x666>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006480:	4ba7      	ldr	r3, [pc, #668]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800648a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	fb02 f203 	mul.w	r2, r2, r3
 8006494:	4ba2      	ldr	r3, [pc, #648]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	3301      	adds	r3, #1
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80064a6:	4b9e      	ldr	r3, [pc, #632]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	0d5b      	lsrs	r3, r3, #21
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	3301      	adds	r3, #1
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ba:	61fb      	str	r3, [r7, #28]
          break;
 80064bc:	e00f      	b.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80064be:	4b98      	ldr	r3, [pc, #608]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d10a      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
            frequency = HSI48_VALUE;
 80064cc:	4b95      	ldr	r3, [pc, #596]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80064ce:	61fb      	str	r3, [r7, #28]
          break;
 80064d0:	e007      	b.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
          break;
 80064d2:	bf00      	nop
 80064d4:	e3e6      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80064d6:	bf00      	nop
 80064d8:	e3e4      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80064da:	bf00      	nop
 80064dc:	e3e2      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80064de:	bf00      	nop
 80064e0:	e3e0      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80064e2:	bf00      	nop
      break;
 80064e4:	e3de      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80064e6:	4b8e      	ldr	r3, [pc, #568]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d828      	bhi.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 80064f8:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80064fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fe:	bf00      	nop
 8006500:	08006511 	.word	0x08006511
 8006504:	08006519 	.word	0x08006519
 8006508:	08006521 	.word	0x08006521
 800650c:	08006535 	.word	0x08006535
          frequency = HAL_RCC_GetPCLK2Freq();
 8006510:	f7ff f81a 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 8006514:	61f8      	str	r0, [r7, #28]
          break;
 8006516:	e01d      	b.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8006518:	f7fe ff6a 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 800651c:	61f8      	str	r0, [r7, #28]
          break;
 800651e:	e019      	b.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006520:	4b7f      	ldr	r3, [pc, #508]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652c:	d10f      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
            frequency = HSI_VALUE;
 800652e:	4b7e      	ldr	r3, [pc, #504]	; (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8006530:	61fb      	str	r3, [r7, #28]
          break;
 8006532:	e00c      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006534:	4b7a      	ldr	r3, [pc, #488]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b02      	cmp	r3, #2
 8006540:	d107      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = LSE_VALUE;
 8006542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006546:	61fb      	str	r3, [r7, #28]
          break;
 8006548:	e003      	b.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          break;
 800654a:	bf00      	nop
 800654c:	e3ab      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800654e:	bf00      	nop
 8006550:	e3a9      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006552:	bf00      	nop
        break;
 8006554:	e3a7      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006556:	4b72      	ldr	r3, [pc, #456]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655c:	f003 030c 	and.w	r3, r3, #12
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b0c      	cmp	r3, #12
 8006566:	d83a      	bhi.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8006568:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 800656a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656e:	bf00      	nop
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080065df 	.word	0x080065df
 8006578:	080065df 	.word	0x080065df
 800657c:	080065df 	.word	0x080065df
 8006580:	080065ad 	.word	0x080065ad
 8006584:	080065df 	.word	0x080065df
 8006588:	080065df 	.word	0x080065df
 800658c:	080065df 	.word	0x080065df
 8006590:	080065b5 	.word	0x080065b5
 8006594:	080065df 	.word	0x080065df
 8006598:	080065df 	.word	0x080065df
 800659c:	080065df 	.word	0x080065df
 80065a0:	080065c9 	.word	0x080065c9
          frequency = HAL_RCC_GetPCLK1Freq();
 80065a4:	f7fe ffba 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 80065a8:	61f8      	str	r0, [r7, #28]
          break;
 80065aa:	e01d      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          frequency = HAL_RCC_GetSysClockFreq();
 80065ac:	f7fe ff20 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80065b0:	61f8      	str	r0, [r7, #28]
          break;
 80065b2:	e019      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065b4:	4b5a      	ldr	r3, [pc, #360]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c0:	d10f      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
            frequency = HSI_VALUE;
 80065c2:	4b59      	ldr	r3, [pc, #356]	; (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80065c4:	61fb      	str	r3, [r7, #28]
          break;
 80065c6:	e00c      	b.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065c8:	4b55      	ldr	r3, [pc, #340]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80065ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d107      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = LSE_VALUE;
 80065d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065da:	61fb      	str	r3, [r7, #28]
          break;
 80065dc:	e003      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          break;
 80065de:	bf00      	nop
 80065e0:	e361      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80065e2:	bf00      	nop
 80065e4:	e35f      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80065e6:	bf00      	nop
        break;
 80065e8:	e35d      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80065ea:	4b4d      	ldr	r3, [pc, #308]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b30      	cmp	r3, #48	; 0x30
 80065fa:	d021      	beq.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b30      	cmp	r3, #48	; 0x30
 8006600:	d829      	bhi.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b20      	cmp	r3, #32
 8006606:	d011      	beq.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b20      	cmp	r3, #32
 800660c:	d823      	bhi.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b10      	cmp	r3, #16
 8006618:	d004      	beq.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          break;
 800661a:	e01c      	b.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
          frequency = HAL_RCC_GetPCLK1Freq();
 800661c:	f7fe ff7e 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 8006620:	61f8      	str	r0, [r7, #28]
          break;
 8006622:	e01d      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006624:	f7fe fee4 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006628:	61f8      	str	r0, [r7, #28]
          break;
 800662a:	e019      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800662c:	4b3c      	ldr	r3, [pc, #240]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006638:	d10f      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 800663a:	4b3b      	ldr	r3, [pc, #236]	; (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 800663c:	61fb      	str	r3, [r7, #28]
          break;
 800663e:	e00c      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006640:	4b37      	ldr	r3, [pc, #220]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b02      	cmp	r3, #2
 800664c:	d107      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = LSE_VALUE;
 800664e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006652:	61fb      	str	r3, [r7, #28]
          break;
 8006654:	e003      	b.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          break;
 8006656:	bf00      	nop
 8006658:	e325      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800665a:	bf00      	nop
 800665c:	e323      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800665e:	bf00      	nop
        break;
 8006660:	e321      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006662:	4b2f      	ldr	r3, [pc, #188]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006668:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2bc0      	cmp	r3, #192	; 0xc0
 8006672:	d021      	beq.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2bc0      	cmp	r3, #192	; 0xc0
 8006678:	d829      	bhi.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b80      	cmp	r3, #128	; 0x80
 800667e:	d011      	beq.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b80      	cmp	r3, #128	; 0x80
 8006684:	d823      	bhi.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d004      	beq.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          break;
 8006692:	e01c      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006694:	f7fe ff42 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 8006698:	61f8      	str	r0, [r7, #28]
          break;
 800669a:	e01d      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          frequency = HAL_RCC_GetSysClockFreq();
 800669c:	f7fe fea8 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80066a0:	61f8      	str	r0, [r7, #28]
          break;
 80066a2:	e019      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066a4:	4b1e      	ldr	r3, [pc, #120]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b0:	d10f      	bne.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            frequency = HSI_VALUE;
 80066b2:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80066b4:	61fb      	str	r3, [r7, #28]
          break;
 80066b6:	e00c      	b.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066b8:	4b19      	ldr	r3, [pc, #100]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d107      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = LSE_VALUE;
 80066c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ca:	61fb      	str	r3, [r7, #28]
          break;
 80066cc:	e003      	b.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          break;
 80066ce:	bf00      	nop
 80066d0:	e2e9      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80066d2:	bf00      	nop
 80066d4:	e2e7      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80066d6:	bf00      	nop
        break;
 80066d8:	e2e5      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80066da:	4b11      	ldr	r3, [pc, #68]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ec:	d02c      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066f4:	d833      	bhi.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066fc:	d01a      	beq.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006704:	d82b      	bhi.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006712:	d00b      	beq.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          break;
 8006714:	e023      	b.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006716:	f7fe ff01 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 800671a:	61f8      	str	r0, [r7, #28]
          break;
 800671c:	e024      	b.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 800671e:	bf00      	nop
 8006720:	40021000 	.word	0x40021000
 8006724:	02dc6c00 	.word	0x02dc6c00
 8006728:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetSysClockFreq();
 800672c:	f7fe fe60 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006730:	61f8      	str	r0, [r7, #28]
          break;
 8006732:	e019      	b.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006734:	4ba6      	ldr	r3, [pc, #664]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800673c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006740:	d10f      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 8006742:	4ba4      	ldr	r3, [pc, #656]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006744:	61fb      	str	r3, [r7, #28]
          break;
 8006746:	e00c      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006748:	4ba1      	ldr	r3, [pc, #644]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b02      	cmp	r3, #2
 8006754:	d107      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = LSE_VALUE;
 8006756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675a:	61fb      	str	r3, [r7, #28]
          break;
 800675c:	e003      	b.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800675e:	bf00      	nop
 8006760:	e2a1      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006762:	bf00      	nop
 8006764:	e29f      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006766:	bf00      	nop
        break;
 8006768:	e29d      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800676a:	4b99      	ldr	r3, [pc, #612]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800677c:	d025      	beq.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006784:	d82c      	bhi.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800678c:	d013      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006794:	d824      	bhi.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a2:	d004      	beq.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          break;
 80067a4:	e01c      	b.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067a6:	f7fe feb9 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 80067aa:	61f8      	str	r0, [r7, #28]
          break;
 80067ac:	e01d      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = HAL_RCC_GetSysClockFreq();
 80067ae:	f7fe fe1f 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80067b2:	61f8      	str	r0, [r7, #28]
          break;
 80067b4:	e019      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067b6:	4b86      	ldr	r3, [pc, #536]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c2:	d10f      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            frequency = HSI_VALUE;
 80067c4:	4b83      	ldr	r3, [pc, #524]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80067c6:	61fb      	str	r3, [r7, #28]
          break;
 80067c8:	e00c      	b.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80067ca:	4b81      	ldr	r3, [pc, #516]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80067cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d107      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
            frequency = LSE_VALUE;
 80067d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067dc:	61fb      	str	r3, [r7, #28]
          break;
 80067de:	e003      	b.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          break;
 80067e0:	bf00      	nop
 80067e2:	e260      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80067e4:	bf00      	nop
 80067e6:	e25e      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80067e8:	bf00      	nop
        break;
 80067ea:	e25c      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067ec:	4b78      	ldr	r3, [pc, #480]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067fe:	d007      	beq.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006806:	d12f      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006808:	f7fe fdf2 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 800680c:	61f8      	str	r0, [r7, #28]
          break;
 800680e:	e02e      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006810:	4b6f      	ldr	r3, [pc, #444]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800681c:	d126      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800681e:	4b6c      	ldr	r3, [pc, #432]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d020      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800682a:	4b69      	ldr	r3, [pc, #420]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006834:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	fb02 f203 	mul.w	r2, r2, r3
 800683e:	4b64      	ldr	r3, [pc, #400]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	091b      	lsrs	r3, r3, #4
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	3301      	adds	r3, #1
 800684a:	fbb2 f3f3 	udiv	r3, r2, r3
 800684e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006850:	4b5f      	ldr	r3, [pc, #380]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	0e5b      	lsrs	r3, r3, #25
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	3301      	adds	r3, #1
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	fbb2 f3f3 	udiv	r3, r2, r3
 8006864:	61fb      	str	r3, [r7, #28]
          break;
 8006866:	e001      	b.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
          break;
 8006868:	bf00      	nop
 800686a:	e21c      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800686c:	bf00      	nop
        break;
 800686e:	e21a      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006870:	4b57      	ldr	r3, [pc, #348]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006882:	f7fe fe61 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 8006886:	61f8      	str	r0, [r7, #28]
        break;
 8006888:	e20d      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          frequency = HAL_RCC_GetSysClockFreq();
 800688a:	f7fe fdb1 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 800688e:	61f8      	str	r0, [r7, #28]
        break;
 8006890:	e209      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006892:	4b4f      	ldr	r3, [pc, #316]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006894:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006898:	f003 0318 	and.w	r3, r3, #24
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b10      	cmp	r3, #16
 80068a2:	d010      	beq.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b10      	cmp	r3, #16
 80068a8:	d834      	bhi.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d024      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
          break;
 80068b6:	e02d      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80068b8:	69b9      	ldr	r1, [r7, #24]
 80068ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80068be:	f000 fbdf 	bl	8007080 <RCCEx_GetSAIxPeriphCLKFreq>
 80068c2:	61f8      	str	r0, [r7, #28]
          break;
 80068c4:	e02b      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80068c6:	4b42      	ldr	r3, [pc, #264]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d122      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80068d2:	4b3f      	ldr	r3, [pc, #252]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80068de:	4b3c      	ldr	r3, [pc, #240]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	091b      	lsrs	r3, r3, #4
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	e005      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 80068ea:	4b39      	ldr	r3, [pc, #228]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80068ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068f0:	0a1b      	lsrs	r3, r3, #8
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	4a38      	ldr	r2, [pc, #224]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 80068f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068fc:	61fb      	str	r3, [r7, #28]
          break;
 80068fe:	e00b      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006900:	4b33      	ldr	r3, [pc, #204]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690c:	d106      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = HSI_VALUE;
 800690e:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006910:	61fb      	str	r3, [r7, #28]
          break;
 8006912:	e003      	b.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          break;
 8006914:	bf00      	nop
 8006916:	e1c6      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006918:	bf00      	nop
 800691a:	e1c4      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800691c:	bf00      	nop
        break;
 800691e:	e1c2      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006920:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006926:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006932:	d013      	beq.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693a:	d819      	bhi.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006948:	d004      	beq.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
          break;
 800694a:	e011      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800694c:	f7fe fde6 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 8006950:	61f8      	str	r0, [r7, #28]
          break;
 8006952:	e010      	b.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006954:	f7fe fd4c 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006958:	61f8      	str	r0, [r7, #28]
          break;
 800695a:	e00c      	b.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800695c:	4b1c      	ldr	r3, [pc, #112]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006968:	d104      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
            frequency = HSI_VALUE;
 800696a:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800696c:	61fb      	str	r3, [r7, #28]
          break;
 800696e:	e001      	b.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
          break;
 8006970:	bf00      	nop
 8006972:	e198      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006974:	bf00      	nop
        break;
 8006976:	e196      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006978:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800698a:	d013      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006992:	d819      	bhi.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069a0:	d004      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 80069a2:	e011      	b.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069a4:	f7fe fdba 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 80069a8:	61f8      	str	r0, [r7, #28]
          break;
 80069aa:	e010      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = HAL_RCC_GetSysClockFreq();
 80069ac:	f7fe fd20 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80069b0:	61f8      	str	r0, [r7, #28]
          break;
 80069b2:	e00c      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b4:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c0:	d104      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
            frequency = HSI_VALUE;
 80069c2:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80069c4:	61fb      	str	r3, [r7, #28]
          break;
 80069c6:	e001      	b.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
          break;
 80069c8:	bf00      	nop
 80069ca:	e16c      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069cc:	bf00      	nop
        break;
 80069ce:	e16a      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 80069d0:	40021000 	.word	0x40021000
 80069d4:	00f42400 	.word	0x00f42400
 80069d8:	08012210 	.word	0x08012210
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80069dc:	4baa      	ldr	r3, [pc, #680]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069ee:	d013      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069f6:	d819      	bhi.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a04:	d004      	beq.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
          break;
 8006a06:	e011      	b.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a08:	f7fe fd88 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 8006a0c:	61f8      	str	r0, [r7, #28]
          break;
 8006a0e:	e010      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a10:	f7fe fcee 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006a14:	61f8      	str	r0, [r7, #28]
          break;
 8006a16:	e00c      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a18:	4b9b      	ldr	r3, [pc, #620]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a24:	d104      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
            frequency = HSI_VALUE;
 8006a26:	4b99      	ldr	r3, [pc, #612]	; (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006a28:	61fb      	str	r3, [r7, #28]
          break;
 8006a2a:	e001      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          break;
 8006a2c:	bf00      	nop
 8006a2e:	e13a      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a30:	bf00      	nop
        break;
 8006a32:	e138      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006a34:	4b94      	ldr	r3, [pc, #592]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d011      	beq.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d818      	bhi.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d004      	beq.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 8006a58:	e011      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a5a:	f7fe fd5f 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 8006a5e:	61f8      	str	r0, [r7, #28]
          break;
 8006a60:	e010      	b.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a62:	f7fe fcc5 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006a66:	61f8      	str	r0, [r7, #28]
          break;
 8006a68:	e00c      	b.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a6a:	4b87      	ldr	r3, [pc, #540]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a76:	d104      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
            frequency = HSI_VALUE;
 8006a78:	4b84      	ldr	r3, [pc, #528]	; (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006a7a:	61fb      	str	r3, [r7, #28]
          break;
 8006a7c:	e001      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          break;
 8006a7e:	bf00      	nop
 8006a80:	e111      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a82:	bf00      	nop
        break;
 8006a84:	e10f      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006a86:	4b80      	ldr	r3, [pc, #512]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a98:	d02c      	beq.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006aa0:	d833      	bhi.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006aa8:	d01a      	beq.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ab0:	d82b      	bhi.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006abe:	d004      	beq.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          break;
 8006ac0:	e023      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ac2:	f7fe fd2b 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 8006ac6:	61f8      	str	r0, [r7, #28]
          break;
 8006ac8:	e026      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xca0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006aca:	4b6f      	ldr	r3, [pc, #444]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d11a      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
              frequency = LSI_VALUE;
 8006ad8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006adc:	61fb      	str	r3, [r7, #28]
          break;
 8006ade:	e016      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ae0:	4b69      	ldr	r3, [pc, #420]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aec:	d111      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
            frequency = HSI_VALUE;
 8006aee:	4b67      	ldr	r3, [pc, #412]	; (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006af0:	61fb      	str	r3, [r7, #28]
          break;
 8006af2:	e00e      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006af4:	4b64      	ldr	r3, [pc, #400]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d109      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = LSE_VALUE;
 8006b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b06:	61fb      	str	r3, [r7, #28]
          break;
 8006b08:	e005      	b.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          break;
 8006b0a:	bf00      	nop
 8006b0c:	e0cb      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006b0e:	bf00      	nop
 8006b10:	e0c9      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006b12:	bf00      	nop
 8006b14:	e0c7      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006b16:	bf00      	nop
        break;
 8006b18:	e0c5      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006b1a:	4b5b      	ldr	r3, [pc, #364]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b2c:	d02c      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b34:	d833      	bhi.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b3c:	d01a      	beq.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b44:	d82b      	bhi.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d004      	beq.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b52:	d004      	beq.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
          break;
 8006b54:	e023      	b.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b56:	f7fe fce1 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 8006b5a:	61f8      	str	r0, [r7, #28]
          break;
 8006b5c:	e026      	b.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006b5e:	4b4a      	ldr	r3, [pc, #296]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d11a      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
              frequency = LSI_VALUE;
 8006b6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b70:	61fb      	str	r3, [r7, #28]
          break;
 8006b72:	e016      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b74:	4b44      	ldr	r3, [pc, #272]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b80:	d111      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = HSI_VALUE;
 8006b82:	4b42      	ldr	r3, [pc, #264]	; (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006b84:	61fb      	str	r3, [r7, #28]
          break;
 8006b86:	e00e      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b88:	4b3f      	ldr	r3, [pc, #252]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d109      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
            frequency = LSE_VALUE;
 8006b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b9a:	61fb      	str	r3, [r7, #28]
          break;
 8006b9c:	e005      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          break;
 8006b9e:	bf00      	nop
 8006ba0:	e081      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006ba2:	bf00      	nop
 8006ba4:	e07f      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006ba6:	bf00      	nop
 8006ba8:	e07d      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006baa:	bf00      	nop
        break;
 8006bac:	e07b      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006bae:	4b36      	ldr	r3, [pc, #216]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bb4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bc0:	d02c      	beq.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bc8:	d855      	bhi.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd6:	d004      	beq.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
          break;
 8006bd8:	e04d      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006bda:	f7fe fc09 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 8006bde:	61f8      	str	r0, [r7, #28]
          break;
 8006be0:	e04e      	b.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006be2:	4b29      	ldr	r3, [pc, #164]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d145      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006bee:	4b26      	ldr	r3, [pc, #152]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006bfa:	4b23      	ldr	r3, [pc, #140]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	091b      	lsrs	r3, r3, #4
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	e005      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8006c06:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	4a1f      	ldr	r2, [pc, #124]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>)
 8006c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c18:	61fb      	str	r3, [r7, #28]
          break;
 8006c1a:	e02e      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006c1c:	4b1a      	ldr	r3, [pc, #104]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c28:	d129      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006c2a:	4b17      	ldr	r3, [pc, #92]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c36:	d122      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006c38:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	0a1b      	lsrs	r3, r3, #8
 8006c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c42:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	fb02 f203 	mul.w	r2, r2, r3
 8006c4c:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	3301      	adds	r3, #1
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	0d5b      	lsrs	r3, r3, #21
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	3301      	adds	r3, #1
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	61fb      	str	r3, [r7, #28]
          break;
 8006c74:	e003      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
          break;
 8006c76:	bf00      	nop
 8006c78:	e015      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c7a:	bf00      	nop
 8006c7c:	e013      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c7e:	bf00      	nop
        break;
 8006c80:	e011      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006c82:	bf00      	nop
 8006c84:	e00f      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006c86:	bf00      	nop
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	00f42400 	.word	0x00f42400
 8006c90:	08012210 	.word	0x08012210
      break;
 8006c94:	bf00      	nop
 8006c96:	e006      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006c98:	bf00      	nop
 8006c9a:	e004      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006c9c:	bf00      	nop
 8006c9e:	e002      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006ca0:	bf00      	nop
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006ca4:	bf00      	nop
    }
  }

  return(frequency);
 8006ca6:	69fb      	ldr	r3, [r7, #28]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3720      	adds	r7, #32
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006cbe:	4b72      	ldr	r3, [pc, #456]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f003 0303 	and.w	r3, r3, #3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00e      	beq.n	8006ce8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006cca:	4b6f      	ldr	r3, [pc, #444]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0203 	and.w	r2, r3, #3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d103      	bne.n	8006ce2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
       ||
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d142      	bne.n	8006d68 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	73fb      	strb	r3, [r7, #15]
 8006ce6:	e03f      	b.n	8006d68 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d018      	beq.n	8006d22 <RCCEx_PLLSAI1_Config+0x72>
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d825      	bhi.n	8006d40 <RCCEx_PLLSAI1_Config+0x90>
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d002      	beq.n	8006cfe <RCCEx_PLLSAI1_Config+0x4e>
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d009      	beq.n	8006d10 <RCCEx_PLLSAI1_Config+0x60>
 8006cfc:	e020      	b.n	8006d40 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cfe:	4b62      	ldr	r3, [pc, #392]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d11d      	bne.n	8006d46 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d0e:	e01a      	b.n	8006d46 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d10:	4b5d      	ldr	r3, [pc, #372]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d116      	bne.n	8006d4a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d20:	e013      	b.n	8006d4a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d22:	4b59      	ldr	r3, [pc, #356]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10f      	bne.n	8006d4e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d2e:	4b56      	ldr	r3, [pc, #344]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d3e:	e006      	b.n	8006d4e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
      break;
 8006d44:	e004      	b.n	8006d50 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d108      	bne.n	8006d68 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006d56:	4b4c      	ldr	r3, [pc, #304]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f023 0203 	bic.w	r2, r3, #3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4949      	ldr	r1, [pc, #292]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f040 8086 	bne.w	8006e7c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d70:	4b45      	ldr	r3, [pc, #276]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a44      	ldr	r2, [pc, #272]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d7c:	f7fa fd70 	bl	8001860 <HAL_GetTick>
 8006d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d82:	e009      	b.n	8006d98 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d84:	f7fa fd6c 	bl	8001860 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d902      	bls.n	8006d98 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	73fb      	strb	r3, [r7, #15]
        break;
 8006d96:	e005      	b.n	8006da4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d98:	4b3b      	ldr	r3, [pc, #236]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1ef      	bne.n	8006d84 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d168      	bne.n	8006e7c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d113      	bne.n	8006dd8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006db0:	4b35      	ldr	r3, [pc, #212]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	4b35      	ldr	r3, [pc, #212]	; (8006e8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6892      	ldr	r2, [r2, #8]
 8006dbc:	0211      	lsls	r1, r2, #8
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68d2      	ldr	r2, [r2, #12]
 8006dc2:	06d2      	lsls	r2, r2, #27
 8006dc4:	4311      	orrs	r1, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6852      	ldr	r2, [r2, #4]
 8006dca:	3a01      	subs	r2, #1
 8006dcc:	0112      	lsls	r2, r2, #4
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	492d      	ldr	r1, [pc, #180]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	610b      	str	r3, [r1, #16]
 8006dd6:	e02d      	b.n	8006e34 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d115      	bne.n	8006e0a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dde:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	4b2b      	ldr	r3, [pc, #172]	; (8006e90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6892      	ldr	r2, [r2, #8]
 8006dea:	0211      	lsls	r1, r2, #8
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6912      	ldr	r2, [r2, #16]
 8006df0:	0852      	lsrs	r2, r2, #1
 8006df2:	3a01      	subs	r2, #1
 8006df4:	0552      	lsls	r2, r2, #21
 8006df6:	4311      	orrs	r1, r2
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6852      	ldr	r2, [r2, #4]
 8006dfc:	3a01      	subs	r2, #1
 8006dfe:	0112      	lsls	r2, r2, #4
 8006e00:	430a      	orrs	r2, r1
 8006e02:	4921      	ldr	r1, [pc, #132]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	610b      	str	r3, [r1, #16]
 8006e08:	e014      	b.n	8006e34 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e0a:	4b1f      	ldr	r3, [pc, #124]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	4b21      	ldr	r3, [pc, #132]	; (8006e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6892      	ldr	r2, [r2, #8]
 8006e16:	0211      	lsls	r1, r2, #8
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6952      	ldr	r2, [r2, #20]
 8006e1c:	0852      	lsrs	r2, r2, #1
 8006e1e:	3a01      	subs	r2, #1
 8006e20:	0652      	lsls	r2, r2, #25
 8006e22:	4311      	orrs	r1, r2
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6852      	ldr	r2, [r2, #4]
 8006e28:	3a01      	subs	r2, #1
 8006e2a:	0112      	lsls	r2, r2, #4
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	4916      	ldr	r1, [pc, #88]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e34:	4b14      	ldr	r3, [pc, #80]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a13      	ldr	r2, [pc, #76]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e40:	f7fa fd0e 	bl	8001860 <HAL_GetTick>
 8006e44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e46:	e009      	b.n	8006e5c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e48:	f7fa fd0a 	bl	8001860 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d902      	bls.n	8006e5c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	73fb      	strb	r3, [r7, #15]
          break;
 8006e5a:	e005      	b.n	8006e68 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0ef      	beq.n	8006e48 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e6e:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	4904      	ldr	r1, [pc, #16]	; (8006e88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	07ff800f 	.word	0x07ff800f
 8006e90:	ff9f800f 	.word	0xff9f800f
 8006e94:	f9ff800f 	.word	0xf9ff800f

08006e98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ea6:	4b72      	ldr	r3, [pc, #456]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00e      	beq.n	8006ed0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006eb2:	4b6f      	ldr	r3, [pc, #444]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f003 0203 	and.w	r2, r3, #3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d103      	bne.n	8006eca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
       ||
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d142      	bne.n	8006f50 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	73fb      	strb	r3, [r7, #15]
 8006ece:	e03f      	b.n	8006f50 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d018      	beq.n	8006f0a <RCCEx_PLLSAI2_Config+0x72>
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d825      	bhi.n	8006f28 <RCCEx_PLLSAI2_Config+0x90>
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d002      	beq.n	8006ee6 <RCCEx_PLLSAI2_Config+0x4e>
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d009      	beq.n	8006ef8 <RCCEx_PLLSAI2_Config+0x60>
 8006ee4:	e020      	b.n	8006f28 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ee6:	4b62      	ldr	r3, [pc, #392]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d11d      	bne.n	8006f2e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ef6:	e01a      	b.n	8006f2e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ef8:	4b5d      	ldr	r3, [pc, #372]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d116      	bne.n	8006f32 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f08:	e013      	b.n	8006f32 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f0a:	4b59      	ldr	r3, [pc, #356]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10f      	bne.n	8006f36 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f16:	4b56      	ldr	r3, [pc, #344]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d109      	bne.n	8006f36 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f26:	e006      	b.n	8006f36 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2c:	e004      	b.n	8006f38 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006f2e:	bf00      	nop
 8006f30:	e002      	b.n	8006f38 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006f32:	bf00      	nop
 8006f34:	e000      	b.n	8006f38 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d108      	bne.n	8006f50 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006f3e:	4b4c      	ldr	r3, [pc, #304]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f023 0203 	bic.w	r2, r3, #3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4949      	ldr	r1, [pc, #292]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f040 8086 	bne.w	8007064 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006f58:	4b45      	ldr	r3, [pc, #276]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a44      	ldr	r2, [pc, #272]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f64:	f7fa fc7c 	bl	8001860 <HAL_GetTick>
 8006f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f6a:	e009      	b.n	8006f80 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f6c:	f7fa fc78 	bl	8001860 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d902      	bls.n	8006f80 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8006f7e:	e005      	b.n	8006f8c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f80:	4b3b      	ldr	r3, [pc, #236]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1ef      	bne.n	8006f6c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d168      	bne.n	8007064 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d113      	bne.n	8006fc0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f98:	4b35      	ldr	r3, [pc, #212]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f9a:	695a      	ldr	r2, [r3, #20]
 8006f9c:	4b35      	ldr	r3, [pc, #212]	; (8007074 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6892      	ldr	r2, [r2, #8]
 8006fa4:	0211      	lsls	r1, r2, #8
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	68d2      	ldr	r2, [r2, #12]
 8006faa:	06d2      	lsls	r2, r2, #27
 8006fac:	4311      	orrs	r1, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6852      	ldr	r2, [r2, #4]
 8006fb2:	3a01      	subs	r2, #1
 8006fb4:	0112      	lsls	r2, r2, #4
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	492d      	ldr	r1, [pc, #180]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	614b      	str	r3, [r1, #20]
 8006fbe:	e02d      	b.n	800701c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d115      	bne.n	8006ff2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fc6:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fc8:	695a      	ldr	r2, [r3, #20]
 8006fca:	4b2b      	ldr	r3, [pc, #172]	; (8007078 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6892      	ldr	r2, [r2, #8]
 8006fd2:	0211      	lsls	r1, r2, #8
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6912      	ldr	r2, [r2, #16]
 8006fd8:	0852      	lsrs	r2, r2, #1
 8006fda:	3a01      	subs	r2, #1
 8006fdc:	0552      	lsls	r2, r2, #21
 8006fde:	4311      	orrs	r1, r2
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6852      	ldr	r2, [r2, #4]
 8006fe4:	3a01      	subs	r2, #1
 8006fe6:	0112      	lsls	r2, r2, #4
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	4921      	ldr	r1, [pc, #132]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	614b      	str	r3, [r1, #20]
 8006ff0:	e014      	b.n	800701c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ff2:	4b1f      	ldr	r3, [pc, #124]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	4b21      	ldr	r3, [pc, #132]	; (800707c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6892      	ldr	r2, [r2, #8]
 8006ffe:	0211      	lsls	r1, r2, #8
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6952      	ldr	r2, [r2, #20]
 8007004:	0852      	lsrs	r2, r2, #1
 8007006:	3a01      	subs	r2, #1
 8007008:	0652      	lsls	r2, r2, #25
 800700a:	4311      	orrs	r1, r2
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6852      	ldr	r2, [r2, #4]
 8007010:	3a01      	subs	r2, #1
 8007012:	0112      	lsls	r2, r2, #4
 8007014:	430a      	orrs	r2, r1
 8007016:	4916      	ldr	r1, [pc, #88]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007018:	4313      	orrs	r3, r2
 800701a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800701c:	4b14      	ldr	r3, [pc, #80]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a13      	ldr	r2, [pc, #76]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007026:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007028:	f7fa fc1a 	bl	8001860 <HAL_GetTick>
 800702c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800702e:	e009      	b.n	8007044 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007030:	f7fa fc16 	bl	8001860 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d902      	bls.n	8007044 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	73fb      	strb	r3, [r7, #15]
          break;
 8007042:	e005      	b.n	8007050 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007044:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0ef      	beq.n	8007030 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	4904      	ldr	r1, [pc, #16]	; (8007070 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007060:	4313      	orrs	r3, r2
 8007062:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	40021000 	.word	0x40021000
 8007074:	07ff800f 	.word	0x07ff800f
 8007078:	ff9f800f 	.word	0xff9f800f
 800707c:	f9ff800f 	.word	0xf9ff800f

08007080 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007080:	b480      	push	{r7}
 8007082:	b089      	sub	sp, #36	; 0x24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800709c:	d10b      	bne.n	80070b6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800709e:	4b7e      	ldr	r3, [pc, #504]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070a4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80070a8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b60      	cmp	r3, #96	; 0x60
 80070ae:	d112      	bne.n	80070d6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80070b0:	4b7a      	ldr	r3, [pc, #488]	; (800729c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e00f      	b.n	80070d6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070bc:	d10b      	bne.n	80070d6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80070be:	4b76      	ldr	r3, [pc, #472]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070c8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d0:	d101      	bne.n	80070d6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80070d2:	4b72      	ldr	r3, [pc, #456]	; (800729c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80070d4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 80d6 	bne.w	800728a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b40      	cmp	r3, #64	; 0x40
 80070e6:	d003      	beq.n	80070f0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ee:	d13b      	bne.n	8007168 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80070f0:	4b69      	ldr	r3, [pc, #420]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070fc:	f040 80c4 	bne.w	8007288 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007100:	4b65      	ldr	r3, [pc, #404]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80bd 	beq.w	8007288 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800710e:	4b62      	ldr	r3, [pc, #392]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	091b      	lsrs	r3, r3, #4
 8007114:	f003 030f 	and.w	r3, r3, #15
 8007118:	3301      	adds	r3, #1
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007120:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007122:	4b5d      	ldr	r3, [pc, #372]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	0a1b      	lsrs	r3, r3, #8
 8007128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800712c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800712e:	4b5a      	ldr	r3, [pc, #360]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	0edb      	lsrs	r3, r3, #27
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007140:	4b55      	ldr	r3, [pc, #340]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800714c:	2311      	movs	r3, #17
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e001      	b.n	8007156 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007152:	2307      	movs	r3, #7
 8007154:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	fb02 f203 	mul.w	r2, r2, r3
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	fbb2 f3f3 	udiv	r3, r2, r3
 8007164:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007166:	e08f      	b.n	8007288 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d13a      	bne.n	80071e4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800716e:	4b4a      	ldr	r3, [pc, #296]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800717a:	f040 8086 	bne.w	800728a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800717e:	4b46      	ldr	r3, [pc, #280]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d07f      	beq.n	800728a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800718a:	4b43      	ldr	r3, [pc, #268]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	091b      	lsrs	r3, r3, #4
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	3301      	adds	r3, #1
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	fbb2 f3f3 	udiv	r3, r2, r3
 800719c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800719e:	4b3e      	ldr	r3, [pc, #248]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	0a1b      	lsrs	r3, r3, #8
 80071a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80071aa:	4b3b      	ldr	r3, [pc, #236]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	0edb      	lsrs	r3, r3, #27
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80071bc:	4b36      	ldr	r3, [pc, #216]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80071c8:	2311      	movs	r3, #17
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	e001      	b.n	80071d2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80071ce:	2307      	movs	r3, #7
 80071d0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	fb02 f203 	mul.w	r2, r2, r3
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e0:	61fb      	str	r3, [r7, #28]
 80071e2:	e052      	b.n	800728a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	2b80      	cmp	r3, #128	; 0x80
 80071e8:	d003      	beq.n	80071f2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f0:	d109      	bne.n	8007206 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071f2:	4b29      	ldr	r3, [pc, #164]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071fe:	d144      	bne.n	800728a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007200:	4b27      	ldr	r3, [pc, #156]	; (80072a0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007202:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007204:	e041      	b.n	800728a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b20      	cmp	r3, #32
 800720a:	d003      	beq.n	8007214 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007212:	d13a      	bne.n	800728a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007214:	4b20      	ldr	r3, [pc, #128]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800721c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007220:	d133      	bne.n	800728a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007222:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d02d      	beq.n	800728a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800722e:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	091b      	lsrs	r3, r3, #4
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	3301      	adds	r3, #1
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007240:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007242:	4b15      	ldr	r3, [pc, #84]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	0a1b      	lsrs	r3, r3, #8
 8007248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800724c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800724e:	4b12      	ldr	r3, [pc, #72]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	0edb      	lsrs	r3, r3, #27
 8007254:	f003 031f 	and.w	r3, r3, #31
 8007258:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800726c:	2311      	movs	r3, #17
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	e001      	b.n	8007276 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007272:	2307      	movs	r3, #7
 8007274:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	fb02 f203 	mul.w	r2, r2, r3
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	fbb2 f3f3 	udiv	r3, r2, r3
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	e000      	b.n	800728a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007288:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800728a:	69fb      	ldr	r3, [r7, #28]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3724      	adds	r7, #36	; 0x24
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	40021000 	.word	0x40021000
 800729c:	001fff68 	.word	0x001fff68
 80072a0:	00f42400 	.word	0x00f42400

080072a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d06c      	beq.n	8007390 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7f9 ff92 	bl	80011f4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	22ca      	movs	r2, #202	; 0xca
 80072de:	625a      	str	r2, [r3, #36]	; 0x24
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2253      	movs	r2, #83	; 0x53
 80072e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f9a0 	bl	800762e <RTC_EnterInitMode>
 80072ee:	4603      	mov	r3, r0
 80072f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d14b      	bne.n	8007390 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800730a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6899      	ldr	r1, [r3, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68d2      	ldr	r2, [r2, #12]
 8007332:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6919      	ldr	r1, [r3, #16]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	041a      	lsls	r2, r3, #16
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f9a3 	bl	8007694 <RTC_ExitInitMode>
 800734e:	4603      	mov	r3, r0
 8007350:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11b      	bne.n	8007390 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0203 	bic.w	r2, r2, #3
 8007366:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69da      	ldr	r2, [r3, #28]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	22ff      	movs	r2, #255	; 0xff
 8007386:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800739a:	b590      	push	{r4, r7, lr}
 800739c:	b087      	sub	sp, #28
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_RTC_SetTime+0x1a>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e08b      	b.n	80074cc <HAL_RTC_SetTime+0x132>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	22ca      	movs	r2, #202	; 0xca
 80073ca:	625a      	str	r2, [r3, #36]	; 0x24
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2253      	movs	r2, #83	; 0x53
 80073d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 f92a 	bl	800762e <RTC_EnterInitMode>
 80073da:	4603      	mov	r3, r0
 80073dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80073de:	7cfb      	ldrb	r3, [r7, #19]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d163      	bne.n	80074ac <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d126      	bne.n	8007438 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d102      	bne.n	80073fe <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2200      	movs	r2, #0
 80073fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 f984 	bl	8007710 <RTC_ByteToBcd2>
 8007408:	4603      	mov	r3, r0
 800740a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 f97d 	bl	8007710 <RTC_ByteToBcd2>
 8007416:	4603      	mov	r3, r0
 8007418:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800741a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	789b      	ldrb	r3, [r3, #2]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f975 	bl	8007710 <RTC_ByteToBcd2>
 8007426:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007428:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	78db      	ldrb	r3, [r3, #3]
 8007430:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	e018      	b.n	800746a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2200      	movs	r2, #0
 800744a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007458:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800745e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	78db      	ldrb	r3, [r3, #3]
 8007464:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007474:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007478:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007488:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6899      	ldr	r1, [r3, #8]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	431a      	orrs	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 f8f6 	bl	8007694 <RTC_ExitInitMode>
 80074a8:	4603      	mov	r3, r0
 80074aa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	22ff      	movs	r2, #255	; 0xff
 80074b2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80074b4:	7cfb      	ldrb	r3, [r7, #19]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d103      	bne.n	80074c2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80074ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd90      	pop	{r4, r7, pc}

080074d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80074d4:	b590      	push	{r4, r7, lr}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_RTC_SetDate+0x1a>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e075      	b.n	80075da <HAL_RTC_SetDate+0x106>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10e      	bne.n	8007522 <HAL_RTC_SetDate+0x4e>
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	f003 0310 	and.w	r3, r3, #16
 800750c:	2b00      	cmp	r3, #0
 800750e:	d008      	beq.n	8007522 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	f023 0310 	bic.w	r3, r3, #16
 8007518:	b2db      	uxtb	r3, r3
 800751a:	330a      	adds	r3, #10
 800751c:	b2da      	uxtb	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d11c      	bne.n	8007562 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	78db      	ldrb	r3, [r3, #3]
 800752c:	4618      	mov	r0, r3
 800752e:	f000 f8ef 	bl	8007710 <RTC_ByteToBcd2>
 8007532:	4603      	mov	r3, r0
 8007534:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	4618      	mov	r0, r3
 800753c:	f000 f8e8 	bl	8007710 <RTC_ByteToBcd2>
 8007540:	4603      	mov	r3, r0
 8007542:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007544:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	789b      	ldrb	r3, [r3, #2]
 800754a:	4618      	mov	r0, r3
 800754c:	f000 f8e0 	bl	8007710 <RTC_ByteToBcd2>
 8007550:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007552:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	e00e      	b.n	8007580 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	78db      	ldrb	r3, [r3, #3]
 8007566:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	785b      	ldrb	r3, [r3, #1]
 800756c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800756e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007574:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800757c:	4313      	orrs	r3, r2
 800757e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	22ca      	movs	r2, #202	; 0xca
 8007586:	625a      	str	r2, [r3, #36]	; 0x24
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2253      	movs	r2, #83	; 0x53
 800758e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 f84c 	bl	800762e <RTC_EnterInitMode>
 8007596:	4603      	mov	r3, r0
 8007598:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800759a:	7cfb      	ldrb	r3, [r7, #19]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10c      	bne.n	80075ba <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075ae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f86f 	bl	8007694 <RTC_ExitInitMode>
 80075b6:	4603      	mov	r3, r0
 80075b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	22ff      	movs	r2, #255	; 0xff
 80075c0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80075c2:	7cfb      	ldrb	r3, [r7, #19]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d103      	bne.n	80075d0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80075d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd90      	pop	{r4, r7, pc}

080075e2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075f8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80075fa:	f7fa f931 	bl	8001860 <HAL_GetTick>
 80075fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007600:	e009      	b.n	8007616 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007602:	f7fa f92d 	bl	8001860 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007610:	d901      	bls.n	8007616 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e007      	b.n	8007626 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0ee      	beq.n	8007602 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d120      	bne.n	800768a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007652:	f7fa f905 	bl	8001860 <HAL_GetTick>
 8007656:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007658:	e00d      	b.n	8007676 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800765a:	f7fa f901 	bl	8001860 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007668:	d905      	bls.n	8007676 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2203      	movs	r2, #3
 8007672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <RTC_EnterInitMode+0x5c>
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	2b03      	cmp	r3, #3
 8007688:	d1e7      	bne.n	800765a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800768a:	7bfb      	ldrb	r3, [r7, #15]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80076a0:	4b1a      	ldr	r3, [pc, #104]	; (800770c <RTC_ExitInitMode+0x78>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	4a19      	ldr	r2, [pc, #100]	; (800770c <RTC_ExitInitMode+0x78>)
 80076a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076aa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80076ac:	4b17      	ldr	r3, [pc, #92]	; (800770c <RTC_ExitInitMode+0x78>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10c      	bne.n	80076d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff ff92 	bl	80075e2 <HAL_RTC_WaitForSynchro>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01e      	beq.n	8007702 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2203      	movs	r2, #3
 80076c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	73fb      	strb	r3, [r7, #15]
 80076d0:	e017      	b.n	8007702 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80076d2:	4b0e      	ldr	r3, [pc, #56]	; (800770c <RTC_ExitInitMode+0x78>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	4a0d      	ldr	r2, [pc, #52]	; (800770c <RTC_ExitInitMode+0x78>)
 80076d8:	f023 0320 	bic.w	r3, r3, #32
 80076dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff ff7f 	bl	80075e2 <HAL_RTC_WaitForSynchro>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2203      	movs	r2, #3
 80076ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80076f6:	4b05      	ldr	r3, [pc, #20]	; (800770c <RTC_ExitInitMode+0x78>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	4a04      	ldr	r2, [pc, #16]	; (800770c <RTC_ExitInitMode+0x78>)
 80076fc:	f043 0320 	orr.w	r3, r3, #32
 8007700:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007702:	7bfb      	ldrb	r3, [r7, #15]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40002800 	.word	0x40002800

08007710 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007722:	e005      	b.n	8007730 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800772a:	7afb      	ldrb	r3, [r7, #11]
 800772c:	3b0a      	subs	r3, #10
 800772e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007730:	7afb      	ldrb	r3, [r7, #11]
 8007732:	2b09      	cmp	r3, #9
 8007734:	d8f6      	bhi.n	8007724 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	b2da      	uxtb	r2, r3
 800773e:	7afb      	ldrb	r3, [r7, #11]
 8007740:	4313      	orrs	r3, r2
 8007742:	b2db      	uxtb	r3, r3
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	; 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e078      	b.n	8007854 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d105      	bne.n	800777a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7f9 fd59 	bl	800122c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2203      	movs	r2, #3
 800777e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f86a 	bl	800785c <HAL_SD_InitCard>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e060      	b.n	8007854 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007792:	f107 0308 	add.w	r3, r7, #8
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fdc7 	bl	800832c <HAL_SD_GetCardStatus>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e055      	b.n	8007854 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80077a8:	7e3b      	ldrb	r3, [r7, #24]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80077ae:	7e7b      	ldrb	r3, [r7, #25]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d10a      	bne.n	80077d2 <HAL_SD_Init+0x82>
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <HAL_SD_Init+0x78>
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80077d0:	e00b      	b.n	80077ea <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d104      	bne.n	80077e4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80077e2:	e002      	b.n	80077ea <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fe7d 	bl	80084f0 <HAL_SD_ConfigWideBusOperation>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e029      	b.n	8007854 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007800:	f7fa f82e 	bl	8001860 <HAL_GetTick>
 8007804:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007806:	e014      	b.n	8007832 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007808:	f7fa f82a 	bl	8001860 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007816:	d10c      	bne.n	8007832 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e010      	b.n	8007854 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 ff70 	bl	8008718 <HAL_SD_GetCardState>
 8007838:	4603      	mov	r3, r0
 800783a:	2b04      	cmp	r3, #4
 800783c:	d1e4      	bne.n	8007808 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3728      	adds	r7, #40	; 0x28
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800785c:	b5b0      	push	{r4, r5, r7, lr}
 800785e:	b090      	sub	sp, #64	; 0x40
 8007860:	af04      	add	r7, sp, #16
 8007862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007868:	2300      	movs	r3, #0
 800786a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007870:	2300      	movs	r3, #0
 8007872:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007874:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007878:	f7fe fafe 	bl	8005e78 <HAL_RCCEx_GetPeriphCLKFreq>
 800787c:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d109      	bne.n	8007898 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e08b      	b.n	80079b0 <HAL_SD_InitCard+0x154>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	0a1b      	lsrs	r3, r3, #8
 800789c:	4a46      	ldr	r2, [pc, #280]	; (80079b8 <HAL_SD_InitCard+0x15c>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	091b      	lsrs	r3, r3, #4
 80078a4:	61fb      	str	r3, [r7, #28]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	623b      	str	r3, [r7, #32]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d107      	bne.n	80078c4 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0210 	orr.w	r2, r2, #16
 80078c2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681d      	ldr	r5, [r3, #0]
 80078c8:	466c      	mov	r4, sp
 80078ca:	f107 0318 	add.w	r3, r7, #24
 80078ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078d6:	f107 030c 	add.w	r3, r7, #12
 80078da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078dc:	4628      	mov	r0, r5
 80078de:	f002 f98f 	bl	8009c00 <SDMMC_Init>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 80078e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <HAL_SD_InitCard+0x98>
  {
    return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e05d      	b.n	80079b0 <HAL_SD_InitCard+0x154>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f002 f9c9 	bl	8009c90 <SDMMC_PowerState_ON>
 80078fe:	4603      	mov	r3, r0
 8007900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8007904:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <HAL_SD_InitCard+0xb4>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e04f      	b.n	80079b0 <HAL_SD_InitCard+0x154>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007916:	fbb2 f3f3 	udiv	r3, r2, r3
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800791c:	4a27      	ldr	r2, [pc, #156]	; (80079bc <HAL_SD_InitCard+0x160>)
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	3301      	adds	r3, #1
 8007926:	4618      	mov	r0, r3
 8007928:	f7f9 ffa6 	bl	8001878 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 ffd1 	bl	80088d4 <SD_PowerON>
 8007932:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <HAL_SD_InitCard+0xf6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e02e      	b.n	80079b0 <HAL_SD_InitCard+0x154>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 ff00 	bl	8008758 <SD_InitCard>
 8007958:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <HAL_SD_InitCard+0x11c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e01b      	b.n	80079b0 <HAL_SD_InitCard+0x154>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007980:	4618      	mov	r0, r3
 8007982:	f002 fa1b 	bl	8009dbc <SDMMC_CmdBlockLength>
 8007986:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00f      	beq.n	80079ae <HAL_SD_InitCard+0x152>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a0b      	ldr	r2, [pc, #44]	; (80079c0 <HAL_SD_InitCard+0x164>)
 8007994:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <HAL_SD_InitCard+0x154>
  }

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3730      	adds	r7, #48	; 0x30
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bdb0      	pop	{r4, r5, r7, pc}
 80079b8:	014f8b59 	.word	0x014f8b59
 80079bc:	00012110 	.word	0x00012110
 80079c0:	1fe00fff 	.word	0x1fe00fff

080079c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08c      	sub	sp, #48	; 0x30
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d107      	bne.n	80079ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e08d      	b.n	8007b08 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	f040 8086 	bne.w	8007b06 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	441a      	add	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d907      	bls.n	8007a1e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e074      	b.n	8007b08 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2203      	movs	r2, #3
 8007a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	025a      	lsls	r2, r3, #9
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d002      	beq.n	8007a4a <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	025b      	lsls	r3, r3, #9
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	025b      	lsls	r3, r3, #9
 8007a54:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a56:	2390      	movs	r3, #144	; 0x90
 8007a58:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f107 0210 	add.w	r2, r7, #16
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f002 f977 	bl	8009d64 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a84:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2201      	movs	r2, #1
 8007a94:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d90a      	bls.n	8007ab2 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2282      	movs	r2, #130	; 0x82
 8007aa0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f002 f9cd 	bl	8009e48 <SDMMC_CmdReadMultiBlock>
 8007aae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007ab0:	e009      	b.n	8007ac6 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2281      	movs	r2, #129	; 0x81
 8007ab6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f002 f99f 	bl	8009e02 <SDMMC_CmdReadSingleBlock>
 8007ac4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d012      	beq.n	8007af2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a0f      	ldr	r2, [pc, #60]	; (8007b10 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	431a      	orrs	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e00a      	b.n	8007b08 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007b00:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	e000      	b.n	8007b08 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007b06:	2302      	movs	r3, #2
  }
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3730      	adds	r7, #48	; 0x30
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	1fe00fff 	.word	0x1fe00fff

08007b14 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08c      	sub	sp, #48	; 0x30
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e08d      	b.n	8007c58 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	f040 8086 	bne.w	8007c56 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	441a      	add	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d907      	bls.n	8007b6e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e074      	b.n	8007c58 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2203      	movs	r2, #3
 8007b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	025a      	lsls	r2, r3, #9
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d002      	beq.n	8007b9a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	025b      	lsls	r3, r3, #9
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	025b      	lsls	r3, r3, #9
 8007ba4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ba6:	2390      	movs	r3, #144	; 0x90
 8007ba8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f107 0210 	add.w	r2, r7, #16
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f002 f8cf 	bl	8009d64 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bd4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2201      	movs	r2, #1
 8007be4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d90a      	bls.n	8007c02 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	22a0      	movs	r2, #160	; 0xa0
 8007bf0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f002 f96b 	bl	8009ed4 <SDMMC_CmdWriteMultiBlock>
 8007bfe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007c00:	e009      	b.n	8007c16 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2290      	movs	r2, #144	; 0x90
 8007c06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f002 f93d 	bl	8009e8e <SDMMC_CmdWriteSingleBlock>
 8007c14:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d012      	beq.n	8007c42 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a0f      	ldr	r2, [pc, #60]	; (8007c60 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e00a      	b.n	8007c58 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007c50:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	e000      	b.n	8007c58 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007c56:	2302      	movs	r3, #2
  }
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3730      	adds	r7, #48	; 0x30
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	1fe00fff 	.word	0x1fe00fff

08007c64 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <HAL_SD_IRQHandler+0x2e>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 f98c 	bl	8008fa8 <SD_Read_IT>
 8007c90:	e199      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80ae 	beq.w	8007dfe <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007cba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007cbe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007cce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cde:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d038      	beq.n	8007d5c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d104      	bne.n	8007cfe <HAL_SD_IRQHandler+0x9a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d011      	beq.n	8007d22 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f002 f90a 	bl	8009f1c <SDMMC_CmdStopTransfer>
 8007d08:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f957 	bl	8007fd0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4aa0      	ldr	r2, [pc, #640]	; (8007fa8 <HAL_SD_IRQHandler+0x344>)
 8007d28:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d104      	bne.n	8007d4c <HAL_SD_IRQHandler+0xe8>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f003 ffe5 	bl	800bd1c <HAL_SD_RxCpltCallback>
 8007d52:	e138      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f003 ffd7 	bl	800bd08 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007d5a:	e134      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 812f 	beq.w	8007fc6 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2200      	movs	r2, #0
 8007d76:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d104      	bne.n	8007d94 <HAL_SD_IRQHandler+0x130>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d011      	beq.n	8007db8 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f002 f8bf 	bl	8009f1c <SDMMC_CmdStopTransfer>
 8007d9e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	431a      	orrs	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f90c 	bl	8007fd0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f003 0310 	and.w	r3, r3, #16
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <HAL_SD_IRQHandler+0x176>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f003 ff94 	bl	800bd08 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d105      	bne.n	8007df6 <HAL_SD_IRQHandler+0x192>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80e8 	beq.w	8007fc6 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f003 ff90 	bl	800bd1c <HAL_SD_RxCpltCallback>
}
 8007dfc:	e0e3      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <HAL_SD_IRQHandler+0x1ba>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 f917 	bl	800904a <SD_Write_IT>
 8007e1c:	e0d3      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e24:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 809d 	beq.w	8007f68 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	f043 0202 	orr.w	r2, r3, #2
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4e:	f003 0308 	and.w	r3, r3, #8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	f043 0208 	orr.w	r2, r3, #8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	f043 0220 	orr.w	r2, r3, #32
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d005      	beq.n	8007e96 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	f043 0210 	orr.w	r2, r3, #16
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a43      	ldr	r2, [pc, #268]	; (8007fa8 <HAL_SD_IRQHandler+0x344>)
 8007e9c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007eac:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ebc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ecc:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007edc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f002 f81a 	bl	8009f1c <SDMMC_CmdStopTransfer>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f02:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f0c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f852 	bl	8007fd0 <HAL_SD_ErrorCallback>
}
 8007f2c:	e04b      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d046      	beq.n	8007fc6 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d042      	beq.n	8007fc6 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007f4e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2200      	movs	r2, #0
 8007f56:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f835 	bl	8007fd0 <HAL_SD_ErrorCallback>
}
 8007f66:	e02e      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d027      	beq.n	8007fc6 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f86:	f003 0304 	and.w	r3, r3, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10e      	bne.n	8007fac <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f8d4 	bl	8009146 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8007f9e:	e012      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 f8bc 	bl	800911e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8007fa6:	e00e      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
 8007fa8:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 f8bb 	bl	8009132 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8007fbc:	e003      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 f8a3 	bl	800910a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8007fc4:	e7ff      	b.n	8007fc6 <HAL_SD_IRQHandler+0x362>
 8007fc6:	bf00      	nop
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop

08007fd0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff2:	0f9b      	lsrs	r3, r3, #30
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffe:	0e9b      	lsrs	r3, r3, #26
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	b2da      	uxtb	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008010:	0e1b      	lsrs	r3, r3, #24
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	b2da      	uxtb	r2, r3
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008022:	0c1b      	lsrs	r3, r3, #16
 8008024:	b2da      	uxtb	r2, r3
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800802e:	0a1b      	lsrs	r3, r3, #8
 8008030:	b2da      	uxtb	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803a:	b2da      	uxtb	r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008044:	0d1b      	lsrs	r3, r3, #20
 8008046:	b29a      	uxth	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008050:	0c1b      	lsrs	r3, r3, #16
 8008052:	b2db      	uxtb	r3, r3
 8008054:	f003 030f 	and.w	r3, r3, #15
 8008058:	b2da      	uxtb	r2, r3
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008062:	0bdb      	lsrs	r3, r3, #15
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008074:	0b9b      	lsrs	r3, r3, #14
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	b2da      	uxtb	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008086:	0b5b      	lsrs	r3, r3, #13
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	b2da      	uxtb	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008098:	0b1b      	lsrs	r3, r3, #12
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2200      	movs	r2, #0
 80080aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d163      	bne.n	800817c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b8:	009a      	lsls	r2, r3, #2
 80080ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80080be:	4013      	ands	r3, r2
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80080c4:	0f92      	lsrs	r2, r2, #30
 80080c6:	431a      	orrs	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d0:	0edb      	lsrs	r3, r3, #27
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080e2:	0e1b      	lsrs	r3, r3, #24
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080f4:	0d5b      	lsrs	r3, r3, #21
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008106:	0c9b      	lsrs	r3, r3, #18
 8008108:	b2db      	uxtb	r3, r3
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	b2da      	uxtb	r2, r3
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008118:	0bdb      	lsrs	r3, r3, #15
 800811a:	b2db      	uxtb	r3, r3
 800811c:	f003 0307 	and.w	r3, r3, #7
 8008120:	b2da      	uxtb	r2, r3
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	7e1b      	ldrb	r3, [r3, #24]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	3302      	adds	r3, #2
 800813c:	2201      	movs	r2, #1
 800813e:	fa02 f303 	lsl.w	r3, r2, r3
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008146:	fb02 f203 	mul.w	r2, r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	7a1b      	ldrb	r3, [r3, #8]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 030f 	and.w	r3, r3, #15
 8008158:	2201      	movs	r2, #1
 800815a:	409a      	lsls	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008168:	0a52      	lsrs	r2, r2, #9
 800816a:	fb02 f203 	mul.w	r2, r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008178:	659a      	str	r2, [r3, #88]	; 0x58
 800817a:	e031      	b.n	80081e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008180:	2b01      	cmp	r3, #1
 8008182:	d11d      	bne.n	80081c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008188:	041b      	lsls	r3, r3, #16
 800818a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008192:	0c1b      	lsrs	r3, r3, #16
 8008194:	431a      	orrs	r2, r3
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	3301      	adds	r3, #1
 80081a0:	029a      	lsls	r2, r3, #10
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	659a      	str	r2, [r3, #88]	; 0x58
 80081be:	e00f      	b.n	80081e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a58      	ldr	r2, [pc, #352]	; (8008328 <HAL_SD_GetCardCSD+0x344>)
 80081c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e09d      	b.n	800831c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e4:	0b9b      	lsrs	r3, r3, #14
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081f6:	09db      	lsrs	r3, r3, #7
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800820e:	b2da      	uxtb	r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008218:	0fdb      	lsrs	r3, r3, #31
 800821a:	b2da      	uxtb	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008224:	0f5b      	lsrs	r3, r3, #29
 8008226:	b2db      	uxtb	r3, r3
 8008228:	f003 0303 	and.w	r3, r3, #3
 800822c:	b2da      	uxtb	r2, r3
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008236:	0e9b      	lsrs	r3, r3, #26
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	b2da      	uxtb	r2, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008248:	0d9b      	lsrs	r3, r3, #22
 800824a:	b2db      	uxtb	r3, r3
 800824c:	f003 030f 	and.w	r3, r3, #15
 8008250:	b2da      	uxtb	r2, r3
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800825a:	0d5b      	lsrs	r3, r3, #21
 800825c:	b2db      	uxtb	r3, r3
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	b2da      	uxtb	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008276:	0c1b      	lsrs	r3, r3, #16
 8008278:	b2db      	uxtb	r3, r3
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	b2da      	uxtb	r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828a:	0bdb      	lsrs	r3, r3, #15
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	b2da      	uxtb	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829e:	0b9b      	lsrs	r3, r3, #14
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b2:	0b5b      	lsrs	r3, r3, #13
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c6:	0b1b      	lsrs	r3, r3, #12
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082da:	0a9b      	lsrs	r3, r3, #10
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ee:	0a1b      	lsrs	r3, r3, #8
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008302:	085b      	lsrs	r3, r3, #1
 8008304:	b2db      	uxtb	r3, r3
 8008306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800830a:	b2da      	uxtb	r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	1fe00fff 	.word	0x1fe00fff

0800832c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b094      	sub	sp, #80	; 0x50
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800833c:	f107 0308 	add.w	r3, r7, #8
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fbd2 	bl	8008aec <SD_SendSDStatus>
 8008348:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800834a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800834c:	2b00      	cmp	r3, #0
 800834e:	d011      	beq.n	8008374 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a4f      	ldr	r2, [pc, #316]	; (8008494 <HAL_SD_GetCardStatus+0x168>)
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008372:	e070      	b.n	8008456 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	099b      	lsrs	r3, r3, #6
 8008378:	b2db      	uxtb	r3, r3
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	b2da      	uxtb	r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	095b      	lsrs	r3, r3, #5
 8008388:	b2db      	uxtb	r3, r3
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	b2da      	uxtb	r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	0a1b      	lsrs	r3, r3, #8
 8008398:	b29b      	uxth	r3, r3
 800839a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800839e:	b29a      	uxth	r2, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	0e1b      	lsrs	r3, r3, #24
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	4313      	orrs	r3, r2
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	061a      	lsls	r2, r3, #24
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	021b      	lsls	r3, r3, #8
 80083b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083ba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	0a1b      	lsrs	r3, r3, #8
 80083c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083c4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	0e1b      	lsrs	r3, r3, #24
 80083ca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	0a1b      	lsrs	r3, r3, #8
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	0d1b      	lsrs	r3, r3, #20
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	0c1b      	lsrs	r3, r3, #16
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	b29b      	uxth	r3, r3
 8008402:	b2db      	uxtb	r3, r3
 8008404:	b29b      	uxth	r3, r3
 8008406:	4313      	orrs	r3, r2
 8008408:	b29a      	uxth	r2, r3
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	0a9b      	lsrs	r3, r3, #10
 8008412:	b2db      	uxtb	r3, r3
 8008414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008418:	b2da      	uxtb	r2, r3
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	0a1b      	lsrs	r3, r3, #8
 8008422:	b2db      	uxtb	r3, r3
 8008424:	f003 0303 	and.w	r3, r3, #3
 8008428:	b2da      	uxtb	r2, r3
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	091b      	lsrs	r3, r3, #4
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f003 030f 	and.w	r3, r3, #15
 8008438:	b2da      	uxtb	r2, r3
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f003 030f 	and.w	r3, r3, #15
 8008446:	b2da      	uxtb	r2, r3
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	0e1b      	lsrs	r3, r3, #24
 8008450:	b2da      	uxtb	r2, r3
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800845e:	4618      	mov	r0, r3
 8008460:	f001 fcac 	bl	8009dbc <SDMMC_CmdBlockLength>
 8008464:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00d      	beq.n	8008488 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a08      	ldr	r2, [pc, #32]	; (8008494 <HAL_SD_GetCardStatus+0x168>)
 8008472:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008478:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008488:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800848c:	4618      	mov	r0, r3
 800848e:	3750      	adds	r7, #80	; 0x50
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	1fe00fff 	.word	0x1fe00fff

08008498 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80084f0:	b5b0      	push	{r4, r5, r7, lr}
 80084f2:	b090      	sub	sp, #64	; 0x40
 80084f4:	af04      	add	r7, sp, #16
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2203      	movs	r2, #3
 8008504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850c:	2b03      	cmp	r3, #3
 800850e:	d02e      	beq.n	800856e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008516:	d106      	bne.n	8008526 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38
 8008524:	e029      	b.n	800857a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800852c:	d10a      	bne.n	8008544 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fbd4 	bl	8008cdc <SD_WideBus_Enable>
 8008534:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	639a      	str	r2, [r3, #56]	; 0x38
 8008542:	e01a      	b.n	800857a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10a      	bne.n	8008560 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fc11 	bl	8008d72 <SD_WideBus_Disable>
 8008550:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	431a      	orrs	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
 800855e:	e00c      	b.n	800857a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	639a      	str	r2, [r3, #56]	; 0x38
 800856c:	e005      	b.n	800857a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	2b00      	cmp	r3, #0
 8008580:	d007      	beq.n	8008592 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a60      	ldr	r2, [pc, #384]	; (8008708 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008588:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008590:	e097      	b.n	80086c2 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008592:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008596:	f7fd fc6f 	bl	8005e78 <HAL_RCCEx_GetPeriphCLKFreq>
 800859a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8086 	beq.w	80086b0 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	695a      	ldr	r2, [r3, #20]
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	4952      	ldr	r1, [pc, #328]	; (800870c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80085c2:	fba1 1303 	umull	r1, r3, r1, r3
 80085c6:	0e1b      	lsrs	r3, r3, #24
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d303      	bcc.n	80085d4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	61fb      	str	r3, [r7, #28]
 80085d2:	e05a      	b.n	800868a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085dc:	d103      	bne.n	80085e6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	61fb      	str	r3, [r7, #28]
 80085e4:	e051      	b.n	800868a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ee:	d126      	bne.n	800863e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10e      	bne.n	8008616 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	4a45      	ldr	r2, [pc, #276]	; (8008710 <HAL_SD_ConfigWideBusOperation+0x220>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d906      	bls.n	800860e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	4a42      	ldr	r2, [pc, #264]	; (800870c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008604:	fba2 2303 	umull	r2, r3, r2, r3
 8008608:	0e5b      	lsrs	r3, r3, #25
 800860a:	61fb      	str	r3, [r7, #28]
 800860c:	e03d      	b.n	800868a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	61fb      	str	r3, [r7, #28]
 8008614:	e039      	b.n	800868a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008622:	4a3b      	ldr	r2, [pc, #236]	; (8008710 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d906      	bls.n	8008636 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	4a38      	ldr	r2, [pc, #224]	; (800870c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	0e5b      	lsrs	r3, r3, #25
 8008632:	61fb      	str	r3, [r7, #28]
 8008634:	e029      	b.n	800868a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	61fb      	str	r3, [r7, #28]
 800863c:	e025      	b.n	800868a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10e      	bne.n	8008664 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	4a32      	ldr	r2, [pc, #200]	; (8008714 <HAL_SD_ConfigWideBusOperation+0x224>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d906      	bls.n	800865c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	4a2e      	ldr	r2, [pc, #184]	; (800870c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	0e1b      	lsrs	r3, r3, #24
 8008658:	61fb      	str	r3, [r7, #28]
 800865a:	e016      	b.n	800868a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	61fb      	str	r3, [r7, #28]
 8008662:	e012      	b.n	800868a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008670:	4a28      	ldr	r2, [pc, #160]	; (8008714 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d906      	bls.n	8008684 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	4a24      	ldr	r2, [pc, #144]	; (800870c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800867a:	fba2 2303 	umull	r2, r3, r2, r3
 800867e:	0e1b      	lsrs	r3, r3, #24
 8008680:	61fb      	str	r3, [r7, #28]
 8008682:	e002      	b.n	800868a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681d      	ldr	r5, [r3, #0]
 8008694:	466c      	mov	r4, sp
 8008696:	f107 0318 	add.w	r3, r7, #24
 800869a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800869e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086a2:	f107 030c 	add.w	r3, r7, #12
 80086a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086a8:	4628      	mov	r0, r5
 80086aa:	f001 faa9 	bl	8009c00 <SDMMC_Init>
 80086ae:	e008      	b.n	80086c2 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 fb76 	bl	8009dbc <SDMMC_CmdBlockLength>
 80086d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00c      	beq.n	80086f2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a0a      	ldr	r2, [pc, #40]	; (8008708 <HAL_SD_ConfigWideBusOperation+0x218>)
 80086de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	431a      	orrs	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80086fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3730      	adds	r7, #48	; 0x30
 8008702:	46bd      	mov	sp, r7
 8008704:	bdb0      	pop	{r4, r5, r7, pc}
 8008706:	bf00      	nop
 8008708:	1fe00fff 	.word	0x1fe00fff
 800870c:	55e63b89 	.word	0x55e63b89
 8008710:	02faf080 	.word	0x02faf080
 8008714:	017d7840 	.word	0x017d7840

08008718 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008724:	f107 030c 	add.w	r3, r7, #12
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 faae 	bl	8008c8c <SD_SendStatus>
 8008730:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d005      	beq.n	8008744 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	0a5b      	lsrs	r3, r3, #9
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800874e:	693b      	ldr	r3, [r7, #16]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b090      	sub	sp, #64	; 0x40
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008760:	2301      	movs	r3, #1
 8008762:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f001 faa3 	bl	8009cb4 <SDMMC_GetPowerState>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008774:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008778:	e0a7      	b.n	80088ca <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877e:	2b03      	cmp	r3, #3
 8008780:	d02e      	beq.n	80087e0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f001 fce8 	bl	800a15c <SDMMC_CmdSendCID>
 800878c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800878e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <SD_InitCard+0x40>
    {
      return errorstate;
 8008794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008796:	e098      	b.n	80088ca <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2100      	movs	r1, #0
 800879e:	4618      	mov	r0, r3
 80087a0:	f001 facd 	bl	8009d3e <SDMMC_GetResponse>
 80087a4:	4602      	mov	r2, r0
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2104      	movs	r1, #4
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 fac4 	bl	8009d3e <SDMMC_GetResponse>
 80087b6:	4602      	mov	r2, r0
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2108      	movs	r1, #8
 80087c2:	4618      	mov	r0, r3
 80087c4:	f001 fabb 	bl	8009d3e <SDMMC_GetResponse>
 80087c8:	4602      	mov	r2, r0
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	210c      	movs	r1, #12
 80087d4:	4618      	mov	r0, r3
 80087d6:	f001 fab2 	bl	8009d3e <SDMMC_GetResponse>
 80087da:	4602      	mov	r2, r0
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d00d      	beq.n	8008804 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f107 020e 	add.w	r2, r7, #14
 80087f0:	4611      	mov	r1, r2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 fcf1 	bl	800a1da <SDMMC_CmdSetRelAdd>
 80087f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80087fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <SD_InitCard+0xac>
    {
      return errorstate;
 8008800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008802:	e062      	b.n	80088ca <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008808:	2b03      	cmp	r3, #3
 800880a:	d036      	beq.n	800887a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800880c:	89fb      	ldrh	r3, [r7, #14]
 800880e:	461a      	mov	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800881c:	041b      	lsls	r3, r3, #16
 800881e:	4619      	mov	r1, r3
 8008820:	4610      	mov	r0, r2
 8008822:	f001 fcba 	bl	800a19a <SDMMC_CmdSendCSD>
 8008826:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <SD_InitCard+0xda>
    {
      return errorstate;
 800882e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008830:	e04b      	b.n	80088ca <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f001 fa80 	bl	8009d3e <SDMMC_GetResponse>
 800883e:	4602      	mov	r2, r0
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2104      	movs	r1, #4
 800884a:	4618      	mov	r0, r3
 800884c:	f001 fa77 	bl	8009d3e <SDMMC_GetResponse>
 8008850:	4602      	mov	r2, r0
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2108      	movs	r1, #8
 800885c:	4618      	mov	r0, r3
 800885e:	f001 fa6e 	bl	8009d3e <SDMMC_GetResponse>
 8008862:	4602      	mov	r2, r0
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	210c      	movs	r1, #12
 800886e:	4618      	mov	r0, r3
 8008870:	f001 fa65 	bl	8009d3e <SDMMC_GetResponse>
 8008874:	4602      	mov	r2, r0
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2104      	movs	r1, #4
 8008880:	4618      	mov	r0, r3
 8008882:	f001 fa5c 	bl	8009d3e <SDMMC_GetResponse>
 8008886:	4603      	mov	r3, r0
 8008888:	0d1a      	lsrs	r2, r3, #20
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800888e:	f107 0310 	add.w	r3, r7, #16
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff fba5 	bl	8007fe4 <HAL_SD_GetCardCSD>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088a4:	e011      	b.n	80088ca <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6819      	ldr	r1, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ae:	041b      	lsls	r3, r3, #16
 80088b0:	461a      	mov	r2, r3
 80088b2:	f04f 0300 	mov.w	r3, #0
 80088b6:	4608      	mov	r0, r1
 80088b8:	f001 fb66 	bl	8009f88 <SDMMC_CmdSelDesel>
 80088bc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80088be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <SD_InitCard+0x170>
  {
    return errorstate;
 80088c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c6:	e000      	b.n	80088ca <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3740      	adds	r7, #64	; 0x40
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61fb      	str	r3, [r7, #28]
 80088e4:	2300      	movs	r3, #0
 80088e6:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80088e8:	f7f8 ffba 	bl	8001860 <HAL_GetTick>
 80088ec:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 fb6c 	bl	8009fd0 <SDMMC_CmdGoIdleState>
 80088f8:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <SD_PowerON+0x30>
  {
    return errorstate;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	e0ed      	b.n	8008ae0 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4618      	mov	r0, r3
 800890a:	f001 fb7f 	bl	800a00c <SDMMC_CmdOperCond>
 800890e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f001 fb55 	bl	8009fd0 <SDMMC_CmdGoIdleState>
 8008926:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d004      	beq.n	8008938 <SD_PowerON+0x64>
    {
      return errorstate;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	e0d6      	b.n	8008ae0 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893c:	2b01      	cmp	r3, #1
 800893e:	d137      	bne.n	80089b0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fb80 	bl	800a04c <SDMMC_CmdAppCommand>
 800894c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d02d      	beq.n	80089b0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008958:	e0c2      	b.n	8008ae0 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2100      	movs	r1, #0
 8008960:	4618      	mov	r0, r3
 8008962:	f001 fb73 	bl	800a04c <SDMMC_CmdAppCommand>
 8008966:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <SD_PowerON+0x9e>
    {
      return errorstate;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	e0b6      	b.n	8008ae0 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	495c      	ldr	r1, [pc, #368]	; (8008ae8 <SD_PowerON+0x214>)
 8008978:	4618      	mov	r0, r3
 800897a:	f001 fb8a 	bl	800a092 <SDMMC_CmdAppOperCommand>
 800897e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008986:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800898a:	e0a9      	b.n	8008ae0 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2100      	movs	r1, #0
 8008992:	4618      	mov	r0, r3
 8008994:	f001 f9d3 	bl	8009d3e <SDMMC_GetResponse>
 8008998:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	0fdb      	lsrs	r3, r3, #31
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d101      	bne.n	80089a6 <SD_PowerON+0xd2>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <SD_PowerON+0xd4>
 80089a6:	2300      	movs	r3, #0
 80089a8:	61bb      	str	r3, [r7, #24]

    count++;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3301      	adds	r3, #1
 80089ae:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d802      	bhi.n	80089c0 <SD_PowerON+0xec>
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0cc      	beq.n	800895a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d902      	bls.n	80089d0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80089ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089ce:	e087      	b.n	8008ae0 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d07e      	beq.n	8008ad8 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d17a      	bne.n	8008ade <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d075      	beq.n	8008ade <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089f8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f042 0208 	orr.w	r2, r2, #8
 8008a08:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fc4a 	bl	800a2a8 <SDMMC_CmdVoltageSwitch>
 8008a14:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00c      	beq.n	8008a36 <SD_PowerON+0x162>
        {
          return errorstate;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	e05f      	b.n	8008ae0 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a20:	f7f8 ff1e 	bl	8001860 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2e:	d102      	bne.n	8008a36 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a34:	e054      	b.n	8008ae0 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a44:	d1ec      	bne.n	8008a20 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008a4e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a5e:	d002      	beq.n	8008a66 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008a60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a64:	e03c      	b.n	8008ae0 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008a66:	2001      	movs	r0, #1
 8008a68:	f000 fb44 	bl	80090f4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0204 	orr.w	r2, r2, #4
 8008a7a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008a7c:	e00a      	b.n	8008a94 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a7e:	f7f8 feef 	bl	8001860 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d102      	bne.n	8008a94 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008a8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a92:	e025      	b.n	8008ae0 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aa2:	d1ec      	bne.n	8008a7e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008abc:	d102      	bne.n	8008ac4 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008abe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ac2:	e00d      	b.n	8008ae0 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2213      	movs	r2, #19
 8008aca:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad4:	639a      	str	r2, [r3, #56]	; 0x38
 8008ad6:	e002      	b.n	8008ade <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3720      	adds	r7, #32
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	c1100000 	.word	0xc1100000

08008aec <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08c      	sub	sp, #48	; 0x30
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008af6:	f7f8 feb3 	bl	8001860 <HAL_GetTick>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f001 f919 	bl	8009d3e <SDMMC_GetResponse>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b16:	d102      	bne.n	8008b1e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b1c:	e0b0      	b.n	8008c80 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2140      	movs	r1, #64	; 0x40
 8008b24:	4618      	mov	r0, r3
 8008b26:	f001 f949 	bl	8009dbc <SDMMC_CmdBlockLength>
 8008b2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	e0a0      	b.n	8008c80 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b46:	041b      	lsls	r3, r3, #16
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f001 fa7e 	bl	800a04c <SDMMC_CmdAppCommand>
 8008b50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	e08d      	b.n	8008c80 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b64:	f04f 33ff 	mov.w	r3, #4294967295
 8008b68:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008b6a:	2340      	movs	r3, #64	; 0x40
 8008b6c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008b6e:	2360      	movs	r3, #96	; 0x60
 8008b70:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b72:	2302      	movs	r3, #2
 8008b74:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f107 0208 	add.w	r2, r7, #8
 8008b86:	4611      	mov	r1, r2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 f8eb 	bl	8009d64 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f001 fb66 	bl	800a264 <SDMMC_CmdStatusRegister>
 8008b98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d02b      	beq.n	8008bf8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	e069      	b.n	8008c80 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d013      	beq.n	8008be2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008bba:	2300      	movs	r3, #0
 8008bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bbe:	e00d      	b.n	8008bdc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f001 f845 	bl	8009c54 <SDMMC_ReadFIFO>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	601a      	str	r2, [r3, #0]
        pData++;
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	3301      	adds	r3, #1
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	2b07      	cmp	r3, #7
 8008be0:	d9ee      	bls.n	8008bc0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008be2:	f7f8 fe3d 	bl	8001860 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf0:	d102      	bne.n	8008bf8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008bf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bf6:	e043      	b.n	8008c80 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0d2      	beq.n	8008bac <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0c:	f003 0308 	and.w	r3, r3, #8
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008c14:	2308      	movs	r3, #8
 8008c16:	e033      	b.n	8008c80 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c26:	2302      	movs	r3, #2
 8008c28:	e02a      	b.n	8008c80 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c30:	f003 0320 	and.w	r3, r3, #32
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d017      	beq.n	8008c68 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008c38:	2320      	movs	r3, #32
 8008c3a:	e021      	b.n	8008c80 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f001 f807 	bl	8009c54 <SDMMC_ReadFIFO>
 8008c46:	4602      	mov	r2, r0
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	601a      	str	r2, [r3, #0]
    pData++;
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	3304      	adds	r3, #4
 8008c50:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c52:	f7f8 fe05 	bl	8001860 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c60:	d102      	bne.n	8008c68 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008c62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c66:	e00b      	b.n	8008c80 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e2      	bne.n	8008c3c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a03      	ldr	r2, [pc, #12]	; (8008c88 <SD_SendSDStatus+0x19c>)
 8008c7c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3730      	adds	r7, #48	; 0x30
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	18000f3a 	.word	0x18000f3a

08008c8c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008c9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ca0:	e018      	b.n	8008cd4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008caa:	041b      	lsls	r3, r3, #16
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f001 fab5 	bl	800a21e <SDMMC_CmdSendStatus>
 8008cb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	e009      	b.n	8008cd4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 f839 	bl	8009d3e <SDMMC_GetResponse>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 f823 	bl	8009d3e <SDMMC_GetResponse>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d02:	d102      	bne.n	8008d0a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d08:	e02f      	b.n	8008d6a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008d0a:	f107 030c 	add.w	r3, r7, #12
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f879 	bl	8008e08 <SD_FindSCR>
 8008d16:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	e023      	b.n	8008d6a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d01c      	beq.n	8008d66 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d34:	041b      	lsls	r3, r3, #16
 8008d36:	4619      	mov	r1, r3
 8008d38:	4610      	mov	r0, r2
 8008d3a:	f001 f987 	bl	800a04c <SDMMC_CmdAppCommand>
 8008d3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	e00f      	b.n	8008d6a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2102      	movs	r1, #2
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 f9be 	bl	800a0d2 <SDMMC_CmdBusWidth>
 8008d56:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	e003      	b.n	8008d6a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	e001      	b.n	8008d6a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3718      	adds	r7, #24
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b086      	sub	sp, #24
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2100      	movs	r1, #0
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 ffd8 	bl	8009d3e <SDMMC_GetResponse>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d98:	d102      	bne.n	8008da0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d9e:	e02f      	b.n	8008e00 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008da0:	f107 030c 	add.w	r3, r7, #12
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f82e 	bl	8008e08 <SD_FindSCR>
 8008dac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	e023      	b.n	8008e00 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d01c      	beq.n	8008dfc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dca:	041b      	lsls	r3, r3, #16
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f001 f93c 	bl	800a04c <SDMMC_CmdAppCommand>
 8008dd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	e00f      	b.n	8008e00 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2100      	movs	r1, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f001 f973 	bl	800a0d2 <SDMMC_CmdBusWidth>
 8008dec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	e003      	b.n	8008e00 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e001      	b.n	8008e00 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008dfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08e      	sub	sp, #56	; 0x38
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e12:	f7f8 fd25 	bl	8001860 <HAL_GetTick>
 8008e16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60bb      	str	r3, [r7, #8]
 8008e20:	2300      	movs	r3, #0
 8008e22:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2108      	movs	r1, #8
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 ffc4 	bl	8009dbc <SDMMC_CmdBlockLength>
 8008e34:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3e:	e0ad      	b.n	8008f9c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e48:	041b      	lsls	r3, r3, #16
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	f001 f8fd 	bl	800a04c <SDMMC_CmdAppCommand>
 8008e52:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	e09e      	b.n	8008f9c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e62:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008e64:	2308      	movs	r3, #8
 8008e66:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008e68:	2330      	movs	r3, #48	; 0x30
 8008e6a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f107 0210 	add.w	r2, r7, #16
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 ff6e 	bl	8009d64 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 f943 	bl	800a118 <SDMMC_CmdSendSCR>
 8008e92:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d027      	beq.n	8008eea <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	e07e      	b.n	8008f9c <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d113      	bne.n	8008ed4 <SD_FindSCR+0xcc>
 8008eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d110      	bne.n	8008ed4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fecc 	bl	8009c54 <SDMMC_ReadFIFO>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 fec5 	bl	8009c54 <SDMMC_ReadFIFO>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	60fb      	str	r3, [r7, #12]
      index++;
 8008ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ed4:	f7f8 fcc4 	bl	8001860 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee2:	d102      	bne.n	8008eea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ee4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ee8:	e058      	b.n	8008f9c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ef0:	f240 532a 	movw	r3, #1322	; 0x52a
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0d1      	beq.n	8008e9e <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f00:	f003 0308 	and.w	r3, r3, #8
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d005      	beq.n	8008f14 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2208      	movs	r2, #8
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f10:	2308      	movs	r3, #8
 8008f12:	e043      	b.n	8008f9c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d005      	beq.n	8008f2e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2202      	movs	r2, #2
 8008f28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	e036      	b.n	8008f9c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2220      	movs	r2, #32
 8008f42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008f44:	2320      	movs	r3, #32
 8008f46:	e029      	b.n	8008f9c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a15      	ldr	r2, [pc, #84]	; (8008fa4 <SD_FindSCR+0x19c>)
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	061a      	lsls	r2, r3, #24
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	021b      	lsls	r3, r3, #8
 8008f58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f5c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	0a1b      	lsrs	r3, r3, #8
 8008f62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f66:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	0e1b      	lsrs	r3, r3, #24
 8008f6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	601a      	str	r2, [r3, #0]
    scr++;
 8008f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f74:	3304      	adds	r3, #4
 8008f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	061a      	lsls	r2, r3, #24
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	021b      	lsls	r3, r3, #8
 8008f80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f84:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	0a1b      	lsrs	r3, r3, #8
 8008f8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008f8e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	0e1b      	lsrs	r3, r3, #24
 8008f94:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3738      	adds	r7, #56	; 0x38
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	18000f3a 	.word	0x18000f3a

08008fa8 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fba:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d03f      	beq.n	8009042 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	e033      	b.n	8009030 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 fe41 	bl	8009c54 <SDMMC_ReadFIFO>
 8008fd2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	0a1b      	lsrs	r3, r3, #8
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	0c1b      	lsrs	r3, r3, #16
 8009002:	b2da      	uxtb	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3301      	adds	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	3b01      	subs	r3, #1
 8009012:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	0e1b      	lsrs	r3, r3, #24
 8009018:	b2da      	uxtb	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3301      	adds	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	3b01      	subs	r3, #1
 8009028:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	3301      	adds	r3, #1
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2b07      	cmp	r3, #7
 8009034:	d9c8      	bls.n	8008fc8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009042:	bf00      	nop
 8009044:	3718      	adds	r7, #24
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b086      	sub	sp, #24
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d043      	beq.n	80090ec <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009064:	2300      	movs	r3, #0
 8009066:	617b      	str	r3, [r7, #20]
 8009068:	e037      	b.n	80090da <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	3b01      	subs	r3, #1
 800907a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	021a      	lsls	r2, r3, #8
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	4313      	orrs	r3, r2
 8009086:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	3301      	adds	r3, #1
 800908c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	3b01      	subs	r3, #1
 8009092:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	041a      	lsls	r2, r3, #16
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4313      	orrs	r3, r2
 800909e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3301      	adds	r3, #1
 80090a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	061a      	lsls	r2, r3, #24
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3301      	adds	r3, #1
 80090bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f107 0208 	add.w	r2, r7, #8
 80090cc:	4611      	mov	r1, r2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fdcd 	bl	8009c6e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	3301      	adds	r3, #1
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2b07      	cmp	r3, #7
 80090de:	d9c4      	bls.n	800906a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80090ec:	bf00      	nop
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009112:	bf00      	nop
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800911e:	b480      	push	{r7}
 8009120:	b083      	sub	sp, #12
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d101      	bne.n	800916c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e095      	b.n	8009298 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	2b00      	cmp	r3, #0
 8009172:	d108      	bne.n	8009186 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800917c:	d009      	beq.n	8009192 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	61da      	str	r2, [r3, #28]
 8009184:	e005      	b.n	8009192 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d106      	bne.n	80091b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7f8 f8d7 	bl	8001360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2202      	movs	r2, #2
 80091b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091d2:	d902      	bls.n	80091da <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e002      	b.n	80091e0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80091da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80091e8:	d007      	beq.n	80091fa <HAL_SPI_Init+0xa0>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091f2:	d002      	beq.n	80091fa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800920a:	431a      	orrs	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	431a      	orrs	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009228:	431a      	orrs	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923c:	ea42 0103 	orr.w	r1, r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	0c1b      	lsrs	r3, r3, #16
 8009256:	f003 0204 	and.w	r2, r3, #4
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	f003 0310 	and.w	r3, r3, #16
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009268:	f003 0308 	and.w	r3, r3, #8
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009276:	ea42 0103 	orr.w	r1, r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e049      	b.n	8009346 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d106      	bne.n	80092cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7f8 f932 	bl	8001530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	3304      	adds	r3, #4
 80092dc:	4619      	mov	r1, r3
 80092de:	4610      	mov	r0, r2
 80092e0:	f000 fab4 	bl	800984c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b01      	cmp	r3, #1
 8009362:	d001      	beq.n	8009368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e04f      	b.n	8009408 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0201 	orr.w	r2, r2, #1
 800937e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a23      	ldr	r2, [pc, #140]	; (8009414 <HAL_TIM_Base_Start_IT+0xc4>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d01d      	beq.n	80093c6 <HAL_TIM_Base_Start_IT+0x76>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009392:	d018      	beq.n	80093c6 <HAL_TIM_Base_Start_IT+0x76>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a1f      	ldr	r2, [pc, #124]	; (8009418 <HAL_TIM_Base_Start_IT+0xc8>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d013      	beq.n	80093c6 <HAL_TIM_Base_Start_IT+0x76>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a1e      	ldr	r2, [pc, #120]	; (800941c <HAL_TIM_Base_Start_IT+0xcc>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d00e      	beq.n	80093c6 <HAL_TIM_Base_Start_IT+0x76>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a1c      	ldr	r2, [pc, #112]	; (8009420 <HAL_TIM_Base_Start_IT+0xd0>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d009      	beq.n	80093c6 <HAL_TIM_Base_Start_IT+0x76>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a1b      	ldr	r2, [pc, #108]	; (8009424 <HAL_TIM_Base_Start_IT+0xd4>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d004      	beq.n	80093c6 <HAL_TIM_Base_Start_IT+0x76>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a19      	ldr	r2, [pc, #100]	; (8009428 <HAL_TIM_Base_Start_IT+0xd8>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d115      	bne.n	80093f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	4b17      	ldr	r3, [pc, #92]	; (800942c <HAL_TIM_Base_Start_IT+0xdc>)
 80093ce:	4013      	ands	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b06      	cmp	r3, #6
 80093d6:	d015      	beq.n	8009404 <HAL_TIM_Base_Start_IT+0xb4>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093de:	d011      	beq.n	8009404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f042 0201 	orr.w	r2, r2, #1
 80093ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093f0:	e008      	b.n	8009404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f042 0201 	orr.w	r2, r2, #1
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	e000      	b.n	8009406 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009404:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	40012c00 	.word	0x40012c00
 8009418:	40000400 	.word	0x40000400
 800941c:	40000800 	.word	0x40000800
 8009420:	40000c00 	.word	0x40000c00
 8009424:	40013400 	.word	0x40013400
 8009428:	40014000 	.word	0x40014000
 800942c:	00010007 	.word	0x00010007

08009430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b02      	cmp	r3, #2
 8009444:	d122      	bne.n	800948c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b02      	cmp	r3, #2
 8009452:	d11b      	bne.n	800948c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f06f 0202 	mvn.w	r2, #2
 800945c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f9cb 	bl	800980e <HAL_TIM_IC_CaptureCallback>
 8009478:	e005      	b.n	8009486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f9bd 	bl	80097fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f9ce 	bl	8009822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b04      	cmp	r3, #4
 8009498:	d122      	bne.n	80094e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d11b      	bne.n	80094e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0204 	mvn.w	r2, #4
 80094b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2202      	movs	r2, #2
 80094b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f9a1 	bl	800980e <HAL_TIM_IC_CaptureCallback>
 80094cc:	e005      	b.n	80094da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f993 	bl	80097fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f9a4 	bl	8009822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f003 0308 	and.w	r3, r3, #8
 80094ea:	2b08      	cmp	r3, #8
 80094ec:	d122      	bne.n	8009534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f003 0308 	and.w	r3, r3, #8
 80094f8:	2b08      	cmp	r3, #8
 80094fa:	d11b      	bne.n	8009534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f06f 0208 	mvn.w	r2, #8
 8009504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2204      	movs	r2, #4
 800950a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f003 0303 	and.w	r3, r3, #3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f977 	bl	800980e <HAL_TIM_IC_CaptureCallback>
 8009520:	e005      	b.n	800952e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f969 	bl	80097fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f97a 	bl	8009822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	f003 0310 	and.w	r3, r3, #16
 800953e:	2b10      	cmp	r3, #16
 8009540:	d122      	bne.n	8009588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f003 0310 	and.w	r3, r3, #16
 800954c:	2b10      	cmp	r3, #16
 800954e:	d11b      	bne.n	8009588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f06f 0210 	mvn.w	r2, #16
 8009558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2208      	movs	r2, #8
 800955e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f94d 	bl	800980e <HAL_TIM_IC_CaptureCallback>
 8009574:	e005      	b.n	8009582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f93f 	bl	80097fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f950 	bl	8009822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b01      	cmp	r3, #1
 8009594:	d10e      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d107      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f06f 0201 	mvn.w	r2, #1
 80095ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7f7 fc70 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095be:	2b80      	cmp	r3, #128	; 0x80
 80095c0:	d10e      	bne.n	80095e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095cc:	2b80      	cmp	r3, #128	; 0x80
 80095ce:	d107      	bne.n	80095e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fafc 	bl	8009bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ee:	d10e      	bne.n	800960e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095fa:	2b80      	cmp	r3, #128	; 0x80
 80095fc:	d107      	bne.n	800960e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 faef 	bl	8009bec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009618:	2b40      	cmp	r3, #64	; 0x40
 800961a:	d10e      	bne.n	800963a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009626:	2b40      	cmp	r3, #64	; 0x40
 8009628:	d107      	bne.n	800963a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f8fe 	bl	8009836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	f003 0320 	and.w	r3, r3, #32
 8009644:	2b20      	cmp	r3, #32
 8009646:	d10e      	bne.n	8009666 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b20      	cmp	r3, #32
 8009654:	d107      	bne.n	8009666 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f06f 0220 	mvn.w	r2, #32
 800965e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 faaf 	bl	8009bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009666:	bf00      	nop
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800967e:	2b01      	cmp	r3, #1
 8009680:	d101      	bne.n	8009686 <HAL_TIM_ConfigClockSource+0x18>
 8009682:	2302      	movs	r3, #2
 8009684:	e0b5      	b.n	80097f2 <HAL_TIM_ConfigClockSource+0x184>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2202      	movs	r2, #2
 8009692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80096a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096b0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c2:	d03e      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0xd4>
 80096c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c8:	f200 8087 	bhi.w	80097da <HAL_TIM_ConfigClockSource+0x16c>
 80096cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d0:	f000 8085 	beq.w	80097de <HAL_TIM_ConfigClockSource+0x170>
 80096d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d8:	d87f      	bhi.n	80097da <HAL_TIM_ConfigClockSource+0x16c>
 80096da:	2b70      	cmp	r3, #112	; 0x70
 80096dc:	d01a      	beq.n	8009714 <HAL_TIM_ConfigClockSource+0xa6>
 80096de:	2b70      	cmp	r3, #112	; 0x70
 80096e0:	d87b      	bhi.n	80097da <HAL_TIM_ConfigClockSource+0x16c>
 80096e2:	2b60      	cmp	r3, #96	; 0x60
 80096e4:	d050      	beq.n	8009788 <HAL_TIM_ConfigClockSource+0x11a>
 80096e6:	2b60      	cmp	r3, #96	; 0x60
 80096e8:	d877      	bhi.n	80097da <HAL_TIM_ConfigClockSource+0x16c>
 80096ea:	2b50      	cmp	r3, #80	; 0x50
 80096ec:	d03c      	beq.n	8009768 <HAL_TIM_ConfigClockSource+0xfa>
 80096ee:	2b50      	cmp	r3, #80	; 0x50
 80096f0:	d873      	bhi.n	80097da <HAL_TIM_ConfigClockSource+0x16c>
 80096f2:	2b40      	cmp	r3, #64	; 0x40
 80096f4:	d058      	beq.n	80097a8 <HAL_TIM_ConfigClockSource+0x13a>
 80096f6:	2b40      	cmp	r3, #64	; 0x40
 80096f8:	d86f      	bhi.n	80097da <HAL_TIM_ConfigClockSource+0x16c>
 80096fa:	2b30      	cmp	r3, #48	; 0x30
 80096fc:	d064      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x15a>
 80096fe:	2b30      	cmp	r3, #48	; 0x30
 8009700:	d86b      	bhi.n	80097da <HAL_TIM_ConfigClockSource+0x16c>
 8009702:	2b20      	cmp	r3, #32
 8009704:	d060      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x15a>
 8009706:	2b20      	cmp	r3, #32
 8009708:	d867      	bhi.n	80097da <HAL_TIM_ConfigClockSource+0x16c>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d05c      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x15a>
 800970e:	2b10      	cmp	r3, #16
 8009710:	d05a      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009712:	e062      	b.n	80097da <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6818      	ldr	r0, [r3, #0]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	6899      	ldr	r1, [r3, #8]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f000 f9a6 	bl	8009a74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009736:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	609a      	str	r2, [r3, #8]
      break;
 8009740:	e04e      	b.n	80097e0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6818      	ldr	r0, [r3, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	6899      	ldr	r1, [r3, #8]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f000 f98f 	bl	8009a74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009764:	609a      	str	r2, [r3, #8]
      break;
 8009766:	e03b      	b.n	80097e0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	6859      	ldr	r1, [r3, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	461a      	mov	r2, r3
 8009776:	f000 f903 	bl	8009980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2150      	movs	r1, #80	; 0x50
 8009780:	4618      	mov	r0, r3
 8009782:	f000 f95c 	bl	8009a3e <TIM_ITRx_SetConfig>
      break;
 8009786:	e02b      	b.n	80097e0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	6859      	ldr	r1, [r3, #4]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	461a      	mov	r2, r3
 8009796:	f000 f922 	bl	80099de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2160      	movs	r1, #96	; 0x60
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 f94c 	bl	8009a3e <TIM_ITRx_SetConfig>
      break;
 80097a6:	e01b      	b.n	80097e0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6818      	ldr	r0, [r3, #0]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	6859      	ldr	r1, [r3, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	461a      	mov	r2, r3
 80097b6:	f000 f8e3 	bl	8009980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2140      	movs	r1, #64	; 0x40
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 f93c 	bl	8009a3e <TIM_ITRx_SetConfig>
      break;
 80097c6:	e00b      	b.n	80097e0 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f000 f933 	bl	8009a3e <TIM_ITRx_SetConfig>
        break;
 80097d8:	e002      	b.n	80097e0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80097da:	bf00      	nop
 80097dc:	e000      	b.n	80097e0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80097de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b083      	sub	sp, #12
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009802:	bf00      	nop
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800982a:	bf00      	nop
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
	...

0800984c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a40      	ldr	r2, [pc, #256]	; (8009960 <TIM_Base_SetConfig+0x114>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d013      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800986a:	d00f      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a3d      	ldr	r2, [pc, #244]	; (8009964 <TIM_Base_SetConfig+0x118>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00b      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a3c      	ldr	r2, [pc, #240]	; (8009968 <TIM_Base_SetConfig+0x11c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d007      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a3b      	ldr	r2, [pc, #236]	; (800996c <TIM_Base_SetConfig+0x120>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d003      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a3a      	ldr	r2, [pc, #232]	; (8009970 <TIM_Base_SetConfig+0x124>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d108      	bne.n	800989e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	4313      	orrs	r3, r2
 800989c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a2f      	ldr	r2, [pc, #188]	; (8009960 <TIM_Base_SetConfig+0x114>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d01f      	beq.n	80098e6 <TIM_Base_SetConfig+0x9a>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ac:	d01b      	beq.n	80098e6 <TIM_Base_SetConfig+0x9a>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a2c      	ldr	r2, [pc, #176]	; (8009964 <TIM_Base_SetConfig+0x118>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d017      	beq.n	80098e6 <TIM_Base_SetConfig+0x9a>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a2b      	ldr	r2, [pc, #172]	; (8009968 <TIM_Base_SetConfig+0x11c>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d013      	beq.n	80098e6 <TIM_Base_SetConfig+0x9a>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a2a      	ldr	r2, [pc, #168]	; (800996c <TIM_Base_SetConfig+0x120>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d00f      	beq.n	80098e6 <TIM_Base_SetConfig+0x9a>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a29      	ldr	r2, [pc, #164]	; (8009970 <TIM_Base_SetConfig+0x124>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00b      	beq.n	80098e6 <TIM_Base_SetConfig+0x9a>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a28      	ldr	r2, [pc, #160]	; (8009974 <TIM_Base_SetConfig+0x128>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d007      	beq.n	80098e6 <TIM_Base_SetConfig+0x9a>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a27      	ldr	r2, [pc, #156]	; (8009978 <TIM_Base_SetConfig+0x12c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d003      	beq.n	80098e6 <TIM_Base_SetConfig+0x9a>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a26      	ldr	r2, [pc, #152]	; (800997c <TIM_Base_SetConfig+0x130>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d108      	bne.n	80098f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	4313      	orrs	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a10      	ldr	r2, [pc, #64]	; (8009960 <TIM_Base_SetConfig+0x114>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00f      	beq.n	8009944 <TIM_Base_SetConfig+0xf8>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a12      	ldr	r2, [pc, #72]	; (8009970 <TIM_Base_SetConfig+0x124>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d00b      	beq.n	8009944 <TIM_Base_SetConfig+0xf8>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a11      	ldr	r2, [pc, #68]	; (8009974 <TIM_Base_SetConfig+0x128>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d007      	beq.n	8009944 <TIM_Base_SetConfig+0xf8>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a10      	ldr	r2, [pc, #64]	; (8009978 <TIM_Base_SetConfig+0x12c>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d003      	beq.n	8009944 <TIM_Base_SetConfig+0xf8>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a0f      	ldr	r2, [pc, #60]	; (800997c <TIM_Base_SetConfig+0x130>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d103      	bne.n	800994c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	691a      	ldr	r2, [r3, #16]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	615a      	str	r2, [r3, #20]
}
 8009952:	bf00      	nop
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40012c00 	.word	0x40012c00
 8009964:	40000400 	.word	0x40000400
 8009968:	40000800 	.word	0x40000800
 800996c:	40000c00 	.word	0x40000c00
 8009970:	40013400 	.word	0x40013400
 8009974:	40014000 	.word	0x40014000
 8009978:	40014400 	.word	0x40014400
 800997c:	40014800 	.word	0x40014800

08009980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a1b      	ldr	r3, [r3, #32]
 8009990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	f023 0201 	bic.w	r2, r3, #1
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	011b      	lsls	r3, r3, #4
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f023 030a 	bic.w	r3, r3, #10
 80099bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	621a      	str	r2, [r3, #32]
}
 80099d2:	bf00      	nop
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099de:	b480      	push	{r7}
 80099e0:	b087      	sub	sp, #28
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	f023 0210 	bic.w	r2, r3, #16
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	031b      	lsls	r3, r3, #12
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	011b      	lsls	r3, r3, #4
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	621a      	str	r2, [r3, #32]
}
 8009a32:	bf00      	nop
 8009a34:	371c      	adds	r7, #28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	f043 0307 	orr.w	r3, r3, #7
 8009a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	609a      	str	r2, [r3, #8]
}
 8009a68:	bf00      	nop
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	021a      	lsls	r2, r3, #8
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	431a      	orrs	r2, r3
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	609a      	str	r2, [r3, #8]
}
 8009aa8:	bf00      	nop
 8009aaa:	371c      	adds	r7, #28
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d101      	bne.n	8009acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	e068      	b.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a2e      	ldr	r2, [pc, #184]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d004      	beq.n	8009b00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a2d      	ldr	r2, [pc, #180]	; (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d108      	bne.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a1e      	ldr	r2, [pc, #120]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d01d      	beq.n	8009b72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b3e:	d018      	beq.n	8009b72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a1b      	ldr	r2, [pc, #108]	; (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d013      	beq.n	8009b72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a1a      	ldr	r2, [pc, #104]	; (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d00e      	beq.n	8009b72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a18      	ldr	r2, [pc, #96]	; (8009bbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d009      	beq.n	8009b72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a13      	ldr	r2, [pc, #76]	; (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d004      	beq.n	8009b72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a14      	ldr	r2, [pc, #80]	; (8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d10c      	bne.n	8009b8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	40012c00 	.word	0x40012c00
 8009bb0:	40013400 	.word	0x40013400
 8009bb4:	40000400 	.word	0x40000400
 8009bb8:	40000800 	.word	0x40000800
 8009bbc:	40000c00 	.word	0x40000c00
 8009bc0:	40014000 	.word	0x40014000

08009bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009c00:	b084      	sub	sp, #16
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	f107 001c 	add.w	r0, r7, #28
 8009c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009c16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009c18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009c1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8009c1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8009c22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8009c26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685a      	ldr	r2, [r3, #4]
 8009c32:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <SDMMC_Init+0x50>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	b004      	add	sp, #16
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	ffc02c00 	.word	0xffc02c00

08009c54 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f043 0203 	orr.w	r2, r3, #3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009ca4:	2002      	movs	r0, #2
 8009ca6:	f7f7 fde7 	bl	8001878 <HAL_Delay>

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0303 	and.w	r3, r3, #3
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009cf4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009cfa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <SDMMC_SendCommand+0x50>)
 8009d08:	4013      	ands	r3, r2
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	fffee0c0 	.word	0xfffee0c0

08009d24 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	b2db      	uxtb	r3, r3
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3314      	adds	r3, #20
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	4413      	add	r3, r2
 8009d52:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d8a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009d90:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009d96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	431a      	orrs	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009dae:	2300      	movs	r3, #0

}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009dca:	2310      	movs	r3, #16
 8009dcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ddc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dde:	f107 0308 	add.w	r3, r7, #8
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff ff73 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dee:	2110      	movs	r1, #16
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fa7b 	bl	800a2ec <SDMMC_GetCmdResp1>
 8009df6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009df8:	69fb      	ldr	r3, [r7, #28]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3720      	adds	r7, #32
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b088      	sub	sp, #32
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009e10:	2311      	movs	r3, #17
 8009e12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e24:	f107 0308 	add.w	r3, r7, #8
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff ff50 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e34:	2111      	movs	r1, #17
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fa58 	bl	800a2ec <SDMMC_GetCmdResp1>
 8009e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e3e:	69fb      	ldr	r3, [r7, #28]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3720      	adds	r7, #32
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009e56:	2312      	movs	r3, #18
 8009e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e6a:	f107 0308 	add.w	r3, r7, #8
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff ff2d 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e7a:	2112      	movs	r1, #18
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fa35 	bl	800a2ec <SDMMC_GetCmdResp1>
 8009e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e84:	69fb      	ldr	r3, [r7, #28]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3720      	adds	r7, #32
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b088      	sub	sp, #32
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009e9c:	2318      	movs	r3, #24
 8009e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eb0:	f107 0308 	add.w	r3, r7, #8
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff ff0a 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec0:	2118      	movs	r1, #24
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa12 	bl	800a2ec <SDMMC_GetCmdResp1>
 8009ec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eca:	69fb      	ldr	r3, [r7, #28]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3720      	adds	r7, #32
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b088      	sub	sp, #32
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009ee2:	2319      	movs	r3, #25
 8009ee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eec:	2300      	movs	r3, #0
 8009eee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ef4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ef6:	f107 0308 	add.w	r3, r7, #8
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7ff fee7 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f06:	2119      	movs	r1, #25
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f9ef 	bl	800a2ec <SDMMC_GetCmdResp1>
 8009f0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f10:	69fb      	ldr	r3, [r7, #28]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3720      	adds	r7, #32
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
	...

08009f1c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009f28:	230c      	movs	r3, #12
 8009f2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f3a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f54:	f107 0308 	add.w	r3, r7, #8
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff feb8 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009f60:	4a08      	ldr	r2, [pc, #32]	; (8009f84 <SDMMC_CmdStopTransfer+0x68>)
 8009f62:	210c      	movs	r1, #12
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f9c1 	bl	800a2ec <SDMMC_GetCmdResp1>
 8009f6a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009f78:	69fb      	ldr	r3, [r7, #28]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3720      	adds	r7, #32
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	05f5e100 	.word	0x05f5e100

08009f88 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08a      	sub	sp, #40	; 0x28
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009f98:	2307      	movs	r3, #7
 8009f9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fa0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009faa:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fac:	f107 0310 	add.w	r3, r7, #16
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f7ff fe8c 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fbc:	2107      	movs	r1, #7
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 f994 	bl	800a2ec <SDMMC_GetCmdResp1>
 8009fc4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3728      	adds	r7, #40	; 0x28
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b088      	sub	sp, #32
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fee:	f107 0308 	add.w	r3, r7, #8
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff fe6b 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fbb8 	bl	800a770 <SDMMC_GetCmdError>
 800a000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a002:	69fb      	ldr	r3, [r7, #28]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3720      	adds	r7, #32
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b088      	sub	sp, #32
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a014:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a01a:	2308      	movs	r3, #8
 800a01c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a01e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a02c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a02e:	f107 0308 	add.w	r3, r7, #8
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7ff fe4b 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fb4a 	bl	800a6d4 <SDMMC_GetCmdResp7>
 800a040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a042:	69fb      	ldr	r3, [r7, #28]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3720      	adds	r7, #32
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b088      	sub	sp, #32
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a05a:	2337      	movs	r3, #55	; 0x37
 800a05c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a05e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a064:	2300      	movs	r3, #0
 800a066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a06c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a06e:	f107 0308 	add.w	r3, r7, #8
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f7ff fe2b 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a07a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a07e:	2137      	movs	r1, #55	; 0x37
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f933 	bl	800a2ec <SDMMC_GetCmdResp1>
 800a086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a088:	69fb      	ldr	r3, [r7, #28]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3720      	adds	r7, #32
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b088      	sub	sp, #32
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a0a0:	2329      	movs	r3, #41	; 0x29
 800a0a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0b4:	f107 0308 	add.w	r3, r7, #8
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff fe08 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fa4f 	bl	800a564 <SDMMC_GetCmdResp3>
 800a0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0c8:	69fb      	ldr	r3, [r7, #28]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b088      	sub	sp, #32
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a0e0:	2306      	movs	r3, #6
 800a0e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0f4:	f107 0308 	add.w	r3, r7, #8
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7ff fde8 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a100:	f241 3288 	movw	r2, #5000	; 0x1388
 800a104:	2106      	movs	r1, #6
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f8f0 	bl	800a2ec <SDMMC_GetCmdResp1>
 800a10c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a10e:	69fb      	ldr	r3, [r7, #28]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3720      	adds	r7, #32
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b088      	sub	sp, #32
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a120:	2300      	movs	r3, #0
 800a122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a124:	2333      	movs	r3, #51	; 0x33
 800a126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a12c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a136:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a138:	f107 0308 	add.w	r3, r7, #8
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff fdc6 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a144:	f241 3288 	movw	r2, #5000	; 0x1388
 800a148:	2133      	movs	r1, #51	; 0x33
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f8ce 	bl	800a2ec <SDMMC_GetCmdResp1>
 800a150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a152:	69fb      	ldr	r3, [r7, #28]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3720      	adds	r7, #32
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a164:	2300      	movs	r3, #0
 800a166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a168:	2302      	movs	r3, #2
 800a16a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a16c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a172:	2300      	movs	r3, #0
 800a174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a17a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a17c:	f107 0308 	add.w	r3, r7, #8
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff fda4 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f9a1 	bl	800a4d0 <SDMMC_GetCmdResp2>
 800a18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a190:	69fb      	ldr	r3, [r7, #28]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3720      	adds	r7, #32
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b088      	sub	sp, #32
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a1a8:	2309      	movs	r3, #9
 800a1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a1ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a1b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1bc:	f107 0308 	add.w	r3, r7, #8
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff fd84 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f981 	bl	800a4d0 <SDMMC_GetCmdResp2>
 800a1ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1d0:	69fb      	ldr	r3, [r7, #28]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3720      	adds	r7, #32
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b088      	sub	sp, #32
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1fc:	f107 0308 	add.w	r3, r7, #8
 800a200:	4619      	mov	r1, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7ff fd64 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	2103      	movs	r1, #3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f9e9 	bl	800a5e4 <SDMMC_GetCmdResp6>
 800a212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a214:	69fb      	ldr	r3, [r7, #28]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3720      	adds	r7, #32
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b088      	sub	sp, #32
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a22c:	230d      	movs	r3, #13
 800a22e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a230:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a234:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a236:	2300      	movs	r3, #0
 800a238:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a23a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a23e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a240:	f107 0308 	add.w	r3, r7, #8
 800a244:	4619      	mov	r1, r3
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7ff fd42 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a24c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a250:	210d      	movs	r1, #13
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f84a 	bl	800a2ec <SDMMC_GetCmdResp1>
 800a258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a25a:	69fb      	ldr	r3, [r7, #28]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3720      	adds	r7, #32
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a270:	230d      	movs	r3, #13
 800a272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a274:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a27e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a282:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a284:	f107 0308 	add.w	r3, r7, #8
 800a288:	4619      	mov	r1, r3
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7ff fd20 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a290:	f241 3288 	movw	r2, #5000	; 0x1388
 800a294:	210d      	movs	r1, #13
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f828 	bl	800a2ec <SDMMC_GetCmdResp1>
 800a29c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a29e:	69fb      	ldr	r3, [r7, #28]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3720      	adds	r7, #32
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b088      	sub	sp, #32
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800a2b4:	230b      	movs	r3, #11
 800a2b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2c8:	f107 0308 	add.w	r3, r7, #8
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff fcfe 	bl	8009cd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800a2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2d8:	210b      	movs	r1, #11
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f806 	bl	800a2ec <SDMMC_GetCmdResp1>
 800a2e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2e2:	69fb      	ldr	r3, [r7, #28]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3720      	adds	r7, #32
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b088      	sub	sp, #32
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a2fa:	4b70      	ldr	r3, [pc, #448]	; (800a4bc <SDMMC_GetCmdResp1+0x1d0>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a70      	ldr	r2, [pc, #448]	; (800a4c0 <SDMMC_GetCmdResp1+0x1d4>)
 800a300:	fba2 2303 	umull	r2, r3, r2, r3
 800a304:	0a5a      	lsrs	r2, r3, #9
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	fb02 f303 	mul.w	r3, r2, r3
 800a30c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	1e5a      	subs	r2, r3, #1
 800a312:	61fa      	str	r2, [r7, #28]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a31c:	e0c9      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a322:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	4b67      	ldr	r3, [pc, #412]	; (800a4c4 <SDMMC_GetCmdResp1+0x1d8>)
 800a328:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0ef      	beq.n	800a30e <SDMMC_GetCmdResp1+0x22>
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1ea      	bne.n	800a30e <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b00      	cmp	r3, #0
 800a342:	d004      	beq.n	800a34e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2204      	movs	r2, #4
 800a348:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a34a:	2304      	movs	r3, #4
 800a34c:	e0b1      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d004      	beq.n	800a364 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a360:	2301      	movs	r3, #1
 800a362:	e0a6      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	4a58      	ldr	r2, [pc, #352]	; (800a4c8 <SDMMC_GetCmdResp1+0x1dc>)
 800a368:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f7ff fcda 	bl	8009d24 <SDMMC_GetCommandResponse>
 800a370:	4603      	mov	r3, r0
 800a372:	461a      	mov	r2, r3
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	4293      	cmp	r3, r2
 800a378:	d001      	beq.n	800a37e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e099      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a37e:	2100      	movs	r1, #0
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f7ff fcdc 	bl	8009d3e <SDMMC_GetResponse>
 800a386:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	4b50      	ldr	r3, [pc, #320]	; (800a4cc <SDMMC_GetCmdResp1+0x1e0>)
 800a38c:	4013      	ands	r3, r2
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a392:	2300      	movs	r3, #0
 800a394:	e08d      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	da02      	bge.n	800a3a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a39c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3a0:	e087      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a3ac:	2340      	movs	r3, #64	; 0x40
 800a3ae:	e080      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a3ba:	2380      	movs	r3, #128	; 0x80
 800a3bc:	e079      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a3c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3cc:	e071      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a3d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3dc:	e069      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a3e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ec:	e061      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a3f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3fc:	e059      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a40c:	e051      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a41c:	e049      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a428:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a42c:	e041      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a43c:	e039      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a44c:	e031      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a458:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a45c:	e029      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a468:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a46c:	e021      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a47c:	e019      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d002      	beq.n	800a48e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a48c:	e011      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a498:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a49c:	e009      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f003 0308 	and.w	r3, r3, #8
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a4a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a4ac:	e001      	b.n	800a4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a4ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3720      	adds	r7, #32
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000000 	.word	0x20000000
 800a4c0:	10624dd3 	.word	0x10624dd3
 800a4c4:	00200045 	.word	0x00200045
 800a4c8:	002000c5 	.word	0x002000c5
 800a4cc:	fdffe008 	.word	0xfdffe008

0800a4d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4d8:	4b1f      	ldr	r3, [pc, #124]	; (800a558 <SDMMC_GetCmdResp2+0x88>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a1f      	ldr	r2, [pc, #124]	; (800a55c <SDMMC_GetCmdResp2+0x8c>)
 800a4de:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e2:	0a5b      	lsrs	r3, r3, #9
 800a4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e8:	fb02 f303 	mul.w	r3, r2, r3
 800a4ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	1e5a      	subs	r2, r3, #1
 800a4f2:	60fa      	str	r2, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d102      	bne.n	800a4fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4fc:	e026      	b.n	800a54c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a502:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d0ef      	beq.n	800a4ee <SDMMC_GetCmdResp2+0x1e>
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1ea      	bne.n	800a4ee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a51c:	f003 0304 	and.w	r3, r3, #4
 800a520:	2b00      	cmp	r3, #0
 800a522:	d004      	beq.n	800a52e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2204      	movs	r2, #4
 800a528:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a52a:	2304      	movs	r3, #4
 800a52c:	e00e      	b.n	800a54c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d004      	beq.n	800a544 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a540:	2301      	movs	r3, #1
 800a542:	e003      	b.n	800a54c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a06      	ldr	r2, [pc, #24]	; (800a560 <SDMMC_GetCmdResp2+0x90>)
 800a548:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	20000000 	.word	0x20000000
 800a55c:	10624dd3 	.word	0x10624dd3
 800a560:	002000c5 	.word	0x002000c5

0800a564 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a56c:	4b1a      	ldr	r3, [pc, #104]	; (800a5d8 <SDMMC_GetCmdResp3+0x74>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a1a      	ldr	r2, [pc, #104]	; (800a5dc <SDMMC_GetCmdResp3+0x78>)
 800a572:	fba2 2303 	umull	r2, r3, r2, r3
 800a576:	0a5b      	lsrs	r3, r3, #9
 800a578:	f241 3288 	movw	r2, #5000	; 0x1388
 800a57c:	fb02 f303 	mul.w	r3, r2, r3
 800a580:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	60fa      	str	r2, [r7, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a58c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a590:	e01b      	b.n	800a5ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a596:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0ef      	beq.n	800a582 <SDMMC_GetCmdResp3+0x1e>
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1ea      	bne.n	800a582 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b0:	f003 0304 	and.w	r3, r3, #4
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d004      	beq.n	800a5c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2204      	movs	r2, #4
 800a5bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5be:	2304      	movs	r3, #4
 800a5c0:	e003      	b.n	800a5ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a06      	ldr	r2, [pc, #24]	; (800a5e0 <SDMMC_GetCmdResp3+0x7c>)
 800a5c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	20000000 	.word	0x20000000
 800a5dc:	10624dd3 	.word	0x10624dd3
 800a5e0:	002000c5 	.word	0x002000c5

0800a5e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b088      	sub	sp, #32
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	607a      	str	r2, [r7, #4]
 800a5f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5f2:	4b35      	ldr	r3, [pc, #212]	; (800a6c8 <SDMMC_GetCmdResp6+0xe4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a35      	ldr	r2, [pc, #212]	; (800a6cc <SDMMC_GetCmdResp6+0xe8>)
 800a5f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fc:	0a5b      	lsrs	r3, r3, #9
 800a5fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a602:	fb02 f303 	mul.w	r3, r2, r3
 800a606:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	1e5a      	subs	r2, r3, #1
 800a60c:	61fa      	str	r2, [r7, #28]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d102      	bne.n	800a618 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a612:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a616:	e052      	b.n	800a6be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a61c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a624:	2b00      	cmp	r3, #0
 800a626:	d0ef      	beq.n	800a608 <SDMMC_GetCmdResp6+0x24>
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1ea      	bne.n	800a608 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a636:	f003 0304 	and.w	r3, r3, #4
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d004      	beq.n	800a648 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2204      	movs	r2, #4
 800a642:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a644:	2304      	movs	r3, #4
 800a646:	e03a      	b.n	800a6be <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d004      	beq.n	800a65e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2201      	movs	r2, #1
 800a658:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e02f      	b.n	800a6be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7ff fb60 	bl	8009d24 <SDMMC_GetCommandResponse>
 800a664:	4603      	mov	r3, r0
 800a666:	461a      	mov	r2, r3
 800a668:	7afb      	ldrb	r3, [r7, #11]
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d001      	beq.n	800a672 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a66e:	2301      	movs	r3, #1
 800a670:	e025      	b.n	800a6be <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	4a16      	ldr	r2, [pc, #88]	; (800a6d0 <SDMMC_GetCmdResp6+0xec>)
 800a676:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a678:	2100      	movs	r1, #0
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7ff fb5f 	bl	8009d3e <SDMMC_GetResponse>
 800a680:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d106      	bne.n	800a69a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	0c1b      	lsrs	r3, r3, #16
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a696:	2300      	movs	r3, #0
 800a698:	e011      	b.n	800a6be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a6a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6a8:	e009      	b.n	800a6be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a6b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6b8:	e001      	b.n	800a6be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000000 	.word	0x20000000
 800a6cc:	10624dd3 	.word	0x10624dd3
 800a6d0:	002000c5 	.word	0x002000c5

0800a6d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6dc:	4b22      	ldr	r3, [pc, #136]	; (800a768 <SDMMC_GetCmdResp7+0x94>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a22      	ldr	r2, [pc, #136]	; (800a76c <SDMMC_GetCmdResp7+0x98>)
 800a6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e6:	0a5b      	lsrs	r3, r3, #9
 800a6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ec:	fb02 f303 	mul.w	r3, r2, r3
 800a6f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	1e5a      	subs	r2, r3, #1
 800a6f6:	60fa      	str	r2, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d102      	bne.n	800a702 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a700:	e02c      	b.n	800a75c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a706:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d0ef      	beq.n	800a6f2 <SDMMC_GetCmdResp7+0x1e>
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1ea      	bne.n	800a6f2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d004      	beq.n	800a732 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2204      	movs	r2, #4
 800a72c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a72e:	2304      	movs	r3, #4
 800a730:	e014      	b.n	800a75c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d004      	beq.n	800a748 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a744:	2301      	movs	r3, #1
 800a746:	e009      	b.n	800a75c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2240      	movs	r2, #64	; 0x40
 800a758:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a75a:	2300      	movs	r3, #0

}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	20000000 	.word	0x20000000
 800a76c:	10624dd3 	.word	0x10624dd3

0800a770 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a778:	4b11      	ldr	r3, [pc, #68]	; (800a7c0 <SDMMC_GetCmdError+0x50>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a11      	ldr	r2, [pc, #68]	; (800a7c4 <SDMMC_GetCmdError+0x54>)
 800a77e:	fba2 2303 	umull	r2, r3, r2, r3
 800a782:	0a5b      	lsrs	r3, r3, #9
 800a784:	f241 3288 	movw	r2, #5000	; 0x1388
 800a788:	fb02 f303 	mul.w	r3, r2, r3
 800a78c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	1e5a      	subs	r2, r3, #1
 800a792:	60fa      	str	r2, [r7, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a79c:	e009      	b.n	800a7b2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0f1      	beq.n	800a78e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a06      	ldr	r2, [pc, #24]	; (800a7c8 <SDMMC_GetCmdError+0x58>)
 800a7ae:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	20000000 	.word	0x20000000
 800a7c4:	10624dd3 	.word	0x10624dd3
 800a7c8:	002000c5 	.word	0x002000c5

0800a7cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	f107 001c 	add.w	r0, r7, #28
 800a7da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 f9ce 	bl	800bb8c <USB_CoreReset>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d106      	bne.n	800a808 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	639a      	str	r2, [r3, #56]	; 0x38
 800a806:	e005      	b.n	800a814 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a814:	7bfb      	ldrb	r3, [r7, #15]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a820:	b004      	add	sp, #16
 800a822:	4770      	bx	lr

0800a824 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	4613      	mov	r3, r2
 800a830:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a832:	79fb      	ldrb	r3, [r7, #7]
 800a834:	2b02      	cmp	r3, #2
 800a836:	d165      	bne.n	800a904 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	4a3e      	ldr	r2, [pc, #248]	; (800a934 <USB_SetTurnaroundTime+0x110>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d906      	bls.n	800a84e <USB_SetTurnaroundTime+0x2a>
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4a3d      	ldr	r2, [pc, #244]	; (800a938 <USB_SetTurnaroundTime+0x114>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d202      	bcs.n	800a84e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a848:	230f      	movs	r3, #15
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e05c      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	4a39      	ldr	r2, [pc, #228]	; (800a938 <USB_SetTurnaroundTime+0x114>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d306      	bcc.n	800a864 <USB_SetTurnaroundTime+0x40>
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	4a38      	ldr	r2, [pc, #224]	; (800a93c <USB_SetTurnaroundTime+0x118>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d202      	bcs.n	800a864 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a85e:	230e      	movs	r3, #14
 800a860:	617b      	str	r3, [r7, #20]
 800a862:	e051      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	4a35      	ldr	r2, [pc, #212]	; (800a93c <USB_SetTurnaroundTime+0x118>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d306      	bcc.n	800a87a <USB_SetTurnaroundTime+0x56>
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	4a34      	ldr	r2, [pc, #208]	; (800a940 <USB_SetTurnaroundTime+0x11c>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d202      	bcs.n	800a87a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a874:	230d      	movs	r3, #13
 800a876:	617b      	str	r3, [r7, #20]
 800a878:	e046      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	4a30      	ldr	r2, [pc, #192]	; (800a940 <USB_SetTurnaroundTime+0x11c>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d306      	bcc.n	800a890 <USB_SetTurnaroundTime+0x6c>
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	4a2f      	ldr	r2, [pc, #188]	; (800a944 <USB_SetTurnaroundTime+0x120>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d802      	bhi.n	800a890 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a88a:	230c      	movs	r3, #12
 800a88c:	617b      	str	r3, [r7, #20]
 800a88e:	e03b      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	4a2c      	ldr	r2, [pc, #176]	; (800a944 <USB_SetTurnaroundTime+0x120>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d906      	bls.n	800a8a6 <USB_SetTurnaroundTime+0x82>
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	4a2b      	ldr	r2, [pc, #172]	; (800a948 <USB_SetTurnaroundTime+0x124>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d802      	bhi.n	800a8a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a8a0:	230b      	movs	r3, #11
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e030      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	4a27      	ldr	r2, [pc, #156]	; (800a948 <USB_SetTurnaroundTime+0x124>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d906      	bls.n	800a8bc <USB_SetTurnaroundTime+0x98>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	4a26      	ldr	r2, [pc, #152]	; (800a94c <USB_SetTurnaroundTime+0x128>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d802      	bhi.n	800a8bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a8b6:	230a      	movs	r3, #10
 800a8b8:	617b      	str	r3, [r7, #20]
 800a8ba:	e025      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	4a23      	ldr	r2, [pc, #140]	; (800a94c <USB_SetTurnaroundTime+0x128>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d906      	bls.n	800a8d2 <USB_SetTurnaroundTime+0xae>
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	4a22      	ldr	r2, [pc, #136]	; (800a950 <USB_SetTurnaroundTime+0x12c>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d202      	bcs.n	800a8d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a8cc:	2309      	movs	r3, #9
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	e01a      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	4a1e      	ldr	r2, [pc, #120]	; (800a950 <USB_SetTurnaroundTime+0x12c>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d306      	bcc.n	800a8e8 <USB_SetTurnaroundTime+0xc4>
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <USB_SetTurnaroundTime+0x130>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d802      	bhi.n	800a8e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a8e2:	2308      	movs	r3, #8
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	e00f      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	4a1a      	ldr	r2, [pc, #104]	; (800a954 <USB_SetTurnaroundTime+0x130>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d906      	bls.n	800a8fe <USB_SetTurnaroundTime+0xda>
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	4a19      	ldr	r2, [pc, #100]	; (800a958 <USB_SetTurnaroundTime+0x134>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d202      	bcs.n	800a8fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a8f8:	2307      	movs	r3, #7
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	e004      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a8fe:	2306      	movs	r3, #6
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	e001      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a904:	2309      	movs	r3, #9
 800a906:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	68da      	ldr	r2, [r3, #12]
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	029b      	lsls	r3, r3, #10
 800a91c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a920:	431a      	orrs	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	371c      	adds	r7, #28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	00d8acbf 	.word	0x00d8acbf
 800a938:	00e4e1c0 	.word	0x00e4e1c0
 800a93c:	00f42400 	.word	0x00f42400
 800a940:	01067380 	.word	0x01067380
 800a944:	011a499f 	.word	0x011a499f
 800a948:	01312cff 	.word	0x01312cff
 800a94c:	014ca43f 	.word	0x014ca43f
 800a950:	016e3600 	.word	0x016e3600
 800a954:	01a6ab1f 	.word	0x01a6ab1f
 800a958:	01e84800 	.word	0x01e84800

0800a95c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f043 0201 	orr.w	r2, r3, #1
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a97e:	b480      	push	{r7}
 800a980:	b083      	sub	sp, #12
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f023 0201 	bic.w	r2, r3, #1
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9b8:	78fb      	ldrb	r3, [r7, #3]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d106      	bne.n	800a9cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	60da      	str	r2, [r3, #12]
 800a9ca:	e00b      	b.n	800a9e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d106      	bne.n	800a9e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	60da      	str	r2, [r3, #12]
 800a9de:	e001      	b.n	800a9e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e003      	b.n	800a9ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a9e4:	2032      	movs	r0, #50	; 0x32
 800a9e6:	f7f6 ff47 	bl	8001878 <HAL_Delay>

  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b086      	sub	sp, #24
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa0e:	2300      	movs	r3, #0
 800aa10:	613b      	str	r3, [r7, #16]
 800aa12:	e009      	b.n	800aa28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	3340      	adds	r3, #64	; 0x40
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	2200      	movs	r2, #0
 800aa20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	3301      	adds	r3, #1
 800aa26:	613b      	str	r3, [r7, #16]
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	2b0e      	cmp	r3, #14
 800aa2c:	d9f2      	bls.n	800aa14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d11c      	bne.n	800aa6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa42:	f043 0302 	orr.w	r3, r3, #2
 800aa46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	e005      	b.n	800aa7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa80:	461a      	mov	r2, r3
 800aa82:	2300      	movs	r3, #0
 800aa84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa94:	461a      	mov	r2, r3
 800aa96:	680b      	ldr	r3, [r1, #0]
 800aa98:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aa9a:	2103      	movs	r1, #3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f93d 	bl	800ad1c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aaa2:	2110      	movs	r1, #16
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f8f1 	bl	800ac8c <USB_FlushTxFifo>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f90f 	bl	800acd8 <USB_FlushRxFifo>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d001      	beq.n	800aac4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaca:	461a      	mov	r2, r3
 800aacc:	2300      	movs	r3, #0
 800aace:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad6:	461a      	mov	r2, r3
 800aad8:	2300      	movs	r3, #0
 800aada:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae2:	461a      	mov	r2, r3
 800aae4:	2300      	movs	r3, #0
 800aae6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aae8:	2300      	movs	r3, #0
 800aaea:	613b      	str	r3, [r7, #16]
 800aaec:	e043      	b.n	800ab76 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab04:	d118      	bne.n	800ab38 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab18:	461a      	mov	r2, r3
 800ab1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab1e:	6013      	str	r3, [r2, #0]
 800ab20:	e013      	b.n	800ab4a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	015a      	lsls	r2, r3, #5
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	4413      	add	r3, r2
 800ab2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	e008      	b.n	800ab4a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	015a      	lsls	r2, r3, #5
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab44:	461a      	mov	r2, r3
 800ab46:	2300      	movs	r3, #0
 800ab48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	015a      	lsls	r2, r3, #5
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab56:	461a      	mov	r2, r3
 800ab58:	2300      	movs	r3, #0
 800ab5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab68:	461a      	mov	r2, r3
 800ab6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	3301      	adds	r3, #1
 800ab74:	613b      	str	r3, [r7, #16]
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d3b7      	bcc.n	800aaee <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab7e:	2300      	movs	r3, #0
 800ab80:	613b      	str	r3, [r7, #16]
 800ab82:	e043      	b.n	800ac0c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab9a:	d118      	bne.n	800abce <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10a      	bne.n	800abb8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	015a      	lsls	r2, r3, #5
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	4413      	add	r3, r2
 800abaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abae:	461a      	mov	r2, r3
 800abb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abb4:	6013      	str	r3, [r2, #0]
 800abb6:	e013      	b.n	800abe0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc4:	461a      	mov	r2, r3
 800abc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	e008      	b.n	800abe0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abda:	461a      	mov	r2, r3
 800abdc:	2300      	movs	r3, #0
 800abde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abec:	461a      	mov	r2, r3
 800abee:	2300      	movs	r3, #0
 800abf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	015a      	lsls	r2, r3, #5
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	4413      	add	r3, r2
 800abfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abfe:	461a      	mov	r2, r3
 800ac00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	613b      	str	r3, [r7, #16]
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d3b7      	bcc.n	800ab84 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	f043 0210 	orr.w	r2, r3, #16
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	699a      	ldr	r2, [r3, #24]
 800ac46:	4b10      	ldr	r3, [pc, #64]	; (800ac88 <USB_DevInit+0x294>)
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ac4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d005      	beq.n	800ac60 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	f043 0208 	orr.w	r2, r3, #8
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ac60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d107      	bne.n	800ac76 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac6e:	f043 0304 	orr.w	r3, r3, #4
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac82:	b004      	add	sp, #16
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	803c3800 	.word	0x803c3800

0800ac8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	019b      	lsls	r3, r3, #6
 800ac9e:	f043 0220 	orr.w	r2, r3, #32
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3301      	adds	r3, #1
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4a09      	ldr	r2, [pc, #36]	; (800acd4 <USB_FlushTxFifo+0x48>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d901      	bls.n	800acb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e006      	b.n	800acc6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	f003 0320 	and.w	r3, r3, #32
 800acc0:	2b20      	cmp	r3, #32
 800acc2:	d0f0      	beq.n	800aca6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	00030d40 	.word	0x00030d40

0800acd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2210      	movs	r2, #16
 800ace8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3301      	adds	r3, #1
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4a09      	ldr	r2, [pc, #36]	; (800ad18 <USB_FlushRxFifo+0x40>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d901      	bls.n	800acfc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e006      	b.n	800ad0a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	f003 0310 	and.w	r3, r3, #16
 800ad04:	2b10      	cmp	r3, #16
 800ad06:	d0f0      	beq.n	800acea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3714      	adds	r7, #20
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	00030d40 	.word	0x00030d40

0800ad1c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	460b      	mov	r3, r1
 800ad26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	78fb      	ldrb	r3, [r7, #3]
 800ad36:	68f9      	ldr	r1, [r7, #12]
 800ad38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3714      	adds	r7, #20
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b087      	sub	sp, #28
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f003 0306 	and.w	r3, r3, #6
 800ad66:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d002      	beq.n	800ad74 <USB_GetDevSpeed+0x26>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2b06      	cmp	r3, #6
 800ad72:	d102      	bne.n	800ad7a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ad74:	2302      	movs	r3, #2
 800ad76:	75fb      	strb	r3, [r7, #23]
 800ad78:	e001      	b.n	800ad7e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800ad7a:	230f      	movs	r3, #15
 800ad7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ad7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	371c      	adds	r7, #28
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	785b      	ldrb	r3, [r3, #1]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d13a      	bne.n	800ae1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adae:	69da      	ldr	r2, [r3, #28]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	f003 030f 	and.w	r3, r3, #15
 800adb8:	2101      	movs	r1, #1
 800adba:	fa01 f303 	lsl.w	r3, r1, r3
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	68f9      	ldr	r1, [r7, #12]
 800adc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adc6:	4313      	orrs	r3, r2
 800adc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	4413      	add	r3, r2
 800add2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800addc:	2b00      	cmp	r3, #0
 800adde:	d155      	bne.n	800ae8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	78db      	ldrb	r3, [r3, #3]
 800adfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800adfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	059b      	lsls	r3, r3, #22
 800ae02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae04:	4313      	orrs	r3, r2
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	0151      	lsls	r1, r2, #5
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	440a      	add	r2, r1
 800ae0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae1a:	6013      	str	r3, [r2, #0]
 800ae1c:	e036      	b.n	800ae8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae24:	69da      	ldr	r2, [r3, #28]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	2101      	movs	r1, #1
 800ae30:	fa01 f303 	lsl.w	r3, r1, r3
 800ae34:	041b      	lsls	r3, r3, #16
 800ae36:	68f9      	ldr	r1, [r7, #12]
 800ae38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	015a      	lsls	r2, r3, #5
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	4413      	add	r3, r2
 800ae48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d11a      	bne.n	800ae8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	015a      	lsls	r2, r3, #5
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	78db      	ldrb	r3, [r3, #3]
 800ae70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae72:	430b      	orrs	r3, r1
 800ae74:	4313      	orrs	r3, r2
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	0151      	lsls	r1, r2, #5
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	440a      	add	r2, r1
 800ae7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
	...

0800ae9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	785b      	ldrb	r3, [r3, #1]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d161      	bne.n	800af7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aeca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aece:	d11f      	bne.n	800af10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	0151      	lsls	r1, r2, #5
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	440a      	add	r2, r1
 800aee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aeee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	0151      	lsls	r1, r2, #5
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	440a      	add	r2, r1
 800af06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	f003 030f 	and.w	r3, r3, #15
 800af20:	2101      	movs	r1, #1
 800af22:	fa01 f303 	lsl.w	r3, r1, r3
 800af26:	b29b      	uxth	r3, r3
 800af28:	43db      	mvns	r3, r3
 800af2a:	68f9      	ldr	r1, [r7, #12]
 800af2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af30:	4013      	ands	r3, r2
 800af32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af3a:	69da      	ldr	r2, [r3, #28]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f003 030f 	and.w	r3, r3, #15
 800af44:	2101      	movs	r1, #1
 800af46:	fa01 f303 	lsl.w	r3, r1, r3
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	43db      	mvns	r3, r3
 800af4e:	68f9      	ldr	r1, [r7, #12]
 800af50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af54:	4013      	ands	r3, r2
 800af56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	0159      	lsls	r1, r3, #5
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	440b      	add	r3, r1
 800af6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af72:	4619      	mov	r1, r3
 800af74:	4b35      	ldr	r3, [pc, #212]	; (800b04c <USB_DeactivateEndpoint+0x1b0>)
 800af76:	4013      	ands	r3, r2
 800af78:	600b      	str	r3, [r1, #0]
 800af7a:	e060      	b.n	800b03e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	4413      	add	r3, r2
 800af84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af92:	d11f      	bne.n	800afd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	0151      	lsls	r1, r2, #5
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	440a      	add	r2, r1
 800afaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800afb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	0151      	lsls	r1, r2, #5
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	440a      	add	r2, r1
 800afca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	f003 030f 	and.w	r3, r3, #15
 800afe4:	2101      	movs	r1, #1
 800afe6:	fa01 f303 	lsl.w	r3, r1, r3
 800afea:	041b      	lsls	r3, r3, #16
 800afec:	43db      	mvns	r3, r3
 800afee:	68f9      	ldr	r1, [r7, #12]
 800aff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aff4:	4013      	ands	r3, r2
 800aff6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affe:	69da      	ldr	r2, [r3, #28]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	f003 030f 	and.w	r3, r3, #15
 800b008:	2101      	movs	r1, #1
 800b00a:	fa01 f303 	lsl.w	r3, r1, r3
 800b00e:	041b      	lsls	r3, r3, #16
 800b010:	43db      	mvns	r3, r3
 800b012:	68f9      	ldr	r1, [r7, #12]
 800b014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b018:	4013      	ands	r3, r2
 800b01a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4413      	add	r3, r2
 800b024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	0159      	lsls	r1, r3, #5
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	440b      	add	r3, r1
 800b032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b036:	4619      	mov	r1, r3
 800b038:	4b05      	ldr	r3, [pc, #20]	; (800b050 <USB_DeactivateEndpoint+0x1b4>)
 800b03a:	4013      	ands	r3, r2
 800b03c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr
 800b04c:	ec337800 	.word	0xec337800
 800b050:	eff37800 	.word	0xeff37800

0800b054 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	785b      	ldrb	r3, [r3, #1]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	f040 810a 	bne.w	800b286 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d132      	bne.n	800b0e0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	015a      	lsls	r2, r3, #5
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	4413      	add	r3, r2
 800b082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	693a      	ldr	r2, [r7, #16]
 800b08a:	0151      	lsls	r1, r2, #5
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	440a      	add	r2, r1
 800b090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b094:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b098:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b09c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	0151      	lsls	r1, r2, #5
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	440a      	add	r2, r1
 800b0b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	015a      	lsls	r2, r3, #5
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	0151      	lsls	r1, r2, #5
 800b0d0:	697a      	ldr	r2, [r7, #20]
 800b0d2:	440a      	add	r2, r1
 800b0d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d8:	0cdb      	lsrs	r3, r3, #19
 800b0da:	04db      	lsls	r3, r3, #19
 800b0dc:	6113      	str	r3, [r2, #16]
 800b0de:	e074      	b.n	800b1ca <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	0151      	lsls	r1, r2, #5
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	440a      	add	r2, r1
 800b0f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0fa:	0cdb      	lsrs	r3, r3, #19
 800b0fc:	04db      	lsls	r3, r3, #19
 800b0fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	015a      	lsls	r2, r3, #5
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	4413      	add	r3, r2
 800b108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	0151      	lsls	r1, r2, #5
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	440a      	add	r2, r1
 800b116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b11a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b11e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b122:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b130:	691a      	ldr	r2, [r3, #16]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	6959      	ldr	r1, [r3, #20]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	440b      	add	r3, r1
 800b13c:	1e59      	subs	r1, r3, #1
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	fbb1 f3f3 	udiv	r3, r1, r3
 800b146:	04d9      	lsls	r1, r3, #19
 800b148:	4baf      	ldr	r3, [pc, #700]	; (800b408 <USB_EPStartXfer+0x3b4>)
 800b14a:	400b      	ands	r3, r1
 800b14c:	6939      	ldr	r1, [r7, #16]
 800b14e:	0148      	lsls	r0, r1, #5
 800b150:	6979      	ldr	r1, [r7, #20]
 800b152:	4401      	add	r1, r0
 800b154:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b158:	4313      	orrs	r3, r2
 800b15a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	015a      	lsls	r2, r3, #5
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	4413      	add	r3, r2
 800b164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b168:	691a      	ldr	r2, [r3, #16]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b172:	6939      	ldr	r1, [r7, #16]
 800b174:	0148      	lsls	r0, r1, #5
 800b176:	6979      	ldr	r1, [r7, #20]
 800b178:	4401      	add	r1, r0
 800b17a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b17e:	4313      	orrs	r3, r2
 800b180:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	78db      	ldrb	r3, [r3, #3]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d11f      	bne.n	800b1ca <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	015a      	lsls	r2, r3, #5
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	4413      	add	r3, r2
 800b192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	0151      	lsls	r1, r2, #5
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	440a      	add	r2, r1
 800b1a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b1a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	015a      	lsls	r2, r3, #5
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	0151      	lsls	r1, r2, #5
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	440a      	add	r2, r1
 800b1c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1c8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	0151      	lsls	r1, r2, #5
 800b1dc:	697a      	ldr	r2, [r7, #20]
 800b1de:	440a      	add	r2, r1
 800b1e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1e8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	78db      	ldrb	r3, [r3, #3]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d015      	beq.n	800b21e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 8100 	beq.w	800b3fc <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	f003 030f 	and.w	r3, r3, #15
 800b20c:	2101      	movs	r1, #1
 800b20e:	fa01 f303 	lsl.w	r3, r1, r3
 800b212:	6979      	ldr	r1, [r7, #20]
 800b214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b218:	4313      	orrs	r3, r2
 800b21a:	634b      	str	r3, [r1, #52]	; 0x34
 800b21c:	e0ee      	b.n	800b3fc <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d110      	bne.n	800b250 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	015a      	lsls	r2, r3, #5
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	4413      	add	r3, r2
 800b236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	0151      	lsls	r1, r2, #5
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	440a      	add	r2, r1
 800b244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b248:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b24c:	6013      	str	r3, [r2, #0]
 800b24e:	e00f      	b.n	800b270 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	015a      	lsls	r2, r3, #5
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	4413      	add	r3, r2
 800b258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	0151      	lsls	r1, r2, #5
 800b262:	697a      	ldr	r2, [r7, #20]
 800b264:	440a      	add	r2, r1
 800b266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b26a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b26e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	68d9      	ldr	r1, [r3, #12]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	781a      	ldrb	r2, [r3, #0]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f9e2 	bl	800b648 <USB_WritePacket>
 800b284:	e0ba      	b.n	800b3fc <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	0151      	lsls	r1, r2, #5
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	440a      	add	r2, r1
 800b29c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2a0:	0cdb      	lsrs	r3, r3, #19
 800b2a2:	04db      	lsls	r3, r3, #19
 800b2a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	015a      	lsls	r2, r3, #5
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	0151      	lsls	r1, r2, #5
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	440a      	add	r2, r1
 800b2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d123      	bne.n	800b31a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	015a      	lsls	r2, r3, #5
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	4413      	add	r3, r2
 800b2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2de:	691a      	ldr	r2, [r3, #16]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2e8:	6939      	ldr	r1, [r7, #16]
 800b2ea:	0148      	lsls	r0, r1, #5
 800b2ec:	6979      	ldr	r1, [r7, #20]
 800b2ee:	4401      	add	r1, r0
 800b2f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	015a      	lsls	r2, r3, #5
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	4413      	add	r3, r2
 800b300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	0151      	lsls	r1, r2, #5
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	440a      	add	r2, r1
 800b30e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b312:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b316:	6113      	str	r3, [r2, #16]
 800b318:	e033      	b.n	800b382 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	695a      	ldr	r2, [r3, #20]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	4413      	add	r3, r2
 800b324:	1e5a      	subs	r2, r3, #1
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b32e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	015a      	lsls	r2, r3, #5
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	4413      	add	r3, r2
 800b338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33c:	691a      	ldr	r2, [r3, #16]
 800b33e:	89fb      	ldrh	r3, [r7, #14]
 800b340:	04d9      	lsls	r1, r3, #19
 800b342:	4b31      	ldr	r3, [pc, #196]	; (800b408 <USB_EPStartXfer+0x3b4>)
 800b344:	400b      	ands	r3, r1
 800b346:	6939      	ldr	r1, [r7, #16]
 800b348:	0148      	lsls	r0, r1, #5
 800b34a:	6979      	ldr	r1, [r7, #20]
 800b34c:	4401      	add	r1, r0
 800b34e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b352:	4313      	orrs	r3, r2
 800b354:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b362:	691a      	ldr	r2, [r3, #16]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	89f9      	ldrh	r1, [r7, #14]
 800b36a:	fb01 f303 	mul.w	r3, r1, r3
 800b36e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b372:	6939      	ldr	r1, [r7, #16]
 800b374:	0148      	lsls	r0, r1, #5
 800b376:	6979      	ldr	r1, [r7, #20]
 800b378:	4401      	add	r1, r0
 800b37a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b37e:	4313      	orrs	r3, r2
 800b380:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	78db      	ldrb	r3, [r3, #3]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d128      	bne.n	800b3dc <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b396:	2b00      	cmp	r3, #0
 800b398:	d110      	bne.n	800b3bc <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	0151      	lsls	r1, r2, #5
 800b3ac:	697a      	ldr	r2, [r7, #20]
 800b3ae:	440a      	add	r2, r1
 800b3b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	e00f      	b.n	800b3dc <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	0151      	lsls	r1, r2, #5
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	440a      	add	r2, r1
 800b3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	0151      	lsls	r1, r2, #5
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	440a      	add	r2, r1
 800b3f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3718      	adds	r7, #24
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	1ff80000 	.word	0x1ff80000

0800b40c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	785b      	ldrb	r3, [r3, #1]
 800b424:	2b01      	cmp	r3, #1
 800b426:	f040 80ab 	bne.w	800b580 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d132      	bne.n	800b498 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	0151      	lsls	r1, r2, #5
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	440a      	add	r2, r1
 800b448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b44c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b450:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	015a      	lsls	r2, r3, #5
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	4413      	add	r3, r2
 800b45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	0151      	lsls	r1, r2, #5
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	440a      	add	r2, r1
 800b46c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	015a      	lsls	r2, r3, #5
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	4413      	add	r3, r2
 800b47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	0151      	lsls	r1, r2, #5
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	440a      	add	r2, r1
 800b48c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b490:	0cdb      	lsrs	r3, r3, #19
 800b492:	04db      	lsls	r3, r3, #19
 800b494:	6113      	str	r3, [r2, #16]
 800b496:	e04e      	b.n	800b536 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	015a      	lsls	r2, r3, #5
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	0151      	lsls	r1, r2, #5
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	440a      	add	r2, r1
 800b4ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4b2:	0cdb      	lsrs	r3, r3, #19
 800b4b4:	04db      	lsls	r3, r3, #19
 800b4b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	0151      	lsls	r1, r2, #5
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	440a      	add	r2, r1
 800b4ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	695a      	ldr	r2, [r3, #20]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d903      	bls.n	800b4f0 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	015a      	lsls	r2, r3, #5
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	0151      	lsls	r1, r2, #5
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	440a      	add	r2, r1
 800b506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b50a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b50e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51c:	691a      	ldr	r2, [r3, #16]
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b526:	68b9      	ldr	r1, [r7, #8]
 800b528:	0148      	lsls	r0, r1, #5
 800b52a:	68f9      	ldr	r1, [r7, #12]
 800b52c:	4401      	add	r1, r0
 800b52e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b532:	4313      	orrs	r3, r2
 800b534:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	0151      	lsls	r1, r2, #5
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	440a      	add	r2, r1
 800b54c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b550:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b554:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	695b      	ldr	r3, [r3, #20]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d06d      	beq.n	800b63a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	f003 030f 	and.w	r3, r3, #15
 800b56e:	2101      	movs	r1, #1
 800b570:	fa01 f303 	lsl.w	r3, r1, r3
 800b574:	68f9      	ldr	r1, [r7, #12]
 800b576:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b57a:	4313      	orrs	r3, r2
 800b57c:	634b      	str	r3, [r1, #52]	; 0x34
 800b57e:	e05c      	b.n	800b63a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	015a      	lsls	r2, r3, #5
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	0151      	lsls	r1, r2, #5
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	440a      	add	r2, r1
 800b596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b59a:	0cdb      	lsrs	r3, r3, #19
 800b59c:	04db      	lsls	r3, r3, #19
 800b59e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	015a      	lsls	r2, r3, #5
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	0151      	lsls	r1, r2, #5
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	440a      	add	r2, r1
 800b5b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5c2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	689a      	ldr	r2, [r3, #8]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	015a      	lsls	r2, r3, #5
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	0151      	lsls	r1, r2, #5
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	440a      	add	r2, r1
 800b5ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b600:	691a      	ldr	r2, [r3, #16]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b60a:	68b9      	ldr	r1, [r7, #8]
 800b60c:	0148      	lsls	r0, r1, #5
 800b60e:	68f9      	ldr	r1, [r7, #12]
 800b610:	4401      	add	r1, r0
 800b612:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b616:	4313      	orrs	r3, r2
 800b618:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	015a      	lsls	r2, r3, #5
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	4413      	add	r3, r2
 800b622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	0151      	lsls	r1, r2, #5
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	440a      	add	r2, r1
 800b630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b634:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b638:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b648:	b480      	push	{r7}
 800b64a:	b089      	sub	sp, #36	; 0x24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	4611      	mov	r1, r2
 800b654:	461a      	mov	r2, r3
 800b656:	460b      	mov	r3, r1
 800b658:	71fb      	strb	r3, [r7, #7]
 800b65a:	4613      	mov	r3, r2
 800b65c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b666:	88bb      	ldrh	r3, [r7, #4]
 800b668:	3303      	adds	r3, #3
 800b66a:	089b      	lsrs	r3, r3, #2
 800b66c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b66e:	2300      	movs	r3, #0
 800b670:	61bb      	str	r3, [r7, #24]
 800b672:	e00f      	b.n	800b694 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b674:	79fb      	ldrb	r3, [r7, #7]
 800b676:	031a      	lsls	r2, r3, #12
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b680:	461a      	mov	r2, r3
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	3304      	adds	r3, #4
 800b68c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	3301      	adds	r3, #1
 800b692:	61bb      	str	r3, [r7, #24]
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d3eb      	bcc.n	800b674 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3724      	adds	r7, #36	; 0x24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b089      	sub	sp, #36	; 0x24
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	60f8      	str	r0, [r7, #12]
 800b6b2:	60b9      	str	r1, [r7, #8]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b6c0:	88fb      	ldrh	r3, [r7, #6]
 800b6c2:	3303      	adds	r3, #3
 800b6c4:	089b      	lsrs	r3, r3, #2
 800b6c6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	61bb      	str	r3, [r7, #24]
 800b6cc:	e00b      	b.n	800b6e6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	601a      	str	r2, [r3, #0]
    pDest++;
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	3304      	adds	r3, #4
 800b6de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	61bb      	str	r3, [r7, #24]
 800b6e6:	69ba      	ldr	r2, [r7, #24]
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d3ef      	bcc.n	800b6ce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b6ee:	69fb      	ldr	r3, [r7, #28]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3724      	adds	r7, #36	; 0x24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	785b      	ldrb	r3, [r3, #1]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d12c      	bne.n	800b772 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	db12      	blt.n	800b750 <USB_EPSetStall+0x54>
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00f      	beq.n	800b750 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	015a      	lsls	r2, r3, #5
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	4413      	add	r3, r2
 800b738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	0151      	lsls	r1, r2, #5
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	440a      	add	r2, r1
 800b746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b74a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b74e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	015a      	lsls	r2, r3, #5
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	4413      	add	r3, r2
 800b758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	0151      	lsls	r1, r2, #5
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	440a      	add	r2, r1
 800b766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b76a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b76e:	6013      	str	r3, [r2, #0]
 800b770:	e02b      	b.n	800b7ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	015a      	lsls	r2, r3, #5
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	4413      	add	r3, r2
 800b77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	db12      	blt.n	800b7aa <USB_EPSetStall+0xae>
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00f      	beq.n	800b7aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	015a      	lsls	r2, r3, #5
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	4413      	add	r3, r2
 800b792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	0151      	lsls	r1, r2, #5
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	440a      	add	r2, r1
 800b7a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b7a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	015a      	lsls	r2, r3, #5
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	0151      	lsls	r1, r2, #5
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	440a      	add	r2, r1
 800b7c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	785b      	ldrb	r3, [r3, #1]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d128      	bne.n	800b846 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	015a      	lsls	r2, r3, #5
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	0151      	lsls	r1, r2, #5
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	440a      	add	r2, r1
 800b80a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b80e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b812:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	78db      	ldrb	r3, [r3, #3]
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d003      	beq.n	800b824 <USB_EPClearStall+0x4c>
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	78db      	ldrb	r3, [r3, #3]
 800b820:	2b02      	cmp	r3, #2
 800b822:	d138      	bne.n	800b896 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	015a      	lsls	r2, r3, #5
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	4413      	add	r3, r2
 800b82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	0151      	lsls	r1, r2, #5
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	440a      	add	r2, r1
 800b83a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b83e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b842:	6013      	str	r3, [r2, #0]
 800b844:	e027      	b.n	800b896 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	015a      	lsls	r2, r3, #5
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	4413      	add	r3, r2
 800b84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	0151      	lsls	r1, r2, #5
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	440a      	add	r2, r1
 800b85c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b860:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b864:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	78db      	ldrb	r3, [r3, #3]
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	d003      	beq.n	800b876 <USB_EPClearStall+0x9e>
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	78db      	ldrb	r3, [r3, #3]
 800b872:	2b02      	cmp	r3, #2
 800b874:	d10f      	bne.n	800b896 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	015a      	lsls	r2, r3, #5
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	4413      	add	r3, r2
 800b87e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	0151      	lsls	r1, r2, #5
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	440a      	add	r2, r1
 800b88c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b894:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3714      	adds	r7, #20
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b8c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	011b      	lsls	r3, r3, #4
 800b8d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b8d8:	68f9      	ldr	r1, [r7, #12]
 800b8da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b90a:	f023 0303 	bic.w	r3, r3, #3
 800b90e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b91e:	f023 0302 	bic.w	r3, r3, #2
 800b922:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b932:	b480      	push	{r7}
 800b934:	b085      	sub	sp, #20
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b94c:	f023 0303 	bic.w	r3, r3, #3
 800b950:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b960:	f043 0302 	orr.w	r3, r3, #2
 800b964:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	695b      	ldr	r3, [r3, #20]
 800b980:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	699b      	ldr	r3, [r3, #24]
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	4013      	ands	r3, r2
 800b98a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b98c:	68fb      	ldr	r3, [r7, #12]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b085      	sub	sp, #20
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9b6:	69db      	ldr	r3, [r3, #28]
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	0c1b      	lsrs	r3, r3, #16
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b085      	sub	sp, #20
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ea:	69db      	ldr	r3, [r3, #28]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	b29b      	uxth	r3, r3
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3714      	adds	r7, #20
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba02:	b480      	push	{r7}
 800ba04:	b085      	sub	sp, #20
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba12:	78fb      	ldrb	r3, [r7, #3]
 800ba14:	015a      	lsls	r2, r3, #5
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	4413      	add	r3, r2
 800ba1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba28:	695b      	ldr	r3, [r3, #20]
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba30:	68bb      	ldr	r3, [r7, #8]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b087      	sub	sp, #28
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	460b      	mov	r3, r1
 800ba48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ba62:	78fb      	ldrb	r3, [r7, #3]
 800ba64:	f003 030f 	and.w	r3, r3, #15
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba6e:	01db      	lsls	r3, r3, #7
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	693a      	ldr	r2, [r7, #16]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ba78:	78fb      	ldrb	r3, [r7, #3]
 800ba7a:	015a      	lsls	r2, r3, #5
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	4413      	add	r3, r2
 800ba80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	4013      	ands	r3, r2
 800ba8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba8c:	68bb      	ldr	r3, [r7, #8]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	371c      	adds	r7, #28
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b083      	sub	sp, #12
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	f003 0301 	and.w	r3, r3, #1
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b085      	sub	sp, #20
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bad0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bad4:	f023 0307 	bic.w	r3, r3, #7
 800bad8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3714      	adds	r7, #20
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	333c      	adds	r3, #60	; 0x3c
 800bb0e:	3304      	adds	r3, #4
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	4a1c      	ldr	r2, [pc, #112]	; (800bb88 <USB_EP0_OutStart+0x8c>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d90a      	bls.n	800bb32 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb2c:	d101      	bne.n	800bb32 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e024      	b.n	800bb7c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb38:	461a      	mov	r2, r3
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb60:	f043 0318 	orr.w	r3, r3, #24
 800bb64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb6c:	691b      	ldr	r3, [r3, #16]
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bb78:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr
 800bb88:	4f54300a 	.word	0x4f54300a

0800bb8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	4a13      	ldr	r2, [pc, #76]	; (800bbf0 <USB_CoreReset+0x64>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d901      	bls.n	800bbaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e01b      	b.n	800bbe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	daf2      	bge.n	800bb98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	f043 0201 	orr.w	r2, r3, #1
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	60fb      	str	r3, [r7, #12]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4a09      	ldr	r2, [pc, #36]	; (800bbf0 <USB_CoreReset+0x64>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d901      	bls.n	800bbd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	e006      	b.n	800bbe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	691b      	ldr	r3, [r3, #16]
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d0f0      	beq.n	800bbc2 <USB_CoreReset+0x36>

  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	00030d40 	.word	0x00030d40

0800bbf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bbf8:	4904      	ldr	r1, [pc, #16]	; (800bc0c <MX_FATFS_Init+0x18>)
 800bbfa:	4805      	ldr	r0, [pc, #20]	; (800bc10 <MX_FATFS_Init+0x1c>)
 800bbfc:	f001 ff30 	bl	800da60 <FATFS_LinkDriver>
 800bc00:	4603      	mov	r3, r0
 800bc02:	461a      	mov	r2, r3
 800bc04:	4b03      	ldr	r3, [pc, #12]	; (800bc14 <MX_FATFS_Init+0x20>)
 800bc06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bc08:	bf00      	nop
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	2000296c 	.word	0x2000296c
 800bc10:	08012240 	.word	0x08012240
 800bc14:	20002968 	.word	0x20002968

0800bc18 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bc22:	f000 f885 	bl	800bd30 <BSP_SD_IsDetected>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d001      	beq.n	800bc30 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	e012      	b.n	800bc56 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bc30:	480b      	ldr	r0, [pc, #44]	; (800bc60 <BSP_SD_Init+0x48>)
 800bc32:	f7fb fd8d 	bl	8007750 <HAL_SD_Init>
 800bc36:	4603      	mov	r3, r0
 800bc38:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bc3a:	79fb      	ldrb	r3, [r7, #7]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d109      	bne.n	800bc54 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bc40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bc44:	4806      	ldr	r0, [pc, #24]	; (800bc60 <BSP_SD_Init+0x48>)
 800bc46:	f7fc fc53 	bl	80084f0 <HAL_SD_ConfigWideBusOperation>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d001      	beq.n	800bc54 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bc54:	79fb      	ldrb	r3, [r7, #7]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	2000205c 	.word	0x2000205c

0800bc64 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	68f9      	ldr	r1, [r7, #12]
 800bc7a:	4806      	ldr	r0, [pc, #24]	; (800bc94 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bc7c:	f7fb fea2 	bl	80079c4 <HAL_SD_ReadBlocks_DMA>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	2000205c 	.word	0x2000205c

0800bc98 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	68f9      	ldr	r1, [r7, #12]
 800bcae:	4806      	ldr	r0, [pc, #24]	; (800bcc8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bcb0:	f7fb ff30 	bl	8007b14 <HAL_SD_WriteBlocks_DMA>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3718      	adds	r7, #24
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	2000205c 	.word	0x2000205c

0800bccc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bcd0:	4805      	ldr	r0, [pc, #20]	; (800bce8 <BSP_SD_GetCardState+0x1c>)
 800bcd2:	f7fc fd21 	bl	8008718 <HAL_SD_GetCardState>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b04      	cmp	r3, #4
 800bcda:	bf14      	ite	ne
 800bcdc:	2301      	movne	r3, #1
 800bcde:	2300      	moveq	r3, #0
 800bce0:	b2db      	uxtb	r3, r3
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	2000205c 	.word	0x2000205c

0800bcec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bcf4:	6879      	ldr	r1, [r7, #4]
 800bcf6:	4803      	ldr	r0, [pc, #12]	; (800bd04 <BSP_SD_GetCardInfo+0x18>)
 800bcf8:	f7fc fbce 	bl	8008498 <HAL_SD_GetCardInfo>
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	2000205c 	.word	0x2000205c

0800bd08 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bd10:	f000 f9ac 	bl	800c06c <BSP_SD_WriteCpltCallback>
}
 800bd14:	bf00      	nop
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bd24:	f000 f9b4 	bl	800c090 <BSP_SD_ReadCpltCallback>
}
 800bd28:	bf00      	nop
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bd36:	2301      	movs	r3, #1
 800bd38:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bd3a:	f000 f80b 	bl	800bd54 <BSP_PlatformIsDetected>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d101      	bne.n	800bd48 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bd44:	2300      	movs	r3, #0
 800bd46:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bd48:	79fb      	ldrb	r3, [r7, #7]
 800bd4a:	b2db      	uxtb	r3, r3
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bd5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bd62:	4806      	ldr	r0, [pc, #24]	; (800bd7c <BSP_PlatformIsDetected+0x28>)
 800bd64:	f7f7 faee 	bl	8003344 <HAL_GPIO_ReadPin>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bd72:	79fb      	ldrb	r3, [r7, #7]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	48000400 	.word	0x48000400

0800bd80 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800bd88:	f001 ff2a 	bl	800dbe0 <osKernelGetTickCount>
 800bd8c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800bd8e:	e006      	b.n	800bd9e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd90:	f7ff ff9c 	bl	800bccc <BSP_SD_GetCardState>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	e009      	b.n	800bdb2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800bd9e:	f001 ff1f 	bl	800dbe0 <osKernelGetTickCount>
 800bda2:	4602      	mov	r2, r0
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	1ad3      	subs	r3, r2, r3
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d8f0      	bhi.n	800bd90 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bdae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
	...

0800bdbc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bdc6:	4b0b      	ldr	r3, [pc, #44]	; (800bdf4 <SD_CheckStatus+0x38>)
 800bdc8:	2201      	movs	r2, #1
 800bdca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bdcc:	f7ff ff7e 	bl	800bccc <BSP_SD_GetCardState>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d107      	bne.n	800bde6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bdd6:	4b07      	ldr	r3, [pc, #28]	; (800bdf4 <SD_CheckStatus+0x38>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	f023 0301 	bic.w	r3, r3, #1
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	4b04      	ldr	r3, [pc, #16]	; (800bdf4 <SD_CheckStatus+0x38>)
 800bde4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bde6:	4b03      	ldr	r3, [pc, #12]	; (800bdf4 <SD_CheckStatus+0x38>)
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	b2db      	uxtb	r3, r3
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20000009 	.word	0x20000009

0800bdf8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	4603      	mov	r3, r0
 800be00:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800be02:	4b1c      	ldr	r3, [pc, #112]	; (800be74 <SD_initialize+0x7c>)
 800be04:	2201      	movs	r2, #1
 800be06:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800be08:	f001 fea2 	bl	800db50 <osKernelGetState>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b02      	cmp	r3, #2
 800be10:	d129      	bne.n	800be66 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800be12:	f7ff ff01 	bl	800bc18 <BSP_SD_Init>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d107      	bne.n	800be2c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800be1c:	79fb      	ldrb	r3, [r7, #7]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff ffcc 	bl	800bdbc <SD_CheckStatus>
 800be24:	4603      	mov	r3, r0
 800be26:	461a      	mov	r2, r3
 800be28:	4b12      	ldr	r3, [pc, #72]	; (800be74 <SD_initialize+0x7c>)
 800be2a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800be2c:	4b11      	ldr	r3, [pc, #68]	; (800be74 <SD_initialize+0x7c>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b01      	cmp	r3, #1
 800be34:	d017      	beq.n	800be66 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800be36:	4b10      	ldr	r3, [pc, #64]	; (800be78 <SD_initialize+0x80>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d107      	bne.n	800be4e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800be3e:	2200      	movs	r2, #0
 800be40:	2102      	movs	r1, #2
 800be42:	200a      	movs	r0, #10
 800be44:	f002 f8aa 	bl	800df9c <osMessageQueueNew>
 800be48:	4603      	mov	r3, r0
 800be4a:	4a0b      	ldr	r2, [pc, #44]	; (800be78 <SD_initialize+0x80>)
 800be4c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800be4e:	4b0a      	ldr	r3, [pc, #40]	; (800be78 <SD_initialize+0x80>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d107      	bne.n	800be66 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800be56:	4b07      	ldr	r3, [pc, #28]	; (800be74 <SD_initialize+0x7c>)
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	f043 0301 	orr.w	r3, r3, #1
 800be60:	b2da      	uxtb	r2, r3
 800be62:	4b04      	ldr	r3, [pc, #16]	; (800be74 <SD_initialize+0x7c>)
 800be64:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800be66:	4b03      	ldr	r3, [pc, #12]	; (800be74 <SD_initialize+0x7c>)
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	b2db      	uxtb	r3, r3
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	20000009 	.word	0x20000009
 800be78:	200001dc 	.word	0x200001dc

0800be7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	4603      	mov	r3, r0
 800be84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	4618      	mov	r0, r3
 800be8a:	f7ff ff97 	bl	800bdbc <SD_CheckStatus>
 800be8e:	4603      	mov	r3, r0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b088      	sub	sp, #32
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60b9      	str	r1, [r7, #8]
 800bea0:	607a      	str	r2, [r7, #4]
 800bea2:	603b      	str	r3, [r7, #0]
 800bea4:	4603      	mov	r3, r0
 800bea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800beac:	f247 5030 	movw	r0, #30000	; 0x7530
 800beb0:	f7ff ff66 	bl	800bd80 <SD_CheckStatusWithTimeout>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	da01      	bge.n	800bebe <SD_read+0x26>
  {
    return res;
 800beba:	7ffb      	ldrb	r3, [r7, #31]
 800bebc:	e02f      	b.n	800bf1e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	6879      	ldr	r1, [r7, #4]
 800bec2:	68b8      	ldr	r0, [r7, #8]
 800bec4:	f7ff fece 	bl	800bc64 <BSP_SD_ReadBlocks_DMA>
 800bec8:	4603      	mov	r3, r0
 800beca:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800becc:	7fbb      	ldrb	r3, [r7, #30]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d124      	bne.n	800bf1c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bed2:	4b15      	ldr	r3, [pc, #84]	; (800bf28 <SD_read+0x90>)
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	f107 0112 	add.w	r1, r7, #18
 800beda:	f247 5330 	movw	r3, #30000	; 0x7530
 800bede:	2200      	movs	r2, #0
 800bee0:	f002 f930 	bl	800e144 <osMessageQueueGet>
 800bee4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d117      	bne.n	800bf1c <SD_read+0x84>
 800beec:	8a7b      	ldrh	r3, [r7, #18]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d114      	bne.n	800bf1c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800bef2:	f001 fe75 	bl	800dbe0 <osKernelGetTickCount>
 800bef6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bef8:	e007      	b.n	800bf0a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800befa:	f7ff fee7 	bl	800bccc <BSP_SD_GetCardState>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d102      	bne.n	800bf0a <SD_read+0x72>
              {
                res = RES_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bf08:	e008      	b.n	800bf1c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bf0a:	f001 fe69 	bl	800dbe0 <osKernelGetTickCount>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	f247 522f 	movw	r2, #29999	; 0x752f
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d9ee      	bls.n	800befa <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bf1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3720      	adds	r7, #32
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	200001dc 	.word	0x200001dc

0800bf2c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60b9      	str	r1, [r7, #8]
 800bf34:	607a      	str	r2, [r7, #4]
 800bf36:	603b      	str	r3, [r7, #0]
 800bf38:	4603      	mov	r3, r0
 800bf3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf40:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf44:	f7ff ff1c 	bl	800bd80 <SD_CheckStatusWithTimeout>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	da01      	bge.n	800bf52 <SD_write+0x26>
  {
    return res;
 800bf4e:	7ffb      	ldrb	r3, [r7, #31]
 800bf50:	e02d      	b.n	800bfae <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	6879      	ldr	r1, [r7, #4]
 800bf56:	68b8      	ldr	r0, [r7, #8]
 800bf58:	f7ff fe9e 	bl	800bc98 <BSP_SD_WriteBlocks_DMA>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d124      	bne.n	800bfac <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bf62:	4b15      	ldr	r3, [pc, #84]	; (800bfb8 <SD_write+0x8c>)
 800bf64:	6818      	ldr	r0, [r3, #0]
 800bf66:	f107 0112 	add.w	r1, r7, #18
 800bf6a:	f247 5330 	movw	r3, #30000	; 0x7530
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f002 f8e8 	bl	800e144 <osMessageQueueGet>
 800bf74:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d117      	bne.n	800bfac <SD_write+0x80>
 800bf7c:	8a7b      	ldrh	r3, [r7, #18]
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d114      	bne.n	800bfac <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800bf82:	f001 fe2d 	bl	800dbe0 <osKernelGetTickCount>
 800bf86:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800bf88:	e007      	b.n	800bf9a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bf8a:	f7ff fe9f 	bl	800bccc <BSP_SD_GetCardState>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d102      	bne.n	800bf9a <SD_write+0x6e>
          {
            res = RES_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	77fb      	strb	r3, [r7, #31]
            break;
 800bf98:	e008      	b.n	800bfac <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800bf9a:	f001 fe21 	bl	800dbe0 <osKernelGetTickCount>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	f247 522f 	movw	r2, #29999	; 0x752f
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d9ee      	bls.n	800bf8a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800bfac:	7ffb      	ldrb	r3, [r7, #31]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3720      	adds	r7, #32
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	200001dc 	.word	0x200001dc

0800bfbc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b08c      	sub	sp, #48	; 0x30
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	603a      	str	r2, [r7, #0]
 800bfc6:	71fb      	strb	r3, [r7, #7]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bfd2:	4b25      	ldr	r3, [pc, #148]	; (800c068 <SD_ioctl+0xac>)
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <SD_ioctl+0x28>
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e03c      	b.n	800c05e <SD_ioctl+0xa2>

  switch (cmd)
 800bfe4:	79bb      	ldrb	r3, [r7, #6]
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d834      	bhi.n	800c054 <SD_ioctl+0x98>
 800bfea:	a201      	add	r2, pc, #4	; (adr r2, 800bff0 <SD_ioctl+0x34>)
 800bfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff0:	0800c001 	.word	0x0800c001
 800bff4:	0800c009 	.word	0x0800c009
 800bff8:	0800c021 	.word	0x0800c021
 800bffc:	0800c03b 	.word	0x0800c03b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c006:	e028      	b.n	800c05a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c008:	f107 0308 	add.w	r3, r7, #8
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7ff fe6d 	bl	800bcec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c012:	6a3a      	ldr	r2, [r7, #32]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c01e:	e01c      	b.n	800c05a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c020:	f107 0308 	add.w	r3, r7, #8
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff fe61 	bl	800bcec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c032:	2300      	movs	r3, #0
 800c034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c038:	e00f      	b.n	800c05a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c03a:	f107 0308 	add.w	r3, r7, #8
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff fe54 	bl	800bcec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	0a5a      	lsrs	r2, r3, #9
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c052:	e002      	b.n	800c05a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c054:	2304      	movs	r3, #4
 800c056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c05a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3730      	adds	r7, #48	; 0x30
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20000009 	.word	0x20000009

0800c06c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800c072:	2302      	movs	r3, #2
 800c074:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c076:	4b05      	ldr	r3, [pc, #20]	; (800c08c <BSP_SD_WriteCpltCallback+0x20>)
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	1db9      	adds	r1, r7, #6
 800c07c:	2300      	movs	r3, #0
 800c07e:	2200      	movs	r2, #0
 800c080:	f002 f800 	bl	800e084 <osMessageQueuePut>
#endif
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	200001dc 	.word	0x200001dc

0800c090 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800c096:	2301      	movs	r3, #1
 800c098:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c09a:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <BSP_SD_ReadCpltCallback+0x20>)
 800c09c:	6818      	ldr	r0, [r3, #0]
 800c09e:	1db9      	adds	r1, r7, #6
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f001 ffee 	bl	800e084 <osMessageQueuePut>
#endif
}
 800c0a8:	bf00      	nop
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	200001dc 	.word	0x200001dc

0800c0b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	460b      	mov	r3, r1
 800c0be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c0c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c0c4:	f005 ff96 	bl	8011ff4 <USBD_static_malloc>
 800c0c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d105      	bne.n	800c0dc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c0d8:	2302      	movs	r3, #2
 800c0da:	e066      	b.n	800c1aa <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	7c1b      	ldrb	r3, [r3, #16]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d119      	bne.n	800c120 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c0ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	2181      	movs	r1, #129	; 0x81
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f005 fd69 	bl	8011bcc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c100:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c104:	2202      	movs	r2, #2
 800c106:	2101      	movs	r1, #1
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f005 fd5f 	bl	8011bcc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2210      	movs	r2, #16
 800c11a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c11e:	e016      	b.n	800c14e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c120:	2340      	movs	r3, #64	; 0x40
 800c122:	2202      	movs	r2, #2
 800c124:	2181      	movs	r1, #129	; 0x81
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f005 fd50 	bl	8011bcc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c132:	2340      	movs	r3, #64	; 0x40
 800c134:	2202      	movs	r2, #2
 800c136:	2101      	movs	r1, #1
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f005 fd47 	bl	8011bcc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2210      	movs	r2, #16
 800c14a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c14e:	2308      	movs	r3, #8
 800c150:	2203      	movs	r2, #3
 800c152:	2182      	movs	r1, #130	; 0x82
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f005 fd39 	bl	8011bcc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2200      	movs	r2, #0
 800c170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7c1b      	ldrb	r3, [r3, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d109      	bne.n	800c198 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c18a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c18e:	2101      	movs	r1, #1
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f005 fe95 	bl	8011ec0 <USBD_LL_PrepareReceive>
 800c196:	e007      	b.n	800c1a8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c19e:	2340      	movs	r3, #64	; 0x40
 800c1a0:	2101      	movs	r1, #1
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f005 fe8c 	bl	8011ec0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b082      	sub	sp, #8
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c1be:	2181      	movs	r1, #129	; 0x81
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f005 fd41 	bl	8011c48 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c1cc:	2101      	movs	r1, #1
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f005 fd3a 	bl	8011c48 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c1dc:	2182      	movs	r1, #130	; 0x82
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f005 fd32 	bl	8011c48 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00e      	beq.n	800c21c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c20e:	4618      	mov	r0, r3
 800c210:	f005 fefe 	bl	8012010 <USBD_static_free>
    pdev->pClassData = NULL;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
	...

0800c228 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b086      	sub	sp, #24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c238:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c23a:	2300      	movs	r3, #0
 800c23c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c23e:	2300      	movs	r3, #0
 800c240:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c242:	2300      	movs	r3, #0
 800c244:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c24c:	2303      	movs	r3, #3
 800c24e:	e0af      	b.n	800c3b0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d03f      	beq.n	800c2dc <USBD_CDC_Setup+0xb4>
 800c25c:	2b20      	cmp	r3, #32
 800c25e:	f040 809f 	bne.w	800c3a0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	88db      	ldrh	r3, [r3, #6]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d02e      	beq.n	800c2c8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	b25b      	sxtb	r3, r3
 800c270:	2b00      	cmp	r3, #0
 800c272:	da16      	bge.n	800c2a2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c280:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c282:	683a      	ldr	r2, [r7, #0]
 800c284:	88d2      	ldrh	r2, [r2, #6]
 800c286:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	88db      	ldrh	r3, [r3, #6]
 800c28c:	2b07      	cmp	r3, #7
 800c28e:	bf28      	it	cs
 800c290:	2307      	movcs	r3, #7
 800c292:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	89fa      	ldrh	r2, [r7, #14]
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f001 fb13 	bl	800d8c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c2a0:	e085      	b.n	800c3ae <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	785a      	ldrb	r2, [r3, #1]
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	88db      	ldrh	r3, [r3, #6]
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c2b8:	6939      	ldr	r1, [r7, #16]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	88db      	ldrh	r3, [r3, #6]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f001 fb2c 	bl	800d91e <USBD_CtlPrepareRx>
      break;
 800c2c6:	e072      	b.n	800c3ae <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	7850      	ldrb	r0, [r2, #1]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	6839      	ldr	r1, [r7, #0]
 800c2d8:	4798      	blx	r3
      break;
 800c2da:	e068      	b.n	800c3ae <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	785b      	ldrb	r3, [r3, #1]
 800c2e0:	2b0b      	cmp	r3, #11
 800c2e2:	d852      	bhi.n	800c38a <USBD_CDC_Setup+0x162>
 800c2e4:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <USBD_CDC_Setup+0xc4>)
 800c2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ea:	bf00      	nop
 800c2ec:	0800c31d 	.word	0x0800c31d
 800c2f0:	0800c399 	.word	0x0800c399
 800c2f4:	0800c38b 	.word	0x0800c38b
 800c2f8:	0800c38b 	.word	0x0800c38b
 800c2fc:	0800c38b 	.word	0x0800c38b
 800c300:	0800c38b 	.word	0x0800c38b
 800c304:	0800c38b 	.word	0x0800c38b
 800c308:	0800c38b 	.word	0x0800c38b
 800c30c:	0800c38b 	.word	0x0800c38b
 800c310:	0800c38b 	.word	0x0800c38b
 800c314:	0800c347 	.word	0x0800c347
 800c318:	0800c371 	.word	0x0800c371
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c322:	b2db      	uxtb	r3, r3
 800c324:	2b03      	cmp	r3, #3
 800c326:	d107      	bne.n	800c338 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c328:	f107 030a 	add.w	r3, r7, #10
 800c32c:	2202      	movs	r2, #2
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 fac8 	bl	800d8c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c336:	e032      	b.n	800c39e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c338:	6839      	ldr	r1, [r7, #0]
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f001 fa52 	bl	800d7e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c340:	2303      	movs	r3, #3
 800c342:	75fb      	strb	r3, [r7, #23]
          break;
 800c344:	e02b      	b.n	800c39e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b03      	cmp	r3, #3
 800c350:	d107      	bne.n	800c362 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c352:	f107 030d 	add.w	r3, r7, #13
 800c356:	2201      	movs	r2, #1
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f001 fab3 	bl	800d8c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c360:	e01d      	b.n	800c39e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f001 fa3d 	bl	800d7e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c36a:	2303      	movs	r3, #3
 800c36c:	75fb      	strb	r3, [r7, #23]
          break;
 800c36e:	e016      	b.n	800c39e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c376:	b2db      	uxtb	r3, r3
 800c378:	2b03      	cmp	r3, #3
 800c37a:	d00f      	beq.n	800c39c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f001 fa30 	bl	800d7e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c388:	e008      	b.n	800c39c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f001 fa29 	bl	800d7e4 <USBD_CtlError>
          ret = USBD_FAIL;
 800c392:	2303      	movs	r3, #3
 800c394:	75fb      	strb	r3, [r7, #23]
          break;
 800c396:	e002      	b.n	800c39e <USBD_CDC_Setup+0x176>
          break;
 800c398:	bf00      	nop
 800c39a:	e008      	b.n	800c3ae <USBD_CDC_Setup+0x186>
          break;
 800c39c:	bf00      	nop
      }
      break;
 800c39e:	e006      	b.n	800c3ae <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f001 fa1e 	bl	800d7e4 <USBD_CtlError>
      ret = USBD_FAIL;
 800c3a8:	2303      	movs	r3, #3
 800c3aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c3ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	e04f      	b.n	800c47a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c3e2:	78fa      	ldrb	r2, [r7, #3]
 800c3e4:	6879      	ldr	r1, [r7, #4]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	4413      	add	r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	440b      	add	r3, r1
 800c3f0:	3318      	adds	r3, #24
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d029      	beq.n	800c44c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c3f8:	78fa      	ldrb	r2, [r7, #3]
 800c3fa:	6879      	ldr	r1, [r7, #4]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4413      	add	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	440b      	add	r3, r1
 800c406:	3318      	adds	r3, #24
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	78f9      	ldrb	r1, [r7, #3]
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	460b      	mov	r3, r1
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	1a5b      	subs	r3, r3, r1
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4403      	add	r3, r0
 800c418:	3344      	adds	r3, #68	; 0x44
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c420:	fb03 f301 	mul.w	r3, r3, r1
 800c424:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c426:	2b00      	cmp	r3, #0
 800c428:	d110      	bne.n	800c44c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c42a:	78fa      	ldrb	r2, [r7, #3]
 800c42c:	6879      	ldr	r1, [r7, #4]
 800c42e:	4613      	mov	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4413      	add	r3, r2
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	440b      	add	r3, r1
 800c438:	3318      	adds	r3, #24
 800c43a:	2200      	movs	r2, #0
 800c43c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c43e:	78f9      	ldrb	r1, [r7, #3]
 800c440:	2300      	movs	r3, #0
 800c442:	2200      	movs	r2, #0
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f005 fd03 	bl	8011e50 <USBD_LL_Transmit>
 800c44a:	e015      	b.n	800c478 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2200      	movs	r2, #0
 800c450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00b      	beq.n	800c478 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c474:	78fa      	ldrb	r2, [r7, #3]
 800c476:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b084      	sub	sp, #16
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	460b      	mov	r3, r1
 800c48c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c494:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d101      	bne.n	800c4a4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e015      	b.n	800c4d0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f005 fd41 	bl	8011f30 <USBD_LL_GetRxDataSize>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d101      	bne.n	800c4f2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c4ee:	2303      	movs	r3, #3
 800c4f0:	e01b      	b.n	800c52a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d015      	beq.n	800c528 <USBD_CDC_EP0_RxReady+0x50>
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c502:	2bff      	cmp	r3, #255	; 0xff
 800c504:	d010      	beq.n	800c528 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c514:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c51c:	b292      	uxth	r2, r2
 800c51e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	22ff      	movs	r2, #255	; 0xff
 800c524:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
	...

0800c534 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2243      	movs	r2, #67	; 0x43
 800c540:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c542:	4b03      	ldr	r3, [pc, #12]	; (800c550 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c544:	4618      	mov	r0, r3
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	20000094 	.word	0x20000094

0800c554 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2243      	movs	r2, #67	; 0x43
 800c560:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c562:	4b03      	ldr	r3, [pc, #12]	; (800c570 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	20000050 	.word	0x20000050

0800c574 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2243      	movs	r2, #67	; 0x43
 800c580:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c582:	4b03      	ldr	r3, [pc, #12]	; (800c590 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c584:	4618      	mov	r0, r3
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	200000d8 	.word	0x200000d8

0800c594 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	220a      	movs	r2, #10
 800c5a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c5a2:	4b03      	ldr	r3, [pc, #12]	; (800c5b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	2000000c 	.word	0x2000000c

0800c5b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	e004      	b.n	800c5d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c5d0:	2300      	movs	r3, #0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	370c      	adds	r7, #12
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr

0800c5de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c5de:	b480      	push	{r7}
 800c5e0:	b087      	sub	sp, #28
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	60f8      	str	r0, [r7, #12]
 800c5e6:	60b9      	str	r1, [r7, #8]
 800c5e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5f0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d101      	bne.n	800c5fc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e008      	b.n	800c60e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	371c      	adds	r7, #28
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c61a:	b480      	push	{r7}
 800c61c:	b085      	sub	sp, #20
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c62a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c632:	2303      	movs	r3, #3
 800c634:	e004      	b.n	800c640 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3714      	adds	r7, #20
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c65a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c662:	2b00      	cmp	r3, #0
 800c664:	d101      	bne.n	800c66a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c666:	2303      	movs	r3, #3
 800c668:	e016      	b.n	800c698 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	7c1b      	ldrb	r3, [r3, #16]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d109      	bne.n	800c686 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c67c:	2101      	movs	r1, #1
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f005 fc1e 	bl	8011ec0 <USBD_LL_PrepareReceive>
 800c684:	e007      	b.n	800c696 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c68c:	2340      	movs	r3, #64	; 0x40
 800c68e:	2101      	movs	r1, #1
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f005 fc15 	bl	8011ec0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c696:	2300      	movs	r3, #0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b086      	sub	sp, #24
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d101      	bne.n	800c6b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	e01f      	b.n	800c6f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d003      	beq.n	800c6de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	79fa      	ldrb	r2, [r7, #7]
 800c6ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f005 f9f1 	bl	8011ad4 <USBD_LL_Init>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3718      	adds	r7, #24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c70a:	2300      	movs	r3, #0
 800c70c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d101      	bne.n	800c718 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c714:	2303      	movs	r3, #3
 800c716:	e016      	b.n	800c746 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00b      	beq.n	800c744 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	f107 020e 	add.w	r2, r7, #14
 800c738:	4610      	mov	r0, r2
 800c73a:	4798      	blx	r3
 800c73c:	4602      	mov	r2, r0
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b082      	sub	sp, #8
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f005 fa06 	bl	8011b68 <USBD_LL_Start>
 800c75c:	4603      	mov	r3, r0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c766:	b480      	push	{r7}
 800c768:	b083      	sub	sp, #12
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	460b      	mov	r3, r1
 800c786:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c788:	2303      	movs	r3, #3
 800c78a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c792:	2b00      	cmp	r3, #0
 800c794:	d009      	beq.n	800c7aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	78fa      	ldrb	r2, [r7, #3]
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	4798      	blx	r3
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d007      	beq.n	800c7da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	78fa      	ldrb	r2, [r7, #3]
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	4798      	blx	r3
  }

  return USBD_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f000 ffba 	bl	800d770 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c80a:	461a      	mov	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c818:	f003 031f 	and.w	r3, r3, #31
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d01a      	beq.n	800c856 <USBD_LL_SetupStage+0x72>
 800c820:	2b02      	cmp	r3, #2
 800c822:	d822      	bhi.n	800c86a <USBD_LL_SetupStage+0x86>
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <USBD_LL_SetupStage+0x4a>
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d00a      	beq.n	800c842 <USBD_LL_SetupStage+0x5e>
 800c82c:	e01d      	b.n	800c86a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fa62 	bl	800cd00 <USBD_StdDevReq>
 800c83c:	4603      	mov	r3, r0
 800c83e:	73fb      	strb	r3, [r7, #15]
      break;
 800c840:	e020      	b.n	800c884 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c848:	4619      	mov	r1, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 fac6 	bl	800cddc <USBD_StdItfReq>
 800c850:	4603      	mov	r3, r0
 800c852:	73fb      	strb	r3, [r7, #15]
      break;
 800c854:	e016      	b.n	800c884 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c85c:	4619      	mov	r1, r3
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fb05 	bl	800ce6e <USBD_StdEPReq>
 800c864:	4603      	mov	r3, r0
 800c866:	73fb      	strb	r3, [r7, #15]
      break;
 800c868:	e00c      	b.n	800c884 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c870:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c874:	b2db      	uxtb	r3, r3
 800c876:	4619      	mov	r1, r3
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f005 fa1b 	bl	8011cb4 <USBD_LL_StallEP>
 800c87e:	4603      	mov	r3, r0
 800c880:	73fb      	strb	r3, [r7, #15]
      break;
 800c882:	bf00      	nop
  }

  return ret;
 800c884:	7bfb      	ldrb	r3, [r7, #15]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b086      	sub	sp, #24
 800c892:	af00      	add	r7, sp, #0
 800c894:	60f8      	str	r0, [r7, #12]
 800c896:	460b      	mov	r3, r1
 800c898:	607a      	str	r2, [r7, #4]
 800c89a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c89c:	7afb      	ldrb	r3, [r7, #11]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d138      	bne.n	800c914 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c8a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	d14a      	bne.n	800c94a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	689a      	ldr	r2, [r3, #8]
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d913      	bls.n	800c8e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	689a      	ldr	r2, [r3, #8]
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	1ad2      	subs	r2, r2, r3
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	68da      	ldr	r2, [r3, #12]
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	bf28      	it	cs
 800c8da:	4613      	movcs	r3, r2
 800c8dc:	461a      	mov	r2, r3
 800c8de:	6879      	ldr	r1, [r7, #4]
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f001 f839 	bl	800d958 <USBD_CtlContinueRx>
 800c8e6:	e030      	b.n	800c94a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	d10b      	bne.n	800c90c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d005      	beq.n	800c90c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f001 f834 	bl	800d97a <USBD_CtlSendStatus>
 800c912:	e01a      	b.n	800c94a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b03      	cmp	r3, #3
 800c91e:	d114      	bne.n	800c94a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00e      	beq.n	800c94a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	7afa      	ldrb	r2, [r7, #11]
 800c936:	4611      	mov	r1, r2
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	4798      	blx	r3
 800c93c:	4603      	mov	r3, r0
 800c93e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c940:	7dfb      	ldrb	r3, [r7, #23]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c946:	7dfb      	ldrb	r3, [r7, #23]
 800c948:	e000      	b.n	800c94c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3718      	adds	r7, #24
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	460b      	mov	r3, r1
 800c95e:	607a      	str	r2, [r7, #4]
 800c960:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c962:	7afb      	ldrb	r3, [r7, #11]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d16b      	bne.n	800ca40 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	3314      	adds	r3, #20
 800c96c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c974:	2b02      	cmp	r3, #2
 800c976:	d156      	bne.n	800ca26 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	689a      	ldr	r2, [r3, #8]
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	429a      	cmp	r2, r3
 800c982:	d914      	bls.n	800c9ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	689a      	ldr	r2, [r3, #8]
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	1ad2      	subs	r2, r2, r3
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	461a      	mov	r2, r3
 800c998:	6879      	ldr	r1, [r7, #4]
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	f000 ffae 	bl	800d8fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	f005 fa8a 	bl	8011ec0 <USBD_LL_PrepareReceive>
 800c9ac:	e03b      	b.n	800ca26 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	68da      	ldr	r2, [r3, #12]
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d11c      	bne.n	800c9f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d316      	bcc.n	800c9f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	685a      	ldr	r2, [r3, #4]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d20f      	bcs.n	800c9f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f000 ff8f 	bl	800d8fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f005 fa67 	bl	8011ec0 <USBD_LL_PrepareReceive>
 800c9f2:	e018      	b.n	800ca26 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b03      	cmp	r3, #3
 800c9fe:	d10b      	bne.n	800ca18 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d005      	beq.n	800ca18 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	68f8      	ldr	r0, [r7, #12]
 800ca16:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca18:	2180      	movs	r1, #128	; 0x80
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f005 f94a 	bl	8011cb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	f000 ffbd 	bl	800d9a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d122      	bne.n	800ca76 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f7ff fe98 	bl	800c766 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ca3e:	e01a      	b.n	800ca76 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	2b03      	cmp	r3, #3
 800ca4a:	d114      	bne.n	800ca76 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca52:	695b      	ldr	r3, [r3, #20]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d00e      	beq.n	800ca76 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca5e:	695b      	ldr	r3, [r3, #20]
 800ca60:	7afa      	ldrb	r2, [r7, #11]
 800ca62:	4611      	mov	r1, r2
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	4798      	blx	r3
 800ca68:	4603      	mov	r3, r0
 800ca6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ca6c:	7dfb      	ldrb	r3, [r7, #23]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d001      	beq.n	800ca76 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ca72:	7dfb      	ldrb	r3, [r7, #23]
 800ca74:	e000      	b.n	800ca78 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3718      	adds	r7, #24
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caac:	2b00      	cmp	r3, #0
 800caae:	d101      	bne.n	800cab4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cab0:	2303      	movs	r3, #3
 800cab2:	e02f      	b.n	800cb14 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00f      	beq.n	800cade <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d009      	beq.n	800cade <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	6852      	ldr	r2, [r2, #4]
 800cad6:	b2d2      	uxtb	r2, r2
 800cad8:	4611      	mov	r1, r2
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cade:	2340      	movs	r3, #64	; 0x40
 800cae0:	2200      	movs	r2, #0
 800cae2:	2100      	movs	r1, #0
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f005 f871 	bl	8011bcc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2201      	movs	r2, #1
 800caee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2240      	movs	r2, #64	; 0x40
 800caf6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cafa:	2340      	movs	r3, #64	; 0x40
 800cafc:	2200      	movs	r2, #0
 800cafe:	2180      	movs	r1, #128	; 0x80
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f005 f863 	bl	8011bcc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2240      	movs	r2, #64	; 0x40
 800cb10:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	460b      	mov	r3, r1
 800cb26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	78fa      	ldrb	r2, [r7, #3]
 800cb2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2204      	movs	r2, #4
 800cb56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b04      	cmp	r3, #4
 800cb7a:	d106      	bne.n	800cb8a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	e012      	b.n	800cbd4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b03      	cmp	r3, #3
 800cbb8:	d10b      	bne.n	800cbd2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbc0:	69db      	ldr	r3, [r3, #28]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d005      	beq.n	800cbd2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbcc:	69db      	ldr	r3, [r3, #28]
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3708      	adds	r7, #8
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800cbf2:	2303      	movs	r3, #3
 800cbf4:	e014      	b.n	800cc20 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d10d      	bne.n	800cc1e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d007      	beq.n	800cc1e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc14:	6a1b      	ldr	r3, [r3, #32]
 800cc16:	78fa      	ldrb	r2, [r7, #3]
 800cc18:	4611      	mov	r1, r2
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	460b      	mov	r3, r1
 800cc32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d101      	bne.n	800cc42 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	e014      	b.n	800cc6c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d10d      	bne.n	800cc6a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d007      	beq.n	800cc6a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc62:	78fa      	ldrb	r2, [r7, #3]
 800cc64:	4611      	mov	r1, r2
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	370c      	adds	r7, #12
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b082      	sub	sp, #8
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d009      	beq.n	800ccb8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	6852      	ldr	r2, [r2, #4]
 800ccb0:	b2d2      	uxtb	r2, r2
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	4798      	blx	r3
  }

  return USBD_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b087      	sub	sp, #28
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cce0:	8a3b      	ldrh	r3, [r7, #16]
 800cce2:	021b      	lsls	r3, r3, #8
 800cce4:	b21a      	sxth	r2, r3
 800cce6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	b21b      	sxth	r3, r3
 800ccee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ccf0:	89fb      	ldrh	r3, [r7, #14]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	371c      	adds	r7, #28
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
	...

0800cd00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd16:	2b40      	cmp	r3, #64	; 0x40
 800cd18:	d005      	beq.n	800cd26 <USBD_StdDevReq+0x26>
 800cd1a:	2b40      	cmp	r3, #64	; 0x40
 800cd1c:	d853      	bhi.n	800cdc6 <USBD_StdDevReq+0xc6>
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00b      	beq.n	800cd3a <USBD_StdDevReq+0x3a>
 800cd22:	2b20      	cmp	r3, #32
 800cd24:	d14f      	bne.n	800cdc6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	4798      	blx	r3
 800cd34:	4603      	mov	r3, r0
 800cd36:	73fb      	strb	r3, [r7, #15]
      break;
 800cd38:	e04a      	b.n	800cdd0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	785b      	ldrb	r3, [r3, #1]
 800cd3e:	2b09      	cmp	r3, #9
 800cd40:	d83b      	bhi.n	800cdba <USBD_StdDevReq+0xba>
 800cd42:	a201      	add	r2, pc, #4	; (adr r2, 800cd48 <USBD_StdDevReq+0x48>)
 800cd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd48:	0800cd9d 	.word	0x0800cd9d
 800cd4c:	0800cdb1 	.word	0x0800cdb1
 800cd50:	0800cdbb 	.word	0x0800cdbb
 800cd54:	0800cda7 	.word	0x0800cda7
 800cd58:	0800cdbb 	.word	0x0800cdbb
 800cd5c:	0800cd7b 	.word	0x0800cd7b
 800cd60:	0800cd71 	.word	0x0800cd71
 800cd64:	0800cdbb 	.word	0x0800cdbb
 800cd68:	0800cd93 	.word	0x0800cd93
 800cd6c:	0800cd85 	.word	0x0800cd85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cd70:	6839      	ldr	r1, [r7, #0]
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f9de 	bl	800d134 <USBD_GetDescriptor>
          break;
 800cd78:	e024      	b.n	800cdc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cd7a:	6839      	ldr	r1, [r7, #0]
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 fb6d 	bl	800d45c <USBD_SetAddress>
          break;
 800cd82:	e01f      	b.n	800cdc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 fbac 	bl	800d4e4 <USBD_SetConfig>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	73fb      	strb	r3, [r7, #15]
          break;
 800cd90:	e018      	b.n	800cdc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 fc4b 	bl	800d630 <USBD_GetConfig>
          break;
 800cd9a:	e013      	b.n	800cdc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cd9c:	6839      	ldr	r1, [r7, #0]
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 fc7c 	bl	800d69c <USBD_GetStatus>
          break;
 800cda4:	e00e      	b.n	800cdc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cda6:	6839      	ldr	r1, [r7, #0]
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fcab 	bl	800d704 <USBD_SetFeature>
          break;
 800cdae:	e009      	b.n	800cdc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 fcba 	bl	800d72c <USBD_ClrFeature>
          break;
 800cdb8:	e004      	b.n	800cdc4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cdba:	6839      	ldr	r1, [r7, #0]
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 fd11 	bl	800d7e4 <USBD_CtlError>
          break;
 800cdc2:	bf00      	nop
      }
      break;
 800cdc4:	e004      	b.n	800cdd0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cdc6:	6839      	ldr	r1, [r7, #0]
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 fd0b 	bl	800d7e4 <USBD_CtlError>
      break;
 800cdce:	bf00      	nop
  }

  return ret;
 800cdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop

0800cddc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cdf2:	2b40      	cmp	r3, #64	; 0x40
 800cdf4:	d005      	beq.n	800ce02 <USBD_StdItfReq+0x26>
 800cdf6:	2b40      	cmp	r3, #64	; 0x40
 800cdf8:	d82f      	bhi.n	800ce5a <USBD_StdItfReq+0x7e>
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <USBD_StdItfReq+0x26>
 800cdfe:	2b20      	cmp	r3, #32
 800ce00:	d12b      	bne.n	800ce5a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	d81d      	bhi.n	800ce4c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	889b      	ldrh	r3, [r3, #4]
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d813      	bhi.n	800ce42 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	4798      	blx	r3
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	88db      	ldrh	r3, [r3, #6]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d110      	bne.n	800ce56 <USBD_StdItfReq+0x7a>
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10d      	bne.n	800ce56 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fd9d 	bl	800d97a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ce40:	e009      	b.n	800ce56 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ce42:	6839      	ldr	r1, [r7, #0]
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 fccd 	bl	800d7e4 <USBD_CtlError>
          break;
 800ce4a:	e004      	b.n	800ce56 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ce4c:	6839      	ldr	r1, [r7, #0]
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fcc8 	bl	800d7e4 <USBD_CtlError>
          break;
 800ce54:	e000      	b.n	800ce58 <USBD_StdItfReq+0x7c>
          break;
 800ce56:	bf00      	nop
      }
      break;
 800ce58:	e004      	b.n	800ce64 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ce5a:	6839      	ldr	r1, [r7, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fcc1 	bl	800d7e4 <USBD_CtlError>
      break;
 800ce62:	bf00      	nop
  }

  return ret;
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b084      	sub	sp, #16
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	889b      	ldrh	r3, [r3, #4]
 800ce80:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce8a:	2b40      	cmp	r3, #64	; 0x40
 800ce8c:	d007      	beq.n	800ce9e <USBD_StdEPReq+0x30>
 800ce8e:	2b40      	cmp	r3, #64	; 0x40
 800ce90:	f200 8145 	bhi.w	800d11e <USBD_StdEPReq+0x2b0>
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00c      	beq.n	800ceb2 <USBD_StdEPReq+0x44>
 800ce98:	2b20      	cmp	r3, #32
 800ce9a:	f040 8140 	bne.w	800d11e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	6839      	ldr	r1, [r7, #0]
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	4798      	blx	r3
 800ceac:	4603      	mov	r3, r0
 800ceae:	73fb      	strb	r3, [r7, #15]
      break;
 800ceb0:	e13a      	b.n	800d128 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	785b      	ldrb	r3, [r3, #1]
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d007      	beq.n	800ceca <USBD_StdEPReq+0x5c>
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	f300 8129 	bgt.w	800d112 <USBD_StdEPReq+0x2a4>
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d07f      	beq.n	800cfc4 <USBD_StdEPReq+0x156>
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d03c      	beq.n	800cf42 <USBD_StdEPReq+0xd4>
 800cec8:	e123      	b.n	800d112 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b02      	cmp	r3, #2
 800ced4:	d002      	beq.n	800cedc <USBD_StdEPReq+0x6e>
 800ced6:	2b03      	cmp	r3, #3
 800ced8:	d016      	beq.n	800cf08 <USBD_StdEPReq+0x9a>
 800ceda:	e02c      	b.n	800cf36 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cedc:	7bbb      	ldrb	r3, [r7, #14]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00d      	beq.n	800cefe <USBD_StdEPReq+0x90>
 800cee2:	7bbb      	ldrb	r3, [r7, #14]
 800cee4:	2b80      	cmp	r3, #128	; 0x80
 800cee6:	d00a      	beq.n	800cefe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cee8:	7bbb      	ldrb	r3, [r7, #14]
 800ceea:	4619      	mov	r1, r3
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f004 fee1 	bl	8011cb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cef2:	2180      	movs	r1, #128	; 0x80
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f004 fedd 	bl	8011cb4 <USBD_LL_StallEP>
 800cefa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cefc:	e020      	b.n	800cf40 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 fc6f 	bl	800d7e4 <USBD_CtlError>
              break;
 800cf06:	e01b      	b.n	800cf40 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	885b      	ldrh	r3, [r3, #2]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10e      	bne.n	800cf2e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cf10:	7bbb      	ldrb	r3, [r7, #14]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00b      	beq.n	800cf2e <USBD_StdEPReq+0xc0>
 800cf16:	7bbb      	ldrb	r3, [r7, #14]
 800cf18:	2b80      	cmp	r3, #128	; 0x80
 800cf1a:	d008      	beq.n	800cf2e <USBD_StdEPReq+0xc0>
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	88db      	ldrh	r3, [r3, #6]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d104      	bne.n	800cf2e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf24:	7bbb      	ldrb	r3, [r7, #14]
 800cf26:	4619      	mov	r1, r3
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f004 fec3 	bl	8011cb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fd23 	bl	800d97a <USBD_CtlSendStatus>

              break;
 800cf34:	e004      	b.n	800cf40 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fc53 	bl	800d7e4 <USBD_CtlError>
              break;
 800cf3e:	bf00      	nop
          }
          break;
 800cf40:	e0ec      	b.n	800d11c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d002      	beq.n	800cf54 <USBD_StdEPReq+0xe6>
 800cf4e:	2b03      	cmp	r3, #3
 800cf50:	d016      	beq.n	800cf80 <USBD_StdEPReq+0x112>
 800cf52:	e030      	b.n	800cfb6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf54:	7bbb      	ldrb	r3, [r7, #14]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d00d      	beq.n	800cf76 <USBD_StdEPReq+0x108>
 800cf5a:	7bbb      	ldrb	r3, [r7, #14]
 800cf5c:	2b80      	cmp	r3, #128	; 0x80
 800cf5e:	d00a      	beq.n	800cf76 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f004 fea5 	bl	8011cb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf6a:	2180      	movs	r1, #128	; 0x80
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f004 fea1 	bl	8011cb4 <USBD_LL_StallEP>
 800cf72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf74:	e025      	b.n	800cfc2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cf76:	6839      	ldr	r1, [r7, #0]
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 fc33 	bl	800d7e4 <USBD_CtlError>
              break;
 800cf7e:	e020      	b.n	800cfc2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	885b      	ldrh	r3, [r3, #2]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d11b      	bne.n	800cfc0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cf88:	7bbb      	ldrb	r3, [r7, #14]
 800cf8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d004      	beq.n	800cf9c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cf92:	7bbb      	ldrb	r3, [r7, #14]
 800cf94:	4619      	mov	r1, r3
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f004 fec2 	bl	8011d20 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fcec 	bl	800d97a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	6839      	ldr	r1, [r7, #0]
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	4798      	blx	r3
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cfb4:	e004      	b.n	800cfc0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fc13 	bl	800d7e4 <USBD_CtlError>
              break;
 800cfbe:	e000      	b.n	800cfc2 <USBD_StdEPReq+0x154>
              break;
 800cfc0:	bf00      	nop
          }
          break;
 800cfc2:	e0ab      	b.n	800d11c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d002      	beq.n	800cfd6 <USBD_StdEPReq+0x168>
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	d032      	beq.n	800d03a <USBD_StdEPReq+0x1cc>
 800cfd4:	e097      	b.n	800d106 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cfd6:	7bbb      	ldrb	r3, [r7, #14]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d007      	beq.n	800cfec <USBD_StdEPReq+0x17e>
 800cfdc:	7bbb      	ldrb	r3, [r7, #14]
 800cfde:	2b80      	cmp	r3, #128	; 0x80
 800cfe0:	d004      	beq.n	800cfec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cfe2:	6839      	ldr	r1, [r7, #0]
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 fbfd 	bl	800d7e4 <USBD_CtlError>
                break;
 800cfea:	e091      	b.n	800d110 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	da0b      	bge.n	800d00c <USBD_StdEPReq+0x19e>
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cffa:	4613      	mov	r3, r2
 800cffc:	009b      	lsls	r3, r3, #2
 800cffe:	4413      	add	r3, r2
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	3310      	adds	r3, #16
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	4413      	add	r3, r2
 800d008:	3304      	adds	r3, #4
 800d00a:	e00b      	b.n	800d024 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d00c:	7bbb      	ldrb	r3, [r7, #14]
 800d00e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d012:	4613      	mov	r3, r2
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	4413      	add	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	4413      	add	r3, r2
 800d022:	3304      	adds	r3, #4
 800d024:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	2202      	movs	r2, #2
 800d030:	4619      	mov	r1, r3
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fc47 	bl	800d8c6 <USBD_CtlSendData>
              break;
 800d038:	e06a      	b.n	800d110 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d03a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	da11      	bge.n	800d066 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d042:	7bbb      	ldrb	r3, [r7, #14]
 800d044:	f003 020f 	and.w	r2, r3, #15
 800d048:	6879      	ldr	r1, [r7, #4]
 800d04a:	4613      	mov	r3, r2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	440b      	add	r3, r1
 800d054:	3324      	adds	r3, #36	; 0x24
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d117      	bne.n	800d08c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fbc0 	bl	800d7e4 <USBD_CtlError>
                  break;
 800d064:	e054      	b.n	800d110 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d066:	7bbb      	ldrb	r3, [r7, #14]
 800d068:	f003 020f 	and.w	r2, r3, #15
 800d06c:	6879      	ldr	r1, [r7, #4]
 800d06e:	4613      	mov	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	440b      	add	r3, r1
 800d078:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d07c:	881b      	ldrh	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d104      	bne.n	800d08c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d082:	6839      	ldr	r1, [r7, #0]
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fbad 	bl	800d7e4 <USBD_CtlError>
                  break;
 800d08a:	e041      	b.n	800d110 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d08c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d090:	2b00      	cmp	r3, #0
 800d092:	da0b      	bge.n	800d0ac <USBD_StdEPReq+0x23e>
 800d094:	7bbb      	ldrb	r3, [r7, #14]
 800d096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d09a:	4613      	mov	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4413      	add	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	3310      	adds	r3, #16
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	e00b      	b.n	800d0c4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d0ac:	7bbb      	ldrb	r3, [r7, #14]
 800d0ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <USBD_StdEPReq+0x264>
 800d0cc:	7bbb      	ldrb	r3, [r7, #14]
 800d0ce:	2b80      	cmp	r3, #128	; 0x80
 800d0d0:	d103      	bne.n	800d0da <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	601a      	str	r2, [r3, #0]
 800d0d8:	e00e      	b.n	800d0f8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d0da:	7bbb      	ldrb	r3, [r7, #14]
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f004 fe54 	bl	8011d8c <USBD_LL_IsStallEP>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d003      	beq.n	800d0f2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	601a      	str	r2, [r3, #0]
 800d0f0:	e002      	b.n	800d0f8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fbe1 	bl	800d8c6 <USBD_CtlSendData>
              break;
 800d104:	e004      	b.n	800d110 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d106:	6839      	ldr	r1, [r7, #0]
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 fb6b 	bl	800d7e4 <USBD_CtlError>
              break;
 800d10e:	bf00      	nop
          }
          break;
 800d110:	e004      	b.n	800d11c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d112:	6839      	ldr	r1, [r7, #0]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fb65 	bl	800d7e4 <USBD_CtlError>
          break;
 800d11a:	bf00      	nop
      }
      break;
 800d11c:	e004      	b.n	800d128 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d11e:	6839      	ldr	r1, [r7, #0]
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 fb5f 	bl	800d7e4 <USBD_CtlError>
      break;
 800d126:	bf00      	nop
  }

  return ret;
 800d128:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
	...

0800d134 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d13e:	2300      	movs	r3, #0
 800d140:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d142:	2300      	movs	r3, #0
 800d144:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d146:	2300      	movs	r3, #0
 800d148:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	885b      	ldrh	r3, [r3, #2]
 800d14e:	0a1b      	lsrs	r3, r3, #8
 800d150:	b29b      	uxth	r3, r3
 800d152:	3b01      	subs	r3, #1
 800d154:	2b0e      	cmp	r3, #14
 800d156:	f200 8152 	bhi.w	800d3fe <USBD_GetDescriptor+0x2ca>
 800d15a:	a201      	add	r2, pc, #4	; (adr r2, 800d160 <USBD_GetDescriptor+0x2c>)
 800d15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d160:	0800d1d1 	.word	0x0800d1d1
 800d164:	0800d1e9 	.word	0x0800d1e9
 800d168:	0800d229 	.word	0x0800d229
 800d16c:	0800d3ff 	.word	0x0800d3ff
 800d170:	0800d3ff 	.word	0x0800d3ff
 800d174:	0800d39f 	.word	0x0800d39f
 800d178:	0800d3cb 	.word	0x0800d3cb
 800d17c:	0800d3ff 	.word	0x0800d3ff
 800d180:	0800d3ff 	.word	0x0800d3ff
 800d184:	0800d3ff 	.word	0x0800d3ff
 800d188:	0800d3ff 	.word	0x0800d3ff
 800d18c:	0800d3ff 	.word	0x0800d3ff
 800d190:	0800d3ff 	.word	0x0800d3ff
 800d194:	0800d3ff 	.word	0x0800d3ff
 800d198:	0800d19d 	.word	0x0800d19d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1a2:	69db      	ldr	r3, [r3, #28]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00b      	beq.n	800d1c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1ae:	69db      	ldr	r3, [r3, #28]
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	7c12      	ldrb	r2, [r2, #16]
 800d1b4:	f107 0108 	add.w	r1, r7, #8
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	4798      	blx	r3
 800d1bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1be:	e126      	b.n	800d40e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 fb0e 	bl	800d7e4 <USBD_CtlError>
        err++;
 800d1c8:	7afb      	ldrb	r3, [r7, #11]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	72fb      	strb	r3, [r7, #11]
      break;
 800d1ce:	e11e      	b.n	800d40e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	7c12      	ldrb	r2, [r2, #16]
 800d1dc:	f107 0108 	add.w	r1, r7, #8
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	4798      	blx	r3
 800d1e4:	60f8      	str	r0, [r7, #12]
      break;
 800d1e6:	e112      	b.n	800d40e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	7c1b      	ldrb	r3, [r3, #16]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10d      	bne.n	800d20c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f8:	f107 0208 	add.w	r2, r7, #8
 800d1fc:	4610      	mov	r0, r2
 800d1fe:	4798      	blx	r3
 800d200:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	3301      	adds	r3, #1
 800d206:	2202      	movs	r2, #2
 800d208:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d20a:	e100      	b.n	800d40e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d214:	f107 0208 	add.w	r2, r7, #8
 800d218:	4610      	mov	r0, r2
 800d21a:	4798      	blx	r3
 800d21c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3301      	adds	r3, #1
 800d222:	2202      	movs	r2, #2
 800d224:	701a      	strb	r2, [r3, #0]
      break;
 800d226:	e0f2      	b.n	800d40e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	885b      	ldrh	r3, [r3, #2]
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	2b05      	cmp	r3, #5
 800d230:	f200 80ac 	bhi.w	800d38c <USBD_GetDescriptor+0x258>
 800d234:	a201      	add	r2, pc, #4	; (adr r2, 800d23c <USBD_GetDescriptor+0x108>)
 800d236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23a:	bf00      	nop
 800d23c:	0800d255 	.word	0x0800d255
 800d240:	0800d289 	.word	0x0800d289
 800d244:	0800d2bd 	.word	0x0800d2bd
 800d248:	0800d2f1 	.word	0x0800d2f1
 800d24c:	0800d325 	.word	0x0800d325
 800d250:	0800d359 	.word	0x0800d359
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00b      	beq.n	800d278 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	7c12      	ldrb	r2, [r2, #16]
 800d26c:	f107 0108 	add.w	r1, r7, #8
 800d270:	4610      	mov	r0, r2
 800d272:	4798      	blx	r3
 800d274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d276:	e091      	b.n	800d39c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d278:	6839      	ldr	r1, [r7, #0]
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 fab2 	bl	800d7e4 <USBD_CtlError>
            err++;
 800d280:	7afb      	ldrb	r3, [r7, #11]
 800d282:	3301      	adds	r3, #1
 800d284:	72fb      	strb	r3, [r7, #11]
          break;
 800d286:	e089      	b.n	800d39c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00b      	beq.n	800d2ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	7c12      	ldrb	r2, [r2, #16]
 800d2a0:	f107 0108 	add.w	r1, r7, #8
 800d2a4:	4610      	mov	r0, r2
 800d2a6:	4798      	blx	r3
 800d2a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2aa:	e077      	b.n	800d39c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 fa98 	bl	800d7e4 <USBD_CtlError>
            err++;
 800d2b4:	7afb      	ldrb	r3, [r7, #11]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d2ba:	e06f      	b.n	800d39c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00b      	beq.n	800d2e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	7c12      	ldrb	r2, [r2, #16]
 800d2d4:	f107 0108 	add.w	r1, r7, #8
 800d2d8:	4610      	mov	r0, r2
 800d2da:	4798      	blx	r3
 800d2dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2de:	e05d      	b.n	800d39c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d2e0:	6839      	ldr	r1, [r7, #0]
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fa7e 	bl	800d7e4 <USBD_CtlError>
            err++;
 800d2e8:	7afb      	ldrb	r3, [r7, #11]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d2ee:	e055      	b.n	800d39c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00b      	beq.n	800d314 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	7c12      	ldrb	r2, [r2, #16]
 800d308:	f107 0108 	add.w	r1, r7, #8
 800d30c:	4610      	mov	r0, r2
 800d30e:	4798      	blx	r3
 800d310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d312:	e043      	b.n	800d39c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fa64 	bl	800d7e4 <USBD_CtlError>
            err++;
 800d31c:	7afb      	ldrb	r3, [r7, #11]
 800d31e:	3301      	adds	r3, #1
 800d320:	72fb      	strb	r3, [r7, #11]
          break;
 800d322:	e03b      	b.n	800d39c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d32a:	695b      	ldr	r3, [r3, #20]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00b      	beq.n	800d348 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d336:	695b      	ldr	r3, [r3, #20]
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	7c12      	ldrb	r2, [r2, #16]
 800d33c:	f107 0108 	add.w	r1, r7, #8
 800d340:	4610      	mov	r0, r2
 800d342:	4798      	blx	r3
 800d344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d346:	e029      	b.n	800d39c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d348:	6839      	ldr	r1, [r7, #0]
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 fa4a 	bl	800d7e4 <USBD_CtlError>
            err++;
 800d350:	7afb      	ldrb	r3, [r7, #11]
 800d352:	3301      	adds	r3, #1
 800d354:	72fb      	strb	r3, [r7, #11]
          break;
 800d356:	e021      	b.n	800d39c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d35e:	699b      	ldr	r3, [r3, #24]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00b      	beq.n	800d37c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	7c12      	ldrb	r2, [r2, #16]
 800d370:	f107 0108 	add.w	r1, r7, #8
 800d374:	4610      	mov	r0, r2
 800d376:	4798      	blx	r3
 800d378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d37a:	e00f      	b.n	800d39c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d37c:	6839      	ldr	r1, [r7, #0]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 fa30 	bl	800d7e4 <USBD_CtlError>
            err++;
 800d384:	7afb      	ldrb	r3, [r7, #11]
 800d386:	3301      	adds	r3, #1
 800d388:	72fb      	strb	r3, [r7, #11]
          break;
 800d38a:	e007      	b.n	800d39c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d38c:	6839      	ldr	r1, [r7, #0]
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 fa28 	bl	800d7e4 <USBD_CtlError>
          err++;
 800d394:	7afb      	ldrb	r3, [r7, #11]
 800d396:	3301      	adds	r3, #1
 800d398:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d39a:	bf00      	nop
      }
      break;
 800d39c:	e037      	b.n	800d40e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	7c1b      	ldrb	r3, [r3, #16]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d109      	bne.n	800d3ba <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ae:	f107 0208 	add.w	r2, r7, #8
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	4798      	blx	r3
 800d3b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d3b8:	e029      	b.n	800d40e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fa11 	bl	800d7e4 <USBD_CtlError>
        err++;
 800d3c2:	7afb      	ldrb	r3, [r7, #11]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	72fb      	strb	r3, [r7, #11]
      break;
 800d3c8:	e021      	b.n	800d40e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	7c1b      	ldrb	r3, [r3, #16]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10d      	bne.n	800d3ee <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3da:	f107 0208 	add.w	r2, r7, #8
 800d3de:	4610      	mov	r0, r2
 800d3e0:	4798      	blx	r3
 800d3e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	2207      	movs	r2, #7
 800d3ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d3ec:	e00f      	b.n	800d40e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d3ee:	6839      	ldr	r1, [r7, #0]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f9f7 	bl	800d7e4 <USBD_CtlError>
        err++;
 800d3f6:	7afb      	ldrb	r3, [r7, #11]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	72fb      	strb	r3, [r7, #11]
      break;
 800d3fc:	e007      	b.n	800d40e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 f9ef 	bl	800d7e4 <USBD_CtlError>
      err++;
 800d406:	7afb      	ldrb	r3, [r7, #11]
 800d408:	3301      	adds	r3, #1
 800d40a:	72fb      	strb	r3, [r7, #11]
      break;
 800d40c:	bf00      	nop
  }

  if (err != 0U)
 800d40e:	7afb      	ldrb	r3, [r7, #11]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d11e      	bne.n	800d452 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	88db      	ldrh	r3, [r3, #6]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d016      	beq.n	800d44a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d41c:	893b      	ldrh	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00e      	beq.n	800d440 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	88da      	ldrh	r2, [r3, #6]
 800d426:	893b      	ldrh	r3, [r7, #8]
 800d428:	4293      	cmp	r3, r2
 800d42a:	bf28      	it	cs
 800d42c:	4613      	movcs	r3, r2
 800d42e:	b29b      	uxth	r3, r3
 800d430:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d432:	893b      	ldrh	r3, [r7, #8]
 800d434:	461a      	mov	r2, r3
 800d436:	68f9      	ldr	r1, [r7, #12]
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 fa44 	bl	800d8c6 <USBD_CtlSendData>
 800d43e:	e009      	b.n	800d454 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d440:	6839      	ldr	r1, [r7, #0]
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 f9ce 	bl	800d7e4 <USBD_CtlError>
 800d448:	e004      	b.n	800d454 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 fa95 	bl	800d97a <USBD_CtlSendStatus>
 800d450:	e000      	b.n	800d454 <USBD_GetDescriptor+0x320>
    return;
 800d452:	bf00      	nop
  }
}
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop

0800d45c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	889b      	ldrh	r3, [r3, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d131      	bne.n	800d4d2 <USBD_SetAddress+0x76>
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	88db      	ldrh	r3, [r3, #6]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d12d      	bne.n	800d4d2 <USBD_SetAddress+0x76>
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	885b      	ldrh	r3, [r3, #2]
 800d47a:	2b7f      	cmp	r3, #127	; 0x7f
 800d47c:	d829      	bhi.n	800d4d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	885b      	ldrh	r3, [r3, #2]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d488:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d490:	b2db      	uxtb	r3, r3
 800d492:	2b03      	cmp	r3, #3
 800d494:	d104      	bne.n	800d4a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d496:	6839      	ldr	r1, [r7, #0]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 f9a3 	bl	800d7e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d49e:	e01d      	b.n	800d4dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	7bfa      	ldrb	r2, [r7, #15]
 800d4a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d4a8:	7bfb      	ldrb	r3, [r7, #15]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f004 fc99 	bl	8011de4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 fa61 	bl	800d97a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d004      	beq.n	800d4c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2202      	movs	r2, #2
 800d4c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4c6:	e009      	b.n	800d4dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4d0:	e004      	b.n	800d4dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 f985 	bl	800d7e4 <USBD_CtlError>
  }
}
 800d4da:	bf00      	nop
 800d4dc:	bf00      	nop
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	885b      	ldrh	r3, [r3, #2]
 800d4f6:	b2da      	uxtb	r2, r3
 800d4f8:	4b4c      	ldr	r3, [pc, #304]	; (800d62c <USBD_SetConfig+0x148>)
 800d4fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d4fc:	4b4b      	ldr	r3, [pc, #300]	; (800d62c <USBD_SetConfig+0x148>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d905      	bls.n	800d510 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f96c 	bl	800d7e4 <USBD_CtlError>
    return USBD_FAIL;
 800d50c:	2303      	movs	r3, #3
 800d50e:	e088      	b.n	800d622 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d002      	beq.n	800d522 <USBD_SetConfig+0x3e>
 800d51c:	2b03      	cmp	r3, #3
 800d51e:	d025      	beq.n	800d56c <USBD_SetConfig+0x88>
 800d520:	e071      	b.n	800d606 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d522:	4b42      	ldr	r3, [pc, #264]	; (800d62c <USBD_SetConfig+0x148>)
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d01c      	beq.n	800d564 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d52a:	4b40      	ldr	r3, [pc, #256]	; (800d62c <USBD_SetConfig+0x148>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	461a      	mov	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d534:	4b3d      	ldr	r3, [pc, #244]	; (800d62c <USBD_SetConfig+0x148>)
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	4619      	mov	r1, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f7ff f91e 	bl	800c77c <USBD_SetClassConfig>
 800d540:	4603      	mov	r3, r0
 800d542:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d544:	7bfb      	ldrb	r3, [r7, #15]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d004      	beq.n	800d554 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f949 	bl	800d7e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d552:	e065      	b.n	800d620 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 fa10 	bl	800d97a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2203      	movs	r2, #3
 800d55e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d562:	e05d      	b.n	800d620 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fa08 	bl	800d97a <USBD_CtlSendStatus>
      break;
 800d56a:	e059      	b.n	800d620 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d56c:	4b2f      	ldr	r3, [pc, #188]	; (800d62c <USBD_SetConfig+0x148>)
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d112      	bne.n	800d59a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2202      	movs	r2, #2
 800d578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d57c:	4b2b      	ldr	r3, [pc, #172]	; (800d62c <USBD_SetConfig+0x148>)
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	461a      	mov	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d586:	4b29      	ldr	r3, [pc, #164]	; (800d62c <USBD_SetConfig+0x148>)
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	4619      	mov	r1, r3
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f7ff f911 	bl	800c7b4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 f9f1 	bl	800d97a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d598:	e042      	b.n	800d620 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d59a:	4b24      	ldr	r3, [pc, #144]	; (800d62c <USBD_SetConfig+0x148>)
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d02a      	beq.n	800d5fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff f8ff 	bl	800c7b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d5b6:	4b1d      	ldr	r3, [pc, #116]	; (800d62c <USBD_SetConfig+0x148>)
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d5c0:	4b1a      	ldr	r3, [pc, #104]	; (800d62c <USBD_SetConfig+0x148>)
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7ff f8d8 	bl	800c77c <USBD_SetClassConfig>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00f      	beq.n	800d5f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d5d6:	6839      	ldr	r1, [r7, #0]
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 f903 	bl	800d7e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f7ff f8e4 	bl	800c7b4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d5f4:	e014      	b.n	800d620 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 f9bf 	bl	800d97a <USBD_CtlSendStatus>
      break;
 800d5fc:	e010      	b.n	800d620 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 f9bb 	bl	800d97a <USBD_CtlSendStatus>
      break;
 800d604:	e00c      	b.n	800d620 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f8eb 	bl	800d7e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d60e:	4b07      	ldr	r3, [pc, #28]	; (800d62c <USBD_SetConfig+0x148>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	4619      	mov	r1, r3
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff f8cd 	bl	800c7b4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d61a:	2303      	movs	r3, #3
 800d61c:	73fb      	strb	r3, [r7, #15]
      break;
 800d61e:	bf00      	nop
  }

  return ret;
 800d620:	7bfb      	ldrb	r3, [r7, #15]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	200001e0 	.word	0x200001e0

0800d630 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	88db      	ldrh	r3, [r3, #6]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d004      	beq.n	800d64c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d642:	6839      	ldr	r1, [r7, #0]
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 f8cd 	bl	800d7e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d64a:	e023      	b.n	800d694 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d652:	b2db      	uxtb	r3, r3
 800d654:	2b02      	cmp	r3, #2
 800d656:	dc02      	bgt.n	800d65e <USBD_GetConfig+0x2e>
 800d658:	2b00      	cmp	r3, #0
 800d65a:	dc03      	bgt.n	800d664 <USBD_GetConfig+0x34>
 800d65c:	e015      	b.n	800d68a <USBD_GetConfig+0x5a>
 800d65e:	2b03      	cmp	r3, #3
 800d660:	d00b      	beq.n	800d67a <USBD_GetConfig+0x4a>
 800d662:	e012      	b.n	800d68a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	3308      	adds	r3, #8
 800d66e:	2201      	movs	r2, #1
 800d670:	4619      	mov	r1, r3
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f927 	bl	800d8c6 <USBD_CtlSendData>
        break;
 800d678:	e00c      	b.n	800d694 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	3304      	adds	r3, #4
 800d67e:	2201      	movs	r2, #1
 800d680:	4619      	mov	r1, r3
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 f91f 	bl	800d8c6 <USBD_CtlSendData>
        break;
 800d688:	e004      	b.n	800d694 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d68a:	6839      	ldr	r1, [r7, #0]
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 f8a9 	bl	800d7e4 <USBD_CtlError>
        break;
 800d692:	bf00      	nop
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d81e      	bhi.n	800d6f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	88db      	ldrh	r3, [r3, #6]
 800d6b8:	2b02      	cmp	r3, #2
 800d6ba:	d004      	beq.n	800d6c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d6bc:	6839      	ldr	r1, [r7, #0]
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f890 	bl	800d7e4 <USBD_CtlError>
        break;
 800d6c4:	e01a      	b.n	800d6fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d005      	beq.n	800d6e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	f043 0202 	orr.w	r2, r3, #2
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	330c      	adds	r3, #12
 800d6e6:	2202      	movs	r2, #2
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f8eb 	bl	800d8c6 <USBD_CtlSendData>
      break;
 800d6f0:	e004      	b.n	800d6fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d6f2:	6839      	ldr	r1, [r7, #0]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f875 	bl	800d7e4 <USBD_CtlError>
      break;
 800d6fa:	bf00      	nop
  }
}
 800d6fc:	bf00      	nop
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	885b      	ldrh	r3, [r3, #2]
 800d712:	2b01      	cmp	r3, #1
 800d714:	d106      	bne.n	800d724 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2201      	movs	r2, #1
 800d71a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f92b 	bl	800d97a <USBD_CtlSendStatus>
  }
}
 800d724:	bf00      	nop
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	3b01      	subs	r3, #1
 800d740:	2b02      	cmp	r3, #2
 800d742:	d80b      	bhi.n	800d75c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	885b      	ldrh	r3, [r3, #2]
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d10c      	bne.n	800d766 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 f910 	bl	800d97a <USBD_CtlSendStatus>
      }
      break;
 800d75a:	e004      	b.n	800d766 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f840 	bl	800d7e4 <USBD_CtlError>
      break;
 800d764:	e000      	b.n	800d768 <USBD_ClrFeature+0x3c>
      break;
 800d766:	bf00      	nop
  }
}
 800d768:	bf00      	nop
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	781a      	ldrb	r2, [r3, #0]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3301      	adds	r3, #1
 800d78a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	781a      	ldrb	r2, [r3, #0]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	3301      	adds	r3, #1
 800d798:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f7ff fa91 	bl	800ccc2 <SWAPBYTE>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f7ff fa84 	bl	800ccc2 <SWAPBYTE>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	461a      	mov	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7ff fa77 	bl	800ccc2 <SWAPBYTE>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	80da      	strh	r2, [r3, #6]
}
 800d7dc:	bf00      	nop
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7ee:	2180      	movs	r1, #128	; 0x80
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f004 fa5f 	bl	8011cb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f004 fa5b 	bl	8011cb4 <USBD_LL_StallEP>
}
 800d7fe:	bf00      	nop
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b086      	sub	sp, #24
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	60f8      	str	r0, [r7, #12]
 800d80e:	60b9      	str	r1, [r7, #8]
 800d810:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d812:	2300      	movs	r3, #0
 800d814:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d036      	beq.n	800d88a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d820:	6938      	ldr	r0, [r7, #16]
 800d822:	f000 f836 	bl	800d892 <USBD_GetLen>
 800d826:	4603      	mov	r3, r0
 800d828:	3301      	adds	r3, #1
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	005b      	lsls	r3, r3, #1
 800d82e:	b29a      	uxth	r2, r3
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d834:	7dfb      	ldrb	r3, [r7, #23]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	4413      	add	r3, r2
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	7812      	ldrb	r2, [r2, #0]
 800d83e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d840:	7dfb      	ldrb	r3, [r7, #23]
 800d842:	3301      	adds	r3, #1
 800d844:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d846:	7dfb      	ldrb	r3, [r7, #23]
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	4413      	add	r3, r2
 800d84c:	2203      	movs	r2, #3
 800d84e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d850:	7dfb      	ldrb	r3, [r7, #23]
 800d852:	3301      	adds	r3, #1
 800d854:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d856:	e013      	b.n	800d880 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d858:	7dfb      	ldrb	r3, [r7, #23]
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	4413      	add	r3, r2
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	7812      	ldrb	r2, [r2, #0]
 800d862:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	3301      	adds	r3, #1
 800d868:	613b      	str	r3, [r7, #16]
    idx++;
 800d86a:	7dfb      	ldrb	r3, [r7, #23]
 800d86c:	3301      	adds	r3, #1
 800d86e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d870:	7dfb      	ldrb	r3, [r7, #23]
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	4413      	add	r3, r2
 800d876:	2200      	movs	r2, #0
 800d878:	701a      	strb	r2, [r3, #0]
    idx++;
 800d87a:	7dfb      	ldrb	r3, [r7, #23]
 800d87c:	3301      	adds	r3, #1
 800d87e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d1e7      	bne.n	800d858 <USBD_GetString+0x52>
 800d888:	e000      	b.n	800d88c <USBD_GetString+0x86>
    return;
 800d88a:	bf00      	nop
  }
}
 800d88c:	3718      	adds	r7, #24
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d892:	b480      	push	{r7}
 800d894:	b085      	sub	sp, #20
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d89a:	2300      	movs	r3, #0
 800d89c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d8a2:	e005      	b.n	800d8b0 <USBD_GetLen+0x1e>
  {
    len++;
 800d8a4:	7bfb      	ldrb	r3, [r7, #15]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1f5      	bne.n	800d8a4 <USBD_GetLen+0x12>
  }

  return len;
 800d8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr

0800d8c6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b084      	sub	sp, #16
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	60f8      	str	r0, [r7, #12]
 800d8ce:	60b9      	str	r1, [r7, #8]
 800d8d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2202      	movs	r2, #2
 800d8d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	2100      	movs	r1, #0
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f004 faaf 	bl	8011e50 <USBD_LL_Transmit>

  return USBD_OK;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3710      	adds	r7, #16
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	68ba      	ldr	r2, [r7, #8]
 800d90c:	2100      	movs	r1, #0
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f004 fa9e 	bl	8011e50 <USBD_LL_Transmit>

  return USBD_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b084      	sub	sp, #16
 800d922:	af00      	add	r7, sp, #0
 800d924:	60f8      	str	r0, [r7, #12]
 800d926:	60b9      	str	r1, [r7, #8]
 800d928:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2203      	movs	r2, #3
 800d92e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	68ba      	ldr	r2, [r7, #8]
 800d946:	2100      	movs	r1, #0
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f004 fab9 	bl	8011ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	68ba      	ldr	r2, [r7, #8]
 800d968:	2100      	movs	r1, #0
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f004 faa8 	bl	8011ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d970:	2300      	movs	r3, #0
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b082      	sub	sp, #8
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2204      	movs	r2, #4
 800d986:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d98a:	2300      	movs	r3, #0
 800d98c:	2200      	movs	r2, #0
 800d98e:	2100      	movs	r1, #0
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f004 fa5d 	bl	8011e50 <USBD_LL_Transmit>

  return USBD_OK;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2205      	movs	r2, #5
 800d9ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f004 fa82 	bl	8011ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d9bc:	2300      	movs	r3, #0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
	...

0800d9c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b087      	sub	sp, #28
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d9de:	4b1f      	ldr	r3, [pc, #124]	; (800da5c <FATFS_LinkDriverEx+0x94>)
 800d9e0:	7a5b      	ldrb	r3, [r3, #9]
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d131      	bne.n	800da4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d9e8:	4b1c      	ldr	r3, [pc, #112]	; (800da5c <FATFS_LinkDriverEx+0x94>)
 800d9ea:	7a5b      	ldrb	r3, [r3, #9]
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	4b1a      	ldr	r3, [pc, #104]	; (800da5c <FATFS_LinkDriverEx+0x94>)
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d9f6:	4b19      	ldr	r3, [pc, #100]	; (800da5c <FATFS_LinkDriverEx+0x94>)
 800d9f8:	7a5b      	ldrb	r3, [r3, #9]
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	4a17      	ldr	r2, [pc, #92]	; (800da5c <FATFS_LinkDriverEx+0x94>)
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	4413      	add	r3, r2
 800da02:	68fa      	ldr	r2, [r7, #12]
 800da04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800da06:	4b15      	ldr	r3, [pc, #84]	; (800da5c <FATFS_LinkDriverEx+0x94>)
 800da08:	7a5b      	ldrb	r3, [r3, #9]
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	461a      	mov	r2, r3
 800da0e:	4b13      	ldr	r3, [pc, #76]	; (800da5c <FATFS_LinkDriverEx+0x94>)
 800da10:	4413      	add	r3, r2
 800da12:	79fa      	ldrb	r2, [r7, #7]
 800da14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800da16:	4b11      	ldr	r3, [pc, #68]	; (800da5c <FATFS_LinkDriverEx+0x94>)
 800da18:	7a5b      	ldrb	r3, [r3, #9]
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	1c5a      	adds	r2, r3, #1
 800da1e:	b2d1      	uxtb	r1, r2
 800da20:	4a0e      	ldr	r2, [pc, #56]	; (800da5c <FATFS_LinkDriverEx+0x94>)
 800da22:	7251      	strb	r1, [r2, #9]
 800da24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800da26:	7dbb      	ldrb	r3, [r7, #22]
 800da28:	3330      	adds	r3, #48	; 0x30
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	3301      	adds	r3, #1
 800da34:	223a      	movs	r2, #58	; 0x3a
 800da36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	3302      	adds	r3, #2
 800da3c:	222f      	movs	r2, #47	; 0x2f
 800da3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	3303      	adds	r3, #3
 800da44:	2200      	movs	r2, #0
 800da46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da48:	2300      	movs	r3, #0
 800da4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800da4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	371c      	adds	r7, #28
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	200001e4 	.word	0x200001e4

0800da60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800da6a:	2200      	movs	r2, #0
 800da6c:	6839      	ldr	r1, [r7, #0]
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7ff ffaa 	bl	800d9c8 <FATFS_LinkDriverEx>
 800da74:	4603      	mov	r3, r0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
	...

0800da80 <__NVIC_SetPriority>:
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	4603      	mov	r3, r0
 800da88:	6039      	str	r1, [r7, #0]
 800da8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800da8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da90:	2b00      	cmp	r3, #0
 800da92:	db0a      	blt.n	800daaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	b2da      	uxtb	r2, r3
 800da98:	490c      	ldr	r1, [pc, #48]	; (800dacc <__NVIC_SetPriority+0x4c>)
 800da9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da9e:	0112      	lsls	r2, r2, #4
 800daa0:	b2d2      	uxtb	r2, r2
 800daa2:	440b      	add	r3, r1
 800daa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800daa8:	e00a      	b.n	800dac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	b2da      	uxtb	r2, r3
 800daae:	4908      	ldr	r1, [pc, #32]	; (800dad0 <__NVIC_SetPriority+0x50>)
 800dab0:	79fb      	ldrb	r3, [r7, #7]
 800dab2:	f003 030f 	and.w	r3, r3, #15
 800dab6:	3b04      	subs	r3, #4
 800dab8:	0112      	lsls	r2, r2, #4
 800daba:	b2d2      	uxtb	r2, r2
 800dabc:	440b      	add	r3, r1
 800dabe:	761a      	strb	r2, [r3, #24]
}
 800dac0:	bf00      	nop
 800dac2:	370c      	adds	r7, #12
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	e000e100 	.word	0xe000e100
 800dad0:	e000ed00 	.word	0xe000ed00

0800dad4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dad4:	b580      	push	{r7, lr}
 800dad6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dad8:	4b05      	ldr	r3, [pc, #20]	; (800daf0 <SysTick_Handler+0x1c>)
 800dada:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dadc:	f002 fb58 	bl	8010190 <xTaskGetSchedulerState>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d001      	beq.n	800daea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dae6:	f003 f977 	bl	8010dd8 <xPortSysTickHandler>
  }
}
 800daea:	bf00      	nop
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	e000e010 	.word	0xe000e010

0800daf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800daf4:	b580      	push	{r7, lr}
 800daf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800daf8:	2100      	movs	r1, #0
 800dafa:	f06f 0004 	mvn.w	r0, #4
 800dafe:	f7ff ffbf 	bl	800da80 <__NVIC_SetPriority>
#endif
}
 800db02:	bf00      	nop
 800db04:	bd80      	pop	{r7, pc}
	...

0800db08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db0e:	f3ef 8305 	mrs	r3, IPSR
 800db12:	603b      	str	r3, [r7, #0]
  return(result);
 800db14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db16:	2b00      	cmp	r3, #0
 800db18:	d003      	beq.n	800db22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800db1a:	f06f 0305 	mvn.w	r3, #5
 800db1e:	607b      	str	r3, [r7, #4]
 800db20:	e00c      	b.n	800db3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800db22:	4b0a      	ldr	r3, [pc, #40]	; (800db4c <osKernelInitialize+0x44>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d105      	bne.n	800db36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800db2a:	4b08      	ldr	r3, [pc, #32]	; (800db4c <osKernelInitialize+0x44>)
 800db2c:	2201      	movs	r2, #1
 800db2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800db30:	2300      	movs	r3, #0
 800db32:	607b      	str	r3, [r7, #4]
 800db34:	e002      	b.n	800db3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800db36:	f04f 33ff 	mov.w	r3, #4294967295
 800db3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800db3c:	687b      	ldr	r3, [r7, #4]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	200001f0 	.word	0x200001f0

0800db50 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800db56:	f002 fb1b 	bl	8010190 <xTaskGetSchedulerState>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d004      	beq.n	800db6a <osKernelGetState+0x1a>
 800db60:	2b02      	cmp	r3, #2
 800db62:	d105      	bne.n	800db70 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800db64:	2302      	movs	r3, #2
 800db66:	607b      	str	r3, [r7, #4]
      break;
 800db68:	e00c      	b.n	800db84 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800db6a:	2303      	movs	r3, #3
 800db6c:	607b      	str	r3, [r7, #4]
      break;
 800db6e:	e009      	b.n	800db84 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <osKernelGetState+0x40>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d102      	bne.n	800db7e <osKernelGetState+0x2e>
        state = osKernelReady;
 800db78:	2301      	movs	r3, #1
 800db7a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800db7c:	e001      	b.n	800db82 <osKernelGetState+0x32>
        state = osKernelInactive;
 800db7e:	2300      	movs	r3, #0
 800db80:	607b      	str	r3, [r7, #4]
      break;
 800db82:	bf00      	nop
  }

  return (state);
 800db84:	687b      	ldr	r3, [r7, #4]
}
 800db86:	4618      	mov	r0, r3
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	200001f0 	.word	0x200001f0

0800db94 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db9a:	f3ef 8305 	mrs	r3, IPSR
 800db9e:	603b      	str	r3, [r7, #0]
  return(result);
 800dba0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d003      	beq.n	800dbae <osKernelStart+0x1a>
    stat = osErrorISR;
 800dba6:	f06f 0305 	mvn.w	r3, #5
 800dbaa:	607b      	str	r3, [r7, #4]
 800dbac:	e010      	b.n	800dbd0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dbae:	4b0b      	ldr	r3, [pc, #44]	; (800dbdc <osKernelStart+0x48>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d109      	bne.n	800dbca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dbb6:	f7ff ff9d 	bl	800daf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dbba:	4b08      	ldr	r3, [pc, #32]	; (800dbdc <osKernelStart+0x48>)
 800dbbc:	2202      	movs	r2, #2
 800dbbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dbc0:	f001 fdee 	bl	800f7a0 <vTaskStartScheduler>
      stat = osOK;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	607b      	str	r3, [r7, #4]
 800dbc8:	e002      	b.n	800dbd0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dbca:	f04f 33ff 	mov.w	r3, #4294967295
 800dbce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dbd0:	687b      	ldr	r3, [r7, #4]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	200001f0 	.word	0x200001f0

0800dbe0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbe6:	f3ef 8305 	mrs	r3, IPSR
 800dbea:	603b      	str	r3, [r7, #0]
  return(result);
 800dbec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d003      	beq.n	800dbfa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800dbf2:	f001 fef7 	bl	800f9e4 <xTaskGetTickCountFromISR>
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	e002      	b.n	800dc00 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800dbfa:	f001 fee3 	bl	800f9c4 <xTaskGetTickCount>
 800dbfe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800dc00:	687b      	ldr	r3, [r7, #4]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b08e      	sub	sp, #56	; 0x38
 800dc0e:	af04      	add	r7, sp, #16
 800dc10:	60f8      	str	r0, [r7, #12]
 800dc12:	60b9      	str	r1, [r7, #8]
 800dc14:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc1a:	f3ef 8305 	mrs	r3, IPSR
 800dc1e:	617b      	str	r3, [r7, #20]
  return(result);
 800dc20:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d17e      	bne.n	800dd24 <osThreadNew+0x11a>
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d07b      	beq.n	800dd24 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dc2c:	2380      	movs	r3, #128	; 0x80
 800dc2e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dc30:	2318      	movs	r3, #24
 800dc32:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dc34:	2300      	movs	r3, #0
 800dc36:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dc38:	f04f 33ff 	mov.w	r3, #4294967295
 800dc3c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d045      	beq.n	800dcd0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <osThreadNew+0x48>
        name = attr->name;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	699b      	ldr	r3, [r3, #24]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d002      	beq.n	800dc60 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d008      	beq.n	800dc78 <osThreadNew+0x6e>
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	2b38      	cmp	r3, #56	; 0x38
 800dc6a:	d805      	bhi.n	800dc78 <osThreadNew+0x6e>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f003 0301 	and.w	r3, r3, #1
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <osThreadNew+0x72>
        return (NULL);
 800dc78:	2300      	movs	r3, #0
 800dc7a:	e054      	b.n	800dd26 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d003      	beq.n	800dc8c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	695b      	ldr	r3, [r3, #20]
 800dc88:	089b      	lsrs	r3, r3, #2
 800dc8a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00e      	beq.n	800dcb2 <osThreadNew+0xa8>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	2b5b      	cmp	r3, #91	; 0x5b
 800dc9a:	d90a      	bls.n	800dcb2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d006      	beq.n	800dcb2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	695b      	ldr	r3, [r3, #20]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d002      	beq.n	800dcb2 <osThreadNew+0xa8>
        mem = 1;
 800dcac:	2301      	movs	r3, #1
 800dcae:	61bb      	str	r3, [r7, #24]
 800dcb0:	e010      	b.n	800dcd4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	689b      	ldr	r3, [r3, #8]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d10c      	bne.n	800dcd4 <osThreadNew+0xca>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d108      	bne.n	800dcd4 <osThreadNew+0xca>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d104      	bne.n	800dcd4 <osThreadNew+0xca>
          mem = 0;
 800dcca:	2300      	movs	r3, #0
 800dccc:	61bb      	str	r3, [r7, #24]
 800dcce:	e001      	b.n	800dcd4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d110      	bne.n	800dcfc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dce2:	9202      	str	r2, [sp, #8]
 800dce4:	9301      	str	r3, [sp, #4]
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	6a3a      	ldr	r2, [r7, #32]
 800dcee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f001 fb7f 	bl	800f3f4 <xTaskCreateStatic>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	613b      	str	r3, [r7, #16]
 800dcfa:	e013      	b.n	800dd24 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d110      	bne.n	800dd24 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dd02:	6a3b      	ldr	r3, [r7, #32]
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	f107 0310 	add.w	r3, r7, #16
 800dd0a:	9301      	str	r3, [sp, #4]
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f001 fbca 	bl	800f4ae <xTaskCreate>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d001      	beq.n	800dd24 <osThreadNew+0x11a>
            hTask = NULL;
 800dd20:	2300      	movs	r3, #0
 800dd22:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dd24:	693b      	ldr	r3, [r7, #16]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3728      	adds	r7, #40	; 0x28
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b084      	sub	sp, #16
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd36:	f3ef 8305 	mrs	r3, IPSR
 800dd3a:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d003      	beq.n	800dd4a <osDelay+0x1c>
    stat = osErrorISR;
 800dd42:	f06f 0305 	mvn.w	r3, #5
 800dd46:	60fb      	str	r3, [r7, #12]
 800dd48:	e007      	b.n	800dd5a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d002      	beq.n	800dd5a <osDelay+0x2c>
      vTaskDelay(ticks);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f001 fcef 	bl	800f738 <vTaskDelay>
    }
  }

  return (stat);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b086      	sub	sp, #24
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd70:	f3ef 8305 	mrs	r3, IPSR
 800dd74:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd76:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d12d      	bne.n	800ddd8 <osEventFlagsNew+0x74>
    mem = -1;
 800dd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd80:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d015      	beq.n	800ddb4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d006      	beq.n	800dd9e <osEventFlagsNew+0x3a>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	2b1f      	cmp	r3, #31
 800dd96:	d902      	bls.n	800dd9e <osEventFlagsNew+0x3a>
        mem = 1;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	613b      	str	r3, [r7, #16]
 800dd9c:	e00c      	b.n	800ddb8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d108      	bne.n	800ddb8 <osEventFlagsNew+0x54>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d104      	bne.n	800ddb8 <osEventFlagsNew+0x54>
          mem = 0;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	613b      	str	r3, [r7, #16]
 800ddb2:	e001      	b.n	800ddb8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d106      	bne.n	800ddcc <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f000 fa50 	bl	800e268 <xEventGroupCreateStatic>
 800ddc8:	6178      	str	r0, [r7, #20]
 800ddca:	e005      	b.n	800ddd8 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d102      	bne.n	800ddd8 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800ddd2:	f000 fa80 	bl	800e2d6 <xEventGroupCreate>
 800ddd6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800ddd8:	697b      	ldr	r3, [r7, #20]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3718      	adds	r7, #24
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
	...

0800dde4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b086      	sub	sp, #24
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d004      	beq.n	800de02 <osEventFlagsSet+0x1e>
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d003      	beq.n	800de0a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800de02:	f06f 0303 	mvn.w	r3, #3
 800de06:	617b      	str	r3, [r7, #20]
 800de08:	e028      	b.n	800de5c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de0a:	f3ef 8305 	mrs	r3, IPSR
 800de0e:	60fb      	str	r3, [r7, #12]
  return(result);
 800de10:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800de12:	2b00      	cmp	r3, #0
 800de14:	d01d      	beq.n	800de52 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800de16:	2300      	movs	r3, #0
 800de18:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800de1a:	f107 0308 	add.w	r3, r7, #8
 800de1e:	461a      	mov	r2, r3
 800de20:	6839      	ldr	r1, [r7, #0]
 800de22:	6938      	ldr	r0, [r7, #16]
 800de24:	f000 fc78 	bl	800e718 <xEventGroupSetBitsFromISR>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d103      	bne.n	800de36 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800de2e:	f06f 0302 	mvn.w	r3, #2
 800de32:	617b      	str	r3, [r7, #20]
 800de34:	e012      	b.n	800de5c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00d      	beq.n	800de5c <osEventFlagsSet+0x78>
 800de40:	4b09      	ldr	r3, [pc, #36]	; (800de68 <osEventFlagsSet+0x84>)
 800de42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de46:	601a      	str	r2, [r3, #0]
 800de48:	f3bf 8f4f 	dsb	sy
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	e004      	b.n	800de5c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800de52:	6839      	ldr	r1, [r7, #0]
 800de54:	6938      	ldr	r0, [r7, #16]
 800de56:	f000 fb97 	bl	800e588 <xEventGroupSetBits>
 800de5a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800de5c:	697b      	ldr	r3, [r7, #20]
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3718      	adds	r7, #24
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	e000ed04 	.word	0xe000ed04

0800de6c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b086      	sub	sp, #24
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d004      	beq.n	800de8a <osEventFlagsClear+0x1e>
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800de86:	2b00      	cmp	r3, #0
 800de88:	d003      	beq.n	800de92 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800de8a:	f06f 0303 	mvn.w	r3, #3
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	e019      	b.n	800dec6 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de92:	f3ef 8305 	mrs	r3, IPSR
 800de96:	60fb      	str	r3, [r7, #12]
  return(result);
 800de98:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00e      	beq.n	800debc <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800de9e:	6938      	ldr	r0, [r7, #16]
 800dea0:	f000 fb4e 	bl	800e540 <xEventGroupGetBitsFromISR>
 800dea4:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800dea6:	6839      	ldr	r1, [r7, #0]
 800dea8:	6938      	ldr	r0, [r7, #16]
 800deaa:	f000 fb35 	bl	800e518 <xEventGroupClearBitsFromISR>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d108      	bne.n	800dec6 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 800deb4:	f06f 0302 	mvn.w	r3, #2
 800deb8:	617b      	str	r3, [r7, #20]
 800deba:	e004      	b.n	800dec6 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800debc:	6839      	ldr	r1, [r7, #0]
 800debe:	6938      	ldr	r0, [r7, #16]
 800dec0:	f000 faf2 	bl	800e4a8 <xEventGroupClearBits>
 800dec4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800dec6:	697b      	ldr	r3, [r7, #20]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3718      	adds	r7, #24
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b08c      	sub	sp, #48	; 0x30
 800ded4:	af02      	add	r7, sp, #8
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
 800dedc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d004      	beq.n	800def2 <osEventFlagsWait+0x22>
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800deee:	2b00      	cmp	r3, #0
 800def0:	d003      	beq.n	800defa <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800def2:	f06f 0303 	mvn.w	r3, #3
 800def6:	61fb      	str	r3, [r7, #28]
 800def8:	e04b      	b.n	800df92 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800defa:	f3ef 8305 	mrs	r3, IPSR
 800defe:	617b      	str	r3, [r7, #20]
  return(result);
 800df00:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800df02:	2b00      	cmp	r3, #0
 800df04:	d003      	beq.n	800df0e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800df06:	f06f 0305 	mvn.w	r3, #5
 800df0a:	61fb      	str	r3, [r7, #28]
 800df0c:	e041      	b.n	800df92 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	d002      	beq.n	800df1e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800df18:	2301      	movs	r3, #1
 800df1a:	627b      	str	r3, [r7, #36]	; 0x24
 800df1c:	e001      	b.n	800df22 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800df1e:	2300      	movs	r3, #0
 800df20:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f003 0302 	and.w	r3, r3, #2
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d002      	beq.n	800df32 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800df2c:	2300      	movs	r3, #0
 800df2e:	623b      	str	r3, [r7, #32]
 800df30:	e001      	b.n	800df36 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800df32:	2301      	movs	r3, #1
 800df34:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	6a3a      	ldr	r2, [r7, #32]
 800df3e:	68b9      	ldr	r1, [r7, #8]
 800df40:	69b8      	ldr	r0, [r7, #24]
 800df42:	f000 f9e3 	bl	800e30c <xEventGroupWaitBits>
 800df46:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f003 0301 	and.w	r3, r3, #1
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d010      	beq.n	800df74 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800df52:	68ba      	ldr	r2, [r7, #8]
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	4013      	ands	r3, r2
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d019      	beq.n	800df92 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d003      	beq.n	800df6c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800df64:	f06f 0301 	mvn.w	r3, #1
 800df68:	61fb      	str	r3, [r7, #28]
 800df6a:	e012      	b.n	800df92 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800df6c:	f06f 0302 	mvn.w	r3, #2
 800df70:	61fb      	str	r3, [r7, #28]
 800df72:	e00e      	b.n	800df92 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800df74:	68ba      	ldr	r2, [r7, #8]
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	4013      	ands	r3, r2
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d109      	bne.n	800df92 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d003      	beq.n	800df8c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800df84:	f06f 0301 	mvn.w	r3, #1
 800df88:	61fb      	str	r3, [r7, #28]
 800df8a:	e002      	b.n	800df92 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800df8c:	f06f 0302 	mvn.w	r3, #2
 800df90:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800df92:	69fb      	ldr	r3, [r7, #28]
}
 800df94:	4618      	mov	r0, r3
 800df96:	3728      	adds	r7, #40	; 0x28
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b08a      	sub	sp, #40	; 0x28
 800dfa0:	af02      	add	r7, sp, #8
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfac:	f3ef 8305 	mrs	r3, IPSR
 800dfb0:	613b      	str	r3, [r7, #16]
  return(result);
 800dfb2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d15f      	bne.n	800e078 <osMessageQueueNew+0xdc>
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d05c      	beq.n	800e078 <osMessageQueueNew+0xdc>
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d059      	beq.n	800e078 <osMessageQueueNew+0xdc>
    mem = -1;
 800dfc4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d029      	beq.n	800e024 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d012      	beq.n	800dffe <osMessageQueueNew+0x62>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	2b4f      	cmp	r3, #79	; 0x4f
 800dfde:	d90e      	bls.n	800dffe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00a      	beq.n	800dffe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	695a      	ldr	r2, [r3, #20]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	68b9      	ldr	r1, [r7, #8]
 800dff0:	fb01 f303 	mul.w	r3, r1, r3
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d302      	bcc.n	800dffe <osMessageQueueNew+0x62>
        mem = 1;
 800dff8:	2301      	movs	r3, #1
 800dffa:	61bb      	str	r3, [r7, #24]
 800dffc:	e014      	b.n	800e028 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d110      	bne.n	800e028 <osMessageQueueNew+0x8c>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10c      	bne.n	800e028 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e012:	2b00      	cmp	r3, #0
 800e014:	d108      	bne.n	800e028 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	695b      	ldr	r3, [r3, #20]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d104      	bne.n	800e028 <osMessageQueueNew+0x8c>
          mem = 0;
 800e01e:	2300      	movs	r3, #0
 800e020:	61bb      	str	r3, [r7, #24]
 800e022:	e001      	b.n	800e028 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e024:	2300      	movs	r3, #0
 800e026:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d10b      	bne.n	800e046 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	691a      	ldr	r2, [r3, #16]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	2100      	movs	r1, #0
 800e038:	9100      	str	r1, [sp, #0]
 800e03a:	68b9      	ldr	r1, [r7, #8]
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f000 fc9b 	bl	800e978 <xQueueGenericCreateStatic>
 800e042:	61f8      	str	r0, [r7, #28]
 800e044:	e008      	b.n	800e058 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d105      	bne.n	800e058 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e04c:	2200      	movs	r2, #0
 800e04e:	68b9      	ldr	r1, [r7, #8]
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 fd09 	bl	800ea68 <xQueueGenericCreate>
 800e056:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00c      	beq.n	800e078 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d003      	beq.n	800e06c <osMessageQueueNew+0xd0>
        name = attr->name;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	e001      	b.n	800e070 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e06c:	2300      	movs	r3, #0
 800e06e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e070:	6979      	ldr	r1, [r7, #20]
 800e072:	69f8      	ldr	r0, [r7, #28]
 800e074:	f001 f960 	bl	800f338 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e078:	69fb      	ldr	r3, [r7, #28]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3720      	adds	r7, #32
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
	...

0800e084 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	603b      	str	r3, [r7, #0]
 800e090:	4613      	mov	r3, r2
 800e092:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e098:	2300      	movs	r3, #0
 800e09a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e09c:	f3ef 8305 	mrs	r3, IPSR
 800e0a0:	617b      	str	r3, [r7, #20]
  return(result);
 800e0a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d028      	beq.n	800e0fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0a8:	69bb      	ldr	r3, [r7, #24]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d005      	beq.n	800e0ba <osMessageQueuePut+0x36>
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d002      	beq.n	800e0ba <osMessageQueuePut+0x36>
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d003      	beq.n	800e0c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e0ba:	f06f 0303 	mvn.w	r3, #3
 800e0be:	61fb      	str	r3, [r7, #28]
 800e0c0:	e038      	b.n	800e134 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e0c6:	f107 0210 	add.w	r2, r7, #16
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	68b9      	ldr	r1, [r7, #8]
 800e0ce:	69b8      	ldr	r0, [r7, #24]
 800e0d0:	f000 fe26 	bl	800ed20 <xQueueGenericSendFromISR>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d003      	beq.n	800e0e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e0da:	f06f 0302 	mvn.w	r3, #2
 800e0de:	61fb      	str	r3, [r7, #28]
 800e0e0:	e028      	b.n	800e134 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d025      	beq.n	800e134 <osMessageQueuePut+0xb0>
 800e0e8:	4b15      	ldr	r3, [pc, #84]	; (800e140 <osMessageQueuePut+0xbc>)
 800e0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0ee:	601a      	str	r2, [r3, #0]
 800e0f0:	f3bf 8f4f 	dsb	sy
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	e01c      	b.n	800e134 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <osMessageQueuePut+0x82>
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d103      	bne.n	800e10e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e106:	f06f 0303 	mvn.w	r3, #3
 800e10a:	61fb      	str	r3, [r7, #28]
 800e10c:	e012      	b.n	800e134 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e10e:	2300      	movs	r3, #0
 800e110:	683a      	ldr	r2, [r7, #0]
 800e112:	68b9      	ldr	r1, [r7, #8]
 800e114:	69b8      	ldr	r0, [r7, #24]
 800e116:	f000 fd05 	bl	800eb24 <xQueueGenericSend>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d009      	beq.n	800e134 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d003      	beq.n	800e12e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e126:	f06f 0301 	mvn.w	r3, #1
 800e12a:	61fb      	str	r3, [r7, #28]
 800e12c:	e002      	b.n	800e134 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e12e:	f06f 0302 	mvn.w	r3, #2
 800e132:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e134:	69fb      	ldr	r3, [r7, #28]
}
 800e136:	4618      	mov	r0, r3
 800e138:	3720      	adds	r7, #32
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	e000ed04 	.word	0xe000ed04

0800e144 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e144:	b580      	push	{r7, lr}
 800e146:	b088      	sub	sp, #32
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	607a      	str	r2, [r7, #4]
 800e150:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e156:	2300      	movs	r3, #0
 800e158:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e15a:	f3ef 8305 	mrs	r3, IPSR
 800e15e:	617b      	str	r3, [r7, #20]
  return(result);
 800e160:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e162:	2b00      	cmp	r3, #0
 800e164:	d028      	beq.n	800e1b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d005      	beq.n	800e178 <osMessageQueueGet+0x34>
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d002      	beq.n	800e178 <osMessageQueueGet+0x34>
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d003      	beq.n	800e180 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e178:	f06f 0303 	mvn.w	r3, #3
 800e17c:	61fb      	str	r3, [r7, #28]
 800e17e:	e037      	b.n	800e1f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e180:	2300      	movs	r3, #0
 800e182:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e184:	f107 0310 	add.w	r3, r7, #16
 800e188:	461a      	mov	r2, r3
 800e18a:	68b9      	ldr	r1, [r7, #8]
 800e18c:	69b8      	ldr	r0, [r7, #24]
 800e18e:	f000 ff43 	bl	800f018 <xQueueReceiveFromISR>
 800e192:	4603      	mov	r3, r0
 800e194:	2b01      	cmp	r3, #1
 800e196:	d003      	beq.n	800e1a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e198:	f06f 0302 	mvn.w	r3, #2
 800e19c:	61fb      	str	r3, [r7, #28]
 800e19e:	e027      	b.n	800e1f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d024      	beq.n	800e1f0 <osMessageQueueGet+0xac>
 800e1a6:	4b15      	ldr	r3, [pc, #84]	; (800e1fc <osMessageQueueGet+0xb8>)
 800e1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	e01b      	b.n	800e1f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d002      	beq.n	800e1c4 <osMessageQueueGet+0x80>
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d103      	bne.n	800e1cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e1c4:	f06f 0303 	mvn.w	r3, #3
 800e1c8:	61fb      	str	r3, [r7, #28]
 800e1ca:	e011      	b.n	800e1f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e1cc:	683a      	ldr	r2, [r7, #0]
 800e1ce:	68b9      	ldr	r1, [r7, #8]
 800e1d0:	69b8      	ldr	r0, [r7, #24]
 800e1d2:	f000 fe41 	bl	800ee58 <xQueueReceive>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d009      	beq.n	800e1f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d003      	beq.n	800e1ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e1e2:	f06f 0301 	mvn.w	r3, #1
 800e1e6:	61fb      	str	r3, [r7, #28]
 800e1e8:	e002      	b.n	800e1f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e1ea:	f06f 0302 	mvn.w	r3, #2
 800e1ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e1f0:	69fb      	ldr	r3, [r7, #28]
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3720      	adds	r7, #32
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	e000ed04 	.word	0xe000ed04

0800e200 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	4a07      	ldr	r2, [pc, #28]	; (800e22c <vApplicationGetIdleTaskMemory+0x2c>)
 800e210:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	4a06      	ldr	r2, [pc, #24]	; (800e230 <vApplicationGetIdleTaskMemory+0x30>)
 800e216:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2280      	movs	r2, #128	; 0x80
 800e21c:	601a      	str	r2, [r3, #0]
}
 800e21e:	bf00      	nop
 800e220:	3714      	adds	r7, #20
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop
 800e22c:	200001f4 	.word	0x200001f4
 800e230:	20000250 	.word	0x20000250

0800e234 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	4a07      	ldr	r2, [pc, #28]	; (800e260 <vApplicationGetTimerTaskMemory+0x2c>)
 800e244:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	4a06      	ldr	r2, [pc, #24]	; (800e264 <vApplicationGetTimerTaskMemory+0x30>)
 800e24a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e252:	601a      	str	r2, [r3, #0]
}
 800e254:	bf00      	nop
 800e256:	3714      	adds	r7, #20
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr
 800e260:	20000450 	.word	0x20000450
 800e264:	200004ac 	.word	0x200004ac

0800e268 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10a      	bne.n	800e28c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27a:	f383 8811 	msr	BASEPRI, r3
 800e27e:	f3bf 8f6f 	isb	sy
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e288:	bf00      	nop
 800e28a:	e7fe      	b.n	800e28a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800e28c:	2320      	movs	r3, #32
 800e28e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	2b20      	cmp	r3, #32
 800e294:	d00a      	beq.n	800e2ac <xEventGroupCreateStatic+0x44>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	60fb      	str	r3, [r7, #12]
}
 800e2a8:	bf00      	nop
 800e2aa:	e7fe      	b.n	800e2aa <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00a      	beq.n	800e2cc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	3304      	adds	r3, #4
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f000 fa3d 	bl	800e740 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800e2cc:	697b      	ldr	r3, [r7, #20]
	}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3718      	adds	r7, #24
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b082      	sub	sp, #8
 800e2da:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800e2dc:	2020      	movs	r0, #32
 800e2de:	f002 fe0b 	bl	8010ef8 <pvPortMalloc>
 800e2e2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00a      	beq.n	800e300 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 fa23 	bl	800e740 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800e300:	687b      	ldr	r3, [r7, #4]
	}
 800e302:	4618      	mov	r0, r3
 800e304:	3708      	adds	r7, #8
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
	...

0800e30c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b090      	sub	sp, #64	; 0x40
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800e322:	2300      	movs	r3, #0
 800e324:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10a      	bne.n	800e342 <xEventGroupWaitBits+0x36>
	__asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e330:	f383 8811 	msr	BASEPRI, r3
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	f3bf 8f4f 	dsb	sy
 800e33c:	623b      	str	r3, [r7, #32]
}
 800e33e:	bf00      	nop
 800e340:	e7fe      	b.n	800e340 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00a      	beq.n	800e362 <xEventGroupWaitBits+0x56>
	__asm volatile
 800e34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e350:	f383 8811 	msr	BASEPRI, r3
 800e354:	f3bf 8f6f 	isb	sy
 800e358:	f3bf 8f4f 	dsb	sy
 800e35c:	61fb      	str	r3, [r7, #28]
}
 800e35e:	bf00      	nop
 800e360:	e7fe      	b.n	800e360 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10a      	bne.n	800e37e <xEventGroupWaitBits+0x72>
	__asm volatile
 800e368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	61bb      	str	r3, [r7, #24]
}
 800e37a:	bf00      	nop
 800e37c:	e7fe      	b.n	800e37c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e37e:	f001 ff07 	bl	8010190 <xTaskGetSchedulerState>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d102      	bne.n	800e38e <xEventGroupWaitBits+0x82>
 800e388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d101      	bne.n	800e392 <xEventGroupWaitBits+0x86>
 800e38e:	2301      	movs	r3, #1
 800e390:	e000      	b.n	800e394 <xEventGroupWaitBits+0x88>
 800e392:	2300      	movs	r3, #0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10a      	bne.n	800e3ae <xEventGroupWaitBits+0xa2>
	__asm volatile
 800e398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39c:	f383 8811 	msr	BASEPRI, r3
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	617b      	str	r3, [r7, #20]
}
 800e3aa:	bf00      	nop
 800e3ac:	e7fe      	b.n	800e3ac <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800e3ae:	f001 fa5d 	bl	800f86c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800e3b8:	683a      	ldr	r2, [r7, #0]
 800e3ba:	68b9      	ldr	r1, [r7, #8]
 800e3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3be:	f000 f988 	bl	800e6d2 <prvTestWaitCondition>
 800e3c2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800e3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00e      	beq.n	800e3e8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d028      	beq.n	800e42a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	43db      	mvns	r3, r3
 800e3e0:	401a      	ands	r2, r3
 800e3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	e020      	b.n	800e42a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e3e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d104      	bne.n	800e3f8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	633b      	str	r3, [r7, #48]	; 0x30
 800e3f6:	e018      	b.n	800e42a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e400:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e404:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d003      	beq.n	800e414 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e412:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e416:	1d18      	adds	r0, r3, #4
 800e418:	68ba      	ldr	r2, [r7, #8]
 800e41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41c:	4313      	orrs	r3, r2
 800e41e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e420:	4619      	mov	r1, r3
 800e422:	f001 fc2d 	bl	800fc80 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e426:	2300      	movs	r3, #0
 800e428:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e42a:	f001 fa2d 	bl	800f888 <xTaskResumeAll>
 800e42e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800e430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e432:	2b00      	cmp	r3, #0
 800e434:	d031      	beq.n	800e49a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d107      	bne.n	800e44c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800e43c:	4b19      	ldr	r3, [pc, #100]	; (800e4a4 <xEventGroupWaitBits+0x198>)
 800e43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e44c:	f001 ff2c 	bl	80102a8 <uxTaskResetEventItemValue>
 800e450:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d11a      	bne.n	800e492 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800e45c:	f002 fc2a 	bl	8010cb4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e466:	683a      	ldr	r2, [r7, #0]
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e46c:	f000 f931 	bl	800e6d2 <prvTestWaitCondition>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d009      	beq.n	800e48a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d006      	beq.n	800e48a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	43db      	mvns	r3, r3
 800e484:	401a      	ands	r2, r3
 800e486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e488:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e48a:	2301      	movs	r3, #1
 800e48c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800e48e:	f002 fc41 	bl	8010d14 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e494:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e498:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3740      	adds	r7, #64	; 0x40
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	e000ed04 	.word	0xe000ed04

0800e4a8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10a      	bne.n	800e4d2 <xEventGroupClearBits+0x2a>
	__asm volatile
 800e4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	60fb      	str	r3, [r7, #12]
}
 800e4ce:	bf00      	nop
 800e4d0:	e7fe      	b.n	800e4d0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00a      	beq.n	800e4f2 <xEventGroupClearBits+0x4a>
	__asm volatile
 800e4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e0:	f383 8811 	msr	BASEPRI, r3
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	60bb      	str	r3, [r7, #8]
}
 800e4ee:	bf00      	nop
 800e4f0:	e7fe      	b.n	800e4f0 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800e4f2:	f002 fbdf 	bl	8010cb4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	43db      	mvns	r3, r3
 800e504:	401a      	ands	r2, r3
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800e50a:	f002 fc03 	bl	8010d14 <vPortExitCritical>

	return uxReturn;
 800e50e:	693b      	ldr	r3, [r7, #16]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3718      	adds	r7, #24
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800e522:	2300      	movs	r3, #0
 800e524:	683a      	ldr	r2, [r7, #0]
 800e526:	6879      	ldr	r1, [r7, #4]
 800e528:	4804      	ldr	r0, [pc, #16]	; (800e53c <xEventGroupClearBitsFromISR+0x24>)
 800e52a:	f002 fa77 	bl	8010a1c <xTimerPendFunctionCallFromISR>
 800e52e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800e530:	68fb      	ldr	r3, [r7, #12]
	}
 800e532:	4618      	mov	r0, r3
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	0800e6b9 	.word	0x0800e6b9

0800e540 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800e540:	b480      	push	{r7}
 800e542:	b089      	sub	sp, #36	; 0x24
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e54c:	f3ef 8211 	mrs	r2, BASEPRI
 800e550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e554:	f383 8811 	msr	BASEPRI, r3
 800e558:	f3bf 8f6f 	isb	sy
 800e55c:	f3bf 8f4f 	dsb	sy
 800e560:	60fa      	str	r2, [r7, #12]
 800e562:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e564:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e566:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	617b      	str	r3, [r7, #20]
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e578:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800e57a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800e57c:	4618      	mov	r0, r3
 800e57e:	3724      	adds	r7, #36	; 0x24
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08e      	sub	sp, #56	; 0x38
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e592:	2300      	movs	r3, #0
 800e594:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800e59a:	2300      	movs	r3, #0
 800e59c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d10a      	bne.n	800e5ba <xEventGroupSetBits+0x32>
	__asm volatile
 800e5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	613b      	str	r3, [r7, #16]
}
 800e5b6:	bf00      	nop
 800e5b8:	e7fe      	b.n	800e5b8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00a      	beq.n	800e5da <xEventGroupSetBits+0x52>
	__asm volatile
 800e5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c8:	f383 8811 	msr	BASEPRI, r3
 800e5cc:	f3bf 8f6f 	isb	sy
 800e5d0:	f3bf 8f4f 	dsb	sy
 800e5d4:	60fb      	str	r3, [r7, #12]
}
 800e5d6:	bf00      	nop
 800e5d8:	e7fe      	b.n	800e5d8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800e5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5dc:	3304      	adds	r3, #4
 800e5de:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e2:	3308      	adds	r3, #8
 800e5e4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800e5e6:	f001 f941 	bl	800f86c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	431a      	orrs	r2, r3
 800e5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800e5fc:	e03c      	b.n	800e678 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800e5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800e604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800e60a:	2300      	movs	r3, #0
 800e60c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e614:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e61c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e624:	2b00      	cmp	r3, #0
 800e626:	d108      	bne.n	800e63a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800e628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	4013      	ands	r3, r2
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00b      	beq.n	800e64c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800e634:	2301      	movs	r3, #1
 800e636:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e638:	e008      	b.n	800e64c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800e63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	4013      	ands	r3, r2
 800e642:	69ba      	ldr	r2, [r7, #24]
 800e644:	429a      	cmp	r2, r3
 800e646:	d101      	bne.n	800e64c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800e648:	2301      	movs	r3, #1
 800e64a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800e64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d010      	beq.n	800e674 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d003      	beq.n	800e664 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800e65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	4313      	orrs	r3, r2
 800e662:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e66c:	4619      	mov	r1, r3
 800e66e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e670:	f001 fbd2 	bl	800fe18 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800e678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e67a:	6a3b      	ldr	r3, [r7, #32]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d1be      	bne.n	800e5fe <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	43db      	mvns	r3, r3
 800e688:	401a      	ands	r2, r3
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800e68e:	f001 f8fb 	bl	800f888 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800e692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e694:	681b      	ldr	r3, [r3, #0]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3738      	adds	r7, #56	; 0x38
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b082      	sub	sp, #8
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800e6a8:	6839      	ldr	r1, [r7, #0]
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f7ff ff6c 	bl	800e588 <xEventGroupSetBits>
}
 800e6b0:	bf00      	nop
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800e6c2:	6839      	ldr	r1, [r7, #0]
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff feef 	bl	800e4a8 <xEventGroupClearBits>
}
 800e6ca:	bf00      	nop
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}

0800e6d2 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800e6d2:	b480      	push	{r7}
 800e6d4:	b087      	sub	sp, #28
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	60f8      	str	r0, [r7, #12]
 800e6da:	60b9      	str	r1, [r7, #8]
 800e6dc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d107      	bne.n	800e6f8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	4013      	ands	r3, r2
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00a      	beq.n	800e708 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	617b      	str	r3, [r7, #20]
 800e6f6:	e007      	b.n	800e708 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e6f8:	68fa      	ldr	r2, [r7, #12]
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	4013      	ands	r3, r2
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	429a      	cmp	r2, r3
 800e702:	d101      	bne.n	800e708 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e704:	2301      	movs	r3, #1
 800e706:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800e708:	697b      	ldr	r3, [r7, #20]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	371c      	adds	r7, #28
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr
	...

0800e718 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	68f9      	ldr	r1, [r7, #12]
 800e72a:	4804      	ldr	r0, [pc, #16]	; (800e73c <xEventGroupSetBitsFromISR+0x24>)
 800e72c:	f002 f976 	bl	8010a1c <xTimerPendFunctionCallFromISR>
 800e730:	6178      	str	r0, [r7, #20]

		return xReturn;
 800e732:	697b      	ldr	r3, [r7, #20]
	}
 800e734:	4618      	mov	r0, r3
 800e736:	3718      	adds	r7, #24
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	0800e69f 	.word	0x0800e69f

0800e740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f103 0208 	add.w	r2, r3, #8
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f04f 32ff 	mov.w	r2, #4294967295
 800e758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f103 0208 	add.w	r2, r3, #8
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f103 0208 	add.w	r2, r3, #8
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2200      	movs	r2, #0
 800e772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e774:	bf00      	nop
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e78e:	bf00      	nop
 800e790:	370c      	adds	r7, #12
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr

0800e79a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e79a:	b480      	push	{r7}
 800e79c:	b085      	sub	sp, #20
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
 800e7a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	689a      	ldr	r2, [r3, #8]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	683a      	ldr	r2, [r7, #0]
 800e7be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	683a      	ldr	r2, [r7, #0]
 800e7c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	1c5a      	adds	r2, r3, #1
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	601a      	str	r2, [r3, #0]
}
 800e7d6:	bf00      	nop
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e7e2:	b480      	push	{r7}
 800e7e4:	b085      	sub	sp, #20
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f8:	d103      	bne.n	800e802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	60fb      	str	r3, [r7, #12]
 800e800:	e00c      	b.n	800e81c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	3308      	adds	r3, #8
 800e806:	60fb      	str	r3, [r7, #12]
 800e808:	e002      	b.n	800e810 <vListInsert+0x2e>
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	60fb      	str	r3, [r7, #12]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d2f6      	bcs.n	800e80a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	685a      	ldr	r2, [r3, #4]
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	683a      	ldr	r2, [r7, #0]
 800e82a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	683a      	ldr	r2, [r7, #0]
 800e836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	1c5a      	adds	r2, r3, #1
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	601a      	str	r2, [r3, #0]
}
 800e848:	bf00      	nop
 800e84a:	3714      	adds	r7, #20
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e854:	b480      	push	{r7}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	691b      	ldr	r3, [r3, #16]
 800e860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	6892      	ldr	r2, [r2, #8]
 800e86a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	6852      	ldr	r2, [r2, #4]
 800e874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d103      	bne.n	800e888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	689a      	ldr	r2, [r3, #8]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	1e5a      	subs	r2, r3, #1
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3714      	adds	r7, #20
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d10a      	bne.n	800e8d2 <xQueueGenericReset+0x2a>
	__asm volatile
 800e8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c0:	f383 8811 	msr	BASEPRI, r3
 800e8c4:	f3bf 8f6f 	isb	sy
 800e8c8:	f3bf 8f4f 	dsb	sy
 800e8cc:	60bb      	str	r3, [r7, #8]
}
 800e8ce:	bf00      	nop
 800e8d0:	e7fe      	b.n	800e8d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e8d2:	f002 f9ef 	bl	8010cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8de:	68f9      	ldr	r1, [r7, #12]
 800e8e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8e2:	fb01 f303 	mul.w	r3, r1, r3
 800e8e6:	441a      	add	r2, r3
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e902:	3b01      	subs	r3, #1
 800e904:	68f9      	ldr	r1, [r7, #12]
 800e906:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e908:	fb01 f303 	mul.w	r3, r1, r3
 800e90c:	441a      	add	r2, r3
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	22ff      	movs	r2, #255	; 0xff
 800e916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	22ff      	movs	r2, #255	; 0xff
 800e91e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d114      	bne.n	800e952 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	691b      	ldr	r3, [r3, #16]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d01a      	beq.n	800e966 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	3310      	adds	r3, #16
 800e934:	4618      	mov	r0, r3
 800e936:	f001 fa0b 	bl	800fd50 <xTaskRemoveFromEventList>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d012      	beq.n	800e966 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e940:	4b0c      	ldr	r3, [pc, #48]	; (800e974 <xQueueGenericReset+0xcc>)
 800e942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	f3bf 8f6f 	isb	sy
 800e950:	e009      	b.n	800e966 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	3310      	adds	r3, #16
 800e956:	4618      	mov	r0, r3
 800e958:	f7ff fef2 	bl	800e740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	3324      	adds	r3, #36	; 0x24
 800e960:	4618      	mov	r0, r3
 800e962:	f7ff feed 	bl	800e740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e966:	f002 f9d5 	bl	8010d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e96a:	2301      	movs	r3, #1
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3710      	adds	r7, #16
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	e000ed04 	.word	0xe000ed04

0800e978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08e      	sub	sp, #56	; 0x38
 800e97c:	af02      	add	r7, sp, #8
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
 800e984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d10a      	bne.n	800e9a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e990:	f383 8811 	msr	BASEPRI, r3
 800e994:	f3bf 8f6f 	isb	sy
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e99e:	bf00      	nop
 800e9a0:	e7fe      	b.n	800e9a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d10a      	bne.n	800e9be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ac:	f383 8811 	msr	BASEPRI, r3
 800e9b0:	f3bf 8f6f 	isb	sy
 800e9b4:	f3bf 8f4f 	dsb	sy
 800e9b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e9ba:	bf00      	nop
 800e9bc:	e7fe      	b.n	800e9bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <xQueueGenericCreateStatic+0x52>
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d001      	beq.n	800e9ce <xQueueGenericCreateStatic+0x56>
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	e000      	b.n	800e9d0 <xQueueGenericCreateStatic+0x58>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10a      	bne.n	800e9ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	623b      	str	r3, [r7, #32]
}
 800e9e6:	bf00      	nop
 800e9e8:	e7fe      	b.n	800e9e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d102      	bne.n	800e9f6 <xQueueGenericCreateStatic+0x7e>
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d101      	bne.n	800e9fa <xQueueGenericCreateStatic+0x82>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e000      	b.n	800e9fc <xQueueGenericCreateStatic+0x84>
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10a      	bne.n	800ea16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ea00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea04:	f383 8811 	msr	BASEPRI, r3
 800ea08:	f3bf 8f6f 	isb	sy
 800ea0c:	f3bf 8f4f 	dsb	sy
 800ea10:	61fb      	str	r3, [r7, #28]
}
 800ea12:	bf00      	nop
 800ea14:	e7fe      	b.n	800ea14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ea16:	2350      	movs	r3, #80	; 0x50
 800ea18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	2b50      	cmp	r3, #80	; 0x50
 800ea1e:	d00a      	beq.n	800ea36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ea20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	61bb      	str	r3, [r7, #24]
}
 800ea32:	bf00      	nop
 800ea34:	e7fe      	b.n	800ea34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ea36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ea3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00d      	beq.n	800ea5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ea42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea44:	2201      	movs	r2, #1
 800ea46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ea4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	4613      	mov	r3, r2
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	68b9      	ldr	r1, [r7, #8]
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f000 f83f 	bl	800eadc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3730      	adds	r7, #48	; 0x30
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b08a      	sub	sp, #40	; 0x28
 800ea6c:	af02      	add	r7, sp, #8
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	4613      	mov	r3, r2
 800ea74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10a      	bne.n	800ea92 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ea7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea80:	f383 8811 	msr	BASEPRI, r3
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	613b      	str	r3, [r7, #16]
}
 800ea8e:	bf00      	nop
 800ea90:	e7fe      	b.n	800ea90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	68ba      	ldr	r2, [r7, #8]
 800ea96:	fb02 f303 	mul.w	r3, r2, r3
 800ea9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	3350      	adds	r3, #80	; 0x50
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f002 fa29 	bl	8010ef8 <pvPortMalloc>
 800eaa6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d011      	beq.n	800ead2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eaae:	69bb      	ldr	r3, [r7, #24]
 800eab0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	3350      	adds	r3, #80	; 0x50
 800eab6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eac0:	79fa      	ldrb	r2, [r7, #7]
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	4613      	mov	r3, r2
 800eac8:	697a      	ldr	r2, [r7, #20]
 800eaca:	68b9      	ldr	r1, [r7, #8]
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f000 f805 	bl	800eadc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ead2:	69bb      	ldr	r3, [r7, #24]
	}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3720      	adds	r7, #32
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]
 800eae8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d103      	bne.n	800eaf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	69ba      	ldr	r2, [r7, #24]
 800eaf4:	601a      	str	r2, [r3, #0]
 800eaf6:	e002      	b.n	800eafe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eafe:	69bb      	ldr	r3, [r7, #24]
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eb0a:	2101      	movs	r1, #1
 800eb0c:	69b8      	ldr	r0, [r7, #24]
 800eb0e:	f7ff fecb 	bl	800e8a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	78fa      	ldrb	r2, [r7, #3]
 800eb16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eb1a:	bf00      	nop
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
	...

0800eb24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08e      	sub	sp, #56	; 0x38
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb32:	2300      	movs	r3, #0
 800eb34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10a      	bne.n	800eb56 <xQueueGenericSend+0x32>
	__asm volatile
 800eb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb44:	f383 8811 	msr	BASEPRI, r3
 800eb48:	f3bf 8f6f 	isb	sy
 800eb4c:	f3bf 8f4f 	dsb	sy
 800eb50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb52:	bf00      	nop
 800eb54:	e7fe      	b.n	800eb54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d103      	bne.n	800eb64 <xQueueGenericSend+0x40>
 800eb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d101      	bne.n	800eb68 <xQueueGenericSend+0x44>
 800eb64:	2301      	movs	r3, #1
 800eb66:	e000      	b.n	800eb6a <xQueueGenericSend+0x46>
 800eb68:	2300      	movs	r3, #0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d10a      	bne.n	800eb84 <xQueueGenericSend+0x60>
	__asm volatile
 800eb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb72:	f383 8811 	msr	BASEPRI, r3
 800eb76:	f3bf 8f6f 	isb	sy
 800eb7a:	f3bf 8f4f 	dsb	sy
 800eb7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eb80:	bf00      	nop
 800eb82:	e7fe      	b.n	800eb82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	d103      	bne.n	800eb92 <xQueueGenericSend+0x6e>
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d101      	bne.n	800eb96 <xQueueGenericSend+0x72>
 800eb92:	2301      	movs	r3, #1
 800eb94:	e000      	b.n	800eb98 <xQueueGenericSend+0x74>
 800eb96:	2300      	movs	r3, #0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10a      	bne.n	800ebb2 <xQueueGenericSend+0x8e>
	__asm volatile
 800eb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba0:	f383 8811 	msr	BASEPRI, r3
 800eba4:	f3bf 8f6f 	isb	sy
 800eba8:	f3bf 8f4f 	dsb	sy
 800ebac:	623b      	str	r3, [r7, #32]
}
 800ebae:	bf00      	nop
 800ebb0:	e7fe      	b.n	800ebb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebb2:	f001 faed 	bl	8010190 <xTaskGetSchedulerState>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d102      	bne.n	800ebc2 <xQueueGenericSend+0x9e>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d101      	bne.n	800ebc6 <xQueueGenericSend+0xa2>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e000      	b.n	800ebc8 <xQueueGenericSend+0xa4>
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d10a      	bne.n	800ebe2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ebcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd0:	f383 8811 	msr	BASEPRI, r3
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	61fb      	str	r3, [r7, #28]
}
 800ebde:	bf00      	nop
 800ebe0:	e7fe      	b.n	800ebe0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebe2:	f002 f867 	bl	8010cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ebe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d302      	bcc.n	800ebf8 <xQueueGenericSend+0xd4>
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	2b02      	cmp	r3, #2
 800ebf6:	d129      	bne.n	800ec4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ebf8:	683a      	ldr	r2, [r7, #0]
 800ebfa:	68b9      	ldr	r1, [r7, #8]
 800ebfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebfe:	f000 fa8b 	bl	800f118 <prvCopyDataToQueue>
 800ec02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d010      	beq.n	800ec2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0e:	3324      	adds	r3, #36	; 0x24
 800ec10:	4618      	mov	r0, r3
 800ec12:	f001 f89d 	bl	800fd50 <xTaskRemoveFromEventList>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d013      	beq.n	800ec44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ec1c:	4b3f      	ldr	r3, [pc, #252]	; (800ed1c <xQueueGenericSend+0x1f8>)
 800ec1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec22:	601a      	str	r2, [r3, #0]
 800ec24:	f3bf 8f4f 	dsb	sy
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	e00a      	b.n	800ec44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d007      	beq.n	800ec44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ec34:	4b39      	ldr	r3, [pc, #228]	; (800ed1c <xQueueGenericSend+0x1f8>)
 800ec36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec3a:	601a      	str	r2, [r3, #0]
 800ec3c:	f3bf 8f4f 	dsb	sy
 800ec40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ec44:	f002 f866 	bl	8010d14 <vPortExitCritical>
				return pdPASS;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e063      	b.n	800ed14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d103      	bne.n	800ec5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec52:	f002 f85f 	bl	8010d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ec56:	2300      	movs	r3, #0
 800ec58:	e05c      	b.n	800ed14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d106      	bne.n	800ec6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec60:	f107 0314 	add.w	r3, r7, #20
 800ec64:	4618      	mov	r0, r3
 800ec66:	f001 f939 	bl	800fedc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec6e:	f002 f851 	bl	8010d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec72:	f000 fdfb 	bl	800f86c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec76:	f002 f81d 	bl	8010cb4 <vPortEnterCritical>
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec80:	b25b      	sxtb	r3, r3
 800ec82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec86:	d103      	bne.n	800ec90 <xQueueGenericSend+0x16c>
 800ec88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec96:	b25b      	sxtb	r3, r3
 800ec98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec9c:	d103      	bne.n	800eca6 <xQueueGenericSend+0x182>
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca0:	2200      	movs	r2, #0
 800eca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eca6:	f002 f835 	bl	8010d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecaa:	1d3a      	adds	r2, r7, #4
 800ecac:	f107 0314 	add.w	r3, r7, #20
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f001 f928 	bl	800ff08 <xTaskCheckForTimeOut>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d124      	bne.n	800ed08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ecbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecc0:	f000 fb22 	bl	800f308 <prvIsQueueFull>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d018      	beq.n	800ecfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eccc:	3310      	adds	r3, #16
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f000 ffb0 	bl	800fc38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ecd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecda:	f000 faad 	bl	800f238 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ecde:	f000 fdd3 	bl	800f888 <xTaskResumeAll>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f47f af7c 	bne.w	800ebe2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ecea:	4b0c      	ldr	r3, [pc, #48]	; (800ed1c <xQueueGenericSend+0x1f8>)
 800ecec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecf0:	601a      	str	r2, [r3, #0]
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	f3bf 8f6f 	isb	sy
 800ecfa:	e772      	b.n	800ebe2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ecfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecfe:	f000 fa9b 	bl	800f238 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed02:	f000 fdc1 	bl	800f888 <xTaskResumeAll>
 800ed06:	e76c      	b.n	800ebe2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ed08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed0a:	f000 fa95 	bl	800f238 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed0e:	f000 fdbb 	bl	800f888 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ed12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3738      	adds	r7, #56	; 0x38
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	e000ed04 	.word	0xe000ed04

0800ed20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b090      	sub	sp, #64	; 0x40
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
 800ed2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ed32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d10a      	bne.n	800ed4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ed38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3c:	f383 8811 	msr	BASEPRI, r3
 800ed40:	f3bf 8f6f 	isb	sy
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed4a:	bf00      	nop
 800ed4c:	e7fe      	b.n	800ed4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d103      	bne.n	800ed5c <xQueueGenericSendFromISR+0x3c>
 800ed54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d101      	bne.n	800ed60 <xQueueGenericSendFromISR+0x40>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e000      	b.n	800ed62 <xQueueGenericSendFromISR+0x42>
 800ed60:	2300      	movs	r3, #0
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d10a      	bne.n	800ed7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ed66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6a:	f383 8811 	msr	BASEPRI, r3
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	f3bf 8f4f 	dsb	sy
 800ed76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed78:	bf00      	nop
 800ed7a:	e7fe      	b.n	800ed7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	2b02      	cmp	r3, #2
 800ed80:	d103      	bne.n	800ed8a <xQueueGenericSendFromISR+0x6a>
 800ed82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	d101      	bne.n	800ed8e <xQueueGenericSendFromISR+0x6e>
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e000      	b.n	800ed90 <xQueueGenericSendFromISR+0x70>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d10a      	bne.n	800edaa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ed94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed98:	f383 8811 	msr	BASEPRI, r3
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	623b      	str	r3, [r7, #32]
}
 800eda6:	bf00      	nop
 800eda8:	e7fe      	b.n	800eda8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edaa:	f002 f865 	bl	8010e78 <vPortValidateInterruptPriority>
	__asm volatile
 800edae:	f3ef 8211 	mrs	r2, BASEPRI
 800edb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	61fa      	str	r2, [r7, #28]
 800edc4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800edc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d302      	bcc.n	800eddc <xQueueGenericSendFromISR+0xbc>
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	2b02      	cmp	r3, #2
 800edda:	d12f      	bne.n	800ee3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ede2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ede6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	68b9      	ldr	r1, [r7, #8]
 800edf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edf2:	f000 f991 	bl	800f118 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800edf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800edfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfe:	d112      	bne.n	800ee26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d016      	beq.n	800ee36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0a:	3324      	adds	r3, #36	; 0x24
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f000 ff9f 	bl	800fd50 <xTaskRemoveFromEventList>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00e      	beq.n	800ee36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00b      	beq.n	800ee36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2201      	movs	r2, #1
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	e007      	b.n	800ee36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	b25a      	sxtb	r2, r3
 800ee30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee36:	2301      	movs	r3, #1
 800ee38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ee3a:	e001      	b.n	800ee40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee42:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	f383 8811 	msr	BASEPRI, r3
}
 800ee4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3740      	adds	r7, #64	; 0x40
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
	...

0800ee58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b08c      	sub	sp, #48	; 0x30
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee64:	2300      	movs	r3, #0
 800ee66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d10a      	bne.n	800ee88 <xQueueReceive+0x30>
	__asm volatile
 800ee72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee76:	f383 8811 	msr	BASEPRI, r3
 800ee7a:	f3bf 8f6f 	isb	sy
 800ee7e:	f3bf 8f4f 	dsb	sy
 800ee82:	623b      	str	r3, [r7, #32]
}
 800ee84:	bf00      	nop
 800ee86:	e7fe      	b.n	800ee86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d103      	bne.n	800ee96 <xQueueReceive+0x3e>
 800ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d101      	bne.n	800ee9a <xQueueReceive+0x42>
 800ee96:	2301      	movs	r3, #1
 800ee98:	e000      	b.n	800ee9c <xQueueReceive+0x44>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d10a      	bne.n	800eeb6 <xQueueReceive+0x5e>
	__asm volatile
 800eea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea4:	f383 8811 	msr	BASEPRI, r3
 800eea8:	f3bf 8f6f 	isb	sy
 800eeac:	f3bf 8f4f 	dsb	sy
 800eeb0:	61fb      	str	r3, [r7, #28]
}
 800eeb2:	bf00      	nop
 800eeb4:	e7fe      	b.n	800eeb4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eeb6:	f001 f96b 	bl	8010190 <xTaskGetSchedulerState>
 800eeba:	4603      	mov	r3, r0
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d102      	bne.n	800eec6 <xQueueReceive+0x6e>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d101      	bne.n	800eeca <xQueueReceive+0x72>
 800eec6:	2301      	movs	r3, #1
 800eec8:	e000      	b.n	800eecc <xQueueReceive+0x74>
 800eeca:	2300      	movs	r3, #0
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d10a      	bne.n	800eee6 <xQueueReceive+0x8e>
	__asm volatile
 800eed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed4:	f383 8811 	msr	BASEPRI, r3
 800eed8:	f3bf 8f6f 	isb	sy
 800eedc:	f3bf 8f4f 	dsb	sy
 800eee0:	61bb      	str	r3, [r7, #24]
}
 800eee2:	bf00      	nop
 800eee4:	e7fe      	b.n	800eee4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eee6:	f001 fee5 	bl	8010cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d01f      	beq.n	800ef36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eef6:	68b9      	ldr	r1, [r7, #8]
 800eef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eefa:	f000 f977 	bl	800f1ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef00:	1e5a      	subs	r2, r3, #1
 800ef02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d00f      	beq.n	800ef2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef10:	3310      	adds	r3, #16
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 ff1c 	bl	800fd50 <xTaskRemoveFromEventList>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d007      	beq.n	800ef2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef1e:	4b3d      	ldr	r3, [pc, #244]	; (800f014 <xQueueReceive+0x1bc>)
 800ef20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef24:	601a      	str	r2, [r3, #0]
 800ef26:	f3bf 8f4f 	dsb	sy
 800ef2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef2e:	f001 fef1 	bl	8010d14 <vPortExitCritical>
				return pdPASS;
 800ef32:	2301      	movs	r3, #1
 800ef34:	e069      	b.n	800f00a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d103      	bne.n	800ef44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef3c:	f001 feea 	bl	8010d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef40:	2300      	movs	r3, #0
 800ef42:	e062      	b.n	800f00a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d106      	bne.n	800ef58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef4a:	f107 0310 	add.w	r3, r7, #16
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f000 ffc4 	bl	800fedc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef54:	2301      	movs	r3, #1
 800ef56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef58:	f001 fedc 	bl	8010d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef5c:	f000 fc86 	bl	800f86c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef60:	f001 fea8 	bl	8010cb4 <vPortEnterCritical>
 800ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef6a:	b25b      	sxtb	r3, r3
 800ef6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef70:	d103      	bne.n	800ef7a <xQueueReceive+0x122>
 800ef72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef80:	b25b      	sxtb	r3, r3
 800ef82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef86:	d103      	bne.n	800ef90 <xQueueReceive+0x138>
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef90:	f001 fec0 	bl	8010d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef94:	1d3a      	adds	r2, r7, #4
 800ef96:	f107 0310 	add.w	r3, r7, #16
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f000 ffb3 	bl	800ff08 <xTaskCheckForTimeOut>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d123      	bne.n	800eff0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efaa:	f000 f997 	bl	800f2dc <prvIsQueueEmpty>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d017      	beq.n	800efe4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800efb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb6:	3324      	adds	r3, #36	; 0x24
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	4611      	mov	r1, r2
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 fe3b 	bl	800fc38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800efc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efc4:	f000 f938 	bl	800f238 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800efc8:	f000 fc5e 	bl	800f888 <xTaskResumeAll>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d189      	bne.n	800eee6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800efd2:	4b10      	ldr	r3, [pc, #64]	; (800f014 <xQueueReceive+0x1bc>)
 800efd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd8:	601a      	str	r2, [r3, #0]
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	e780      	b.n	800eee6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800efe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efe6:	f000 f927 	bl	800f238 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efea:	f000 fc4d 	bl	800f888 <xTaskResumeAll>
 800efee:	e77a      	b.n	800eee6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eff2:	f000 f921 	bl	800f238 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eff6:	f000 fc47 	bl	800f888 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800effa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800effc:	f000 f96e 	bl	800f2dc <prvIsQueueEmpty>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	f43f af6f 	beq.w	800eee6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f008:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3730      	adds	r7, #48	; 0x30
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	e000ed04 	.word	0xe000ed04

0800f018 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b08e      	sub	sp, #56	; 0x38
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10a      	bne.n	800f044 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	623b      	str	r3, [r7, #32]
}
 800f040:	bf00      	nop
 800f042:	e7fe      	b.n	800f042 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d103      	bne.n	800f052 <xQueueReceiveFromISR+0x3a>
 800f04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d101      	bne.n	800f056 <xQueueReceiveFromISR+0x3e>
 800f052:	2301      	movs	r3, #1
 800f054:	e000      	b.n	800f058 <xQueueReceiveFromISR+0x40>
 800f056:	2300      	movs	r3, #0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d10a      	bne.n	800f072 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f060:	f383 8811 	msr	BASEPRI, r3
 800f064:	f3bf 8f6f 	isb	sy
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	61fb      	str	r3, [r7, #28]
}
 800f06e:	bf00      	nop
 800f070:	e7fe      	b.n	800f070 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f072:	f001 ff01 	bl	8010e78 <vPortValidateInterruptPriority>
	__asm volatile
 800f076:	f3ef 8211 	mrs	r2, BASEPRI
 800f07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07e:	f383 8811 	msr	BASEPRI, r3
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	f3bf 8f4f 	dsb	sy
 800f08a:	61ba      	str	r2, [r7, #24]
 800f08c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f08e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f090:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f096:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d02f      	beq.n	800f0fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f0a8:	68b9      	ldr	r1, [r7, #8]
 800f0aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ac:	f000 f89e 	bl	800f1ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	1e5a      	subs	r2, r3, #1
 800f0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f0b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0c0:	d112      	bne.n	800f0e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d016      	beq.n	800f0f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0cc:	3310      	adds	r3, #16
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 fe3e 	bl	800fd50 <xTaskRemoveFromEventList>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00e      	beq.n	800f0f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d00b      	beq.n	800f0f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	601a      	str	r2, [r3, #0]
 800f0e6:	e007      	b.n	800f0f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	b25a      	sxtb	r2, r3
 800f0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	637b      	str	r3, [r7, #52]	; 0x34
 800f0fc:	e001      	b.n	800f102 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f0fe:	2300      	movs	r3, #0
 800f100:	637b      	str	r3, [r7, #52]	; 0x34
 800f102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f104:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	f383 8811 	msr	BASEPRI, r3
}
 800f10c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f110:	4618      	mov	r0, r3
 800f112:	3738      	adds	r7, #56	; 0x38
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f124:	2300      	movs	r3, #0
 800f126:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f12c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f132:	2b00      	cmp	r3, #0
 800f134:	d10d      	bne.n	800f152 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d14d      	bne.n	800f1da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	689b      	ldr	r3, [r3, #8]
 800f142:	4618      	mov	r0, r3
 800f144:	f001 f842 	bl	80101cc <xTaskPriorityDisinherit>
 800f148:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2200      	movs	r2, #0
 800f14e:	609a      	str	r2, [r3, #8]
 800f150:	e043      	b.n	800f1da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d119      	bne.n	800f18c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6858      	ldr	r0, [r3, #4]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f160:	461a      	mov	r2, r3
 800f162:	68b9      	ldr	r1, [r7, #8]
 800f164:	f002 ff88 	bl	8012078 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	685a      	ldr	r2, [r3, #4]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f170:	441a      	add	r2, r3
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	685a      	ldr	r2, [r3, #4]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	689b      	ldr	r3, [r3, #8]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d32b      	bcc.n	800f1da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	605a      	str	r2, [r3, #4]
 800f18a:	e026      	b.n	800f1da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	68d8      	ldr	r0, [r3, #12]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f194:	461a      	mov	r2, r3
 800f196:	68b9      	ldr	r1, [r7, #8]
 800f198:	f002 ff6e 	bl	8012078 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	68da      	ldr	r2, [r3, #12]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1a4:	425b      	negs	r3, r3
 800f1a6:	441a      	add	r2, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	68da      	ldr	r2, [r3, #12]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d207      	bcs.n	800f1c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	689a      	ldr	r2, [r3, #8]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c0:	425b      	negs	r3, r3
 800f1c2:	441a      	add	r2, r3
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d105      	bne.n	800f1da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d002      	beq.n	800f1da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	1c5a      	adds	r2, r3, #1
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f1e2:	697b      	ldr	r3, [r7, #20]
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3718      	adds	r7, #24
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d018      	beq.n	800f230 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	68da      	ldr	r2, [r3, #12]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f206:	441a      	add	r2, r3
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	68da      	ldr	r2, [r3, #12]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	429a      	cmp	r2, r3
 800f216:	d303      	bcc.n	800f220 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	68d9      	ldr	r1, [r3, #12]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f228:	461a      	mov	r2, r3
 800f22a:	6838      	ldr	r0, [r7, #0]
 800f22c:	f002 ff24 	bl	8012078 <memcpy>
	}
}
 800f230:	bf00      	nop
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b084      	sub	sp, #16
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f240:	f001 fd38 	bl	8010cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f24a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f24c:	e011      	b.n	800f272 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f252:	2b00      	cmp	r3, #0
 800f254:	d012      	beq.n	800f27c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	3324      	adds	r3, #36	; 0x24
 800f25a:	4618      	mov	r0, r3
 800f25c:	f000 fd78 	bl	800fd50 <xTaskRemoveFromEventList>
 800f260:	4603      	mov	r3, r0
 800f262:	2b00      	cmp	r3, #0
 800f264:	d001      	beq.n	800f26a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f266:	f000 feb1 	bl	800ffcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f26a:	7bfb      	ldrb	r3, [r7, #15]
 800f26c:	3b01      	subs	r3, #1
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f276:	2b00      	cmp	r3, #0
 800f278:	dce9      	bgt.n	800f24e <prvUnlockQueue+0x16>
 800f27a:	e000      	b.n	800f27e <prvUnlockQueue+0x46>
					break;
 800f27c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	22ff      	movs	r2, #255	; 0xff
 800f282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f286:	f001 fd45 	bl	8010d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f28a:	f001 fd13 	bl	8010cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f294:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f296:	e011      	b.n	800f2bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	691b      	ldr	r3, [r3, #16]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d012      	beq.n	800f2c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	3310      	adds	r3, #16
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f000 fd53 	bl	800fd50 <xTaskRemoveFromEventList>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f2b0:	f000 fe8c 	bl	800ffcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f2b4:	7bbb      	ldrb	r3, [r7, #14]
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	dce9      	bgt.n	800f298 <prvUnlockQueue+0x60>
 800f2c4:	e000      	b.n	800f2c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f2c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	22ff      	movs	r2, #255	; 0xff
 800f2cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f2d0:	f001 fd20 	bl	8010d14 <vPortExitCritical>
}
 800f2d4:	bf00      	nop
 800f2d6:	3710      	adds	r7, #16
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f2e4:	f001 fce6 	bl	8010cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d102      	bne.n	800f2f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	60fb      	str	r3, [r7, #12]
 800f2f4:	e001      	b.n	800f2fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f2fa:	f001 fd0b 	bl	8010d14 <vPortExitCritical>

	return xReturn;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
}
 800f300:	4618      	mov	r0, r3
 800f302:	3710      	adds	r7, #16
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f310:	f001 fcd0 	bl	8010cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d102      	bne.n	800f326 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f320:	2301      	movs	r3, #1
 800f322:	60fb      	str	r3, [r7, #12]
 800f324:	e001      	b.n	800f32a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f326:	2300      	movs	r3, #0
 800f328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f32a:	f001 fcf3 	bl	8010d14 <vPortExitCritical>

	return xReturn;
 800f32e:	68fb      	ldr	r3, [r7, #12]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f342:	2300      	movs	r3, #0
 800f344:	60fb      	str	r3, [r7, #12]
 800f346:	e014      	b.n	800f372 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f348:	4a0f      	ldr	r2, [pc, #60]	; (800f388 <vQueueAddToRegistry+0x50>)
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d10b      	bne.n	800f36c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f354:	490c      	ldr	r1, [pc, #48]	; (800f388 <vQueueAddToRegistry+0x50>)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f35e:	4a0a      	ldr	r2, [pc, #40]	; (800f388 <vQueueAddToRegistry+0x50>)
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	00db      	lsls	r3, r3, #3
 800f364:	4413      	add	r3, r2
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f36a:	e006      	b.n	800f37a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	3301      	adds	r3, #1
 800f370:	60fb      	str	r3, [r7, #12]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2b07      	cmp	r3, #7
 800f376:	d9e7      	bls.n	800f348 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f378:	bf00      	nop
 800f37a:	bf00      	nop
 800f37c:	3714      	adds	r7, #20
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	20002dd8 	.word	0x20002dd8

0800f38c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b086      	sub	sp, #24
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f39c:	f001 fc8a 	bl	8010cb4 <vPortEnterCritical>
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3a6:	b25b      	sxtb	r3, r3
 800f3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ac:	d103      	bne.n	800f3b6 <vQueueWaitForMessageRestricted+0x2a>
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3bc:	b25b      	sxtb	r3, r3
 800f3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3c2:	d103      	bne.n	800f3cc <vQueueWaitForMessageRestricted+0x40>
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3cc:	f001 fca2 	bl	8010d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d106      	bne.n	800f3e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	3324      	adds	r3, #36	; 0x24
 800f3dc:	687a      	ldr	r2, [r7, #4]
 800f3de:	68b9      	ldr	r1, [r7, #8]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f000 fc89 	bl	800fcf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f3e6:	6978      	ldr	r0, [r7, #20]
 800f3e8:	f7ff ff26 	bl	800f238 <prvUnlockQueue>
	}
 800f3ec:	bf00      	nop
 800f3ee:	3718      	adds	r7, #24
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b08e      	sub	sp, #56	; 0x38
 800f3f8:	af04      	add	r7, sp, #16
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	607a      	str	r2, [r7, #4]
 800f400:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f404:	2b00      	cmp	r3, #0
 800f406:	d10a      	bne.n	800f41e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f40c:	f383 8811 	msr	BASEPRI, r3
 800f410:	f3bf 8f6f 	isb	sy
 800f414:	f3bf 8f4f 	dsb	sy
 800f418:	623b      	str	r3, [r7, #32]
}
 800f41a:	bf00      	nop
 800f41c:	e7fe      	b.n	800f41c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10a      	bne.n	800f43a <xTaskCreateStatic+0x46>
	__asm volatile
 800f424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f428:	f383 8811 	msr	BASEPRI, r3
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	61fb      	str	r3, [r7, #28]
}
 800f436:	bf00      	nop
 800f438:	e7fe      	b.n	800f438 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f43a:	235c      	movs	r3, #92	; 0x5c
 800f43c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	2b5c      	cmp	r3, #92	; 0x5c
 800f442:	d00a      	beq.n	800f45a <xTaskCreateStatic+0x66>
	__asm volatile
 800f444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f448:	f383 8811 	msr	BASEPRI, r3
 800f44c:	f3bf 8f6f 	isb	sy
 800f450:	f3bf 8f4f 	dsb	sy
 800f454:	61bb      	str	r3, [r7, #24]
}
 800f456:	bf00      	nop
 800f458:	e7fe      	b.n	800f458 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f45a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d01e      	beq.n	800f4a0 <xTaskCreateStatic+0xac>
 800f462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f464:	2b00      	cmp	r3, #0
 800f466:	d01b      	beq.n	800f4a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f470:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f474:	2202      	movs	r2, #2
 800f476:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f47a:	2300      	movs	r3, #0
 800f47c:	9303      	str	r3, [sp, #12]
 800f47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f480:	9302      	str	r3, [sp, #8]
 800f482:	f107 0314 	add.w	r3, r7, #20
 800f486:	9301      	str	r3, [sp, #4]
 800f488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48a:	9300      	str	r3, [sp, #0]
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	68b9      	ldr	r1, [r7, #8]
 800f492:	68f8      	ldr	r0, [r7, #12]
 800f494:	f000 f850 	bl	800f538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f49a:	f000 f8dd 	bl	800f658 <prvAddNewTaskToReadyList>
 800f49e:	e001      	b.n	800f4a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f4a4:	697b      	ldr	r3, [r7, #20]
	}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3728      	adds	r7, #40	; 0x28
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b08c      	sub	sp, #48	; 0x30
 800f4b2:	af04      	add	r7, sp, #16
 800f4b4:	60f8      	str	r0, [r7, #12]
 800f4b6:	60b9      	str	r1, [r7, #8]
 800f4b8:	603b      	str	r3, [r7, #0]
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f4be:	88fb      	ldrh	r3, [r7, #6]
 800f4c0:	009b      	lsls	r3, r3, #2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f001 fd18 	bl	8010ef8 <pvPortMalloc>
 800f4c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00e      	beq.n	800f4ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f4d0:	205c      	movs	r0, #92	; 0x5c
 800f4d2:	f001 fd11 	bl	8010ef8 <pvPortMalloc>
 800f4d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d003      	beq.n	800f4e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	697a      	ldr	r2, [r7, #20]
 800f4e2:	631a      	str	r2, [r3, #48]	; 0x30
 800f4e4:	e005      	b.n	800f4f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f4e6:	6978      	ldr	r0, [r7, #20]
 800f4e8:	f001 fdd2 	bl	8011090 <vPortFree>
 800f4ec:	e001      	b.n	800f4f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d017      	beq.n	800f528 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f500:	88fa      	ldrh	r2, [r7, #6]
 800f502:	2300      	movs	r3, #0
 800f504:	9303      	str	r3, [sp, #12]
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	9302      	str	r3, [sp, #8]
 800f50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50c:	9301      	str	r3, [sp, #4]
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	68b9      	ldr	r1, [r7, #8]
 800f516:	68f8      	ldr	r0, [r7, #12]
 800f518:	f000 f80e 	bl	800f538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f51c:	69f8      	ldr	r0, [r7, #28]
 800f51e:	f000 f89b 	bl	800f658 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f522:	2301      	movs	r3, #1
 800f524:	61bb      	str	r3, [r7, #24]
 800f526:	e002      	b.n	800f52e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f528:	f04f 33ff 	mov.w	r3, #4294967295
 800f52c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f52e:	69bb      	ldr	r3, [r7, #24]
	}
 800f530:	4618      	mov	r0, r3
 800f532:	3720      	adds	r7, #32
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b088      	sub	sp, #32
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
 800f544:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f548:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	009b      	lsls	r3, r3, #2
 800f54e:	461a      	mov	r2, r3
 800f550:	21a5      	movs	r1, #165	; 0xa5
 800f552:	f002 fd9f 	bl	8012094 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f560:	3b01      	subs	r3, #1
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	4413      	add	r3, r2
 800f566:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	f023 0307 	bic.w	r3, r3, #7
 800f56e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f570:	69bb      	ldr	r3, [r7, #24]
 800f572:	f003 0307 	and.w	r3, r3, #7
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00a      	beq.n	800f590 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57e:	f383 8811 	msr	BASEPRI, r3
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	f3bf 8f4f 	dsb	sy
 800f58a:	617b      	str	r3, [r7, #20]
}
 800f58c:	bf00      	nop
 800f58e:	e7fe      	b.n	800f58e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d01f      	beq.n	800f5d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f596:	2300      	movs	r3, #0
 800f598:	61fb      	str	r3, [r7, #28]
 800f59a:	e012      	b.n	800f5c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f59c:	68ba      	ldr	r2, [r7, #8]
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	7819      	ldrb	r1, [r3, #0]
 800f5a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	3334      	adds	r3, #52	; 0x34
 800f5ac:	460a      	mov	r2, r1
 800f5ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f5b0:	68ba      	ldr	r2, [r7, #8]
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d006      	beq.n	800f5ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	61fb      	str	r3, [r7, #28]
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	2b0f      	cmp	r3, #15
 800f5c6:	d9e9      	bls.n	800f59c <prvInitialiseNewTask+0x64>
 800f5c8:	e000      	b.n	800f5cc <prvInitialiseNewTask+0x94>
			{
				break;
 800f5ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f5d4:	e003      	b.n	800f5de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e0:	2b37      	cmp	r3, #55	; 0x37
 800f5e2:	d901      	bls.n	800f5e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f5e4:	2337      	movs	r3, #55	; 0x37
 800f5e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7ff f8be 	bl	800e780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f606:	3318      	adds	r3, #24
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff f8b9 	bl	800e780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f612:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f616:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f622:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f626:	2200      	movs	r2, #0
 800f628:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62c:	2200      	movs	r2, #0
 800f62e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f632:	683a      	ldr	r2, [r7, #0]
 800f634:	68f9      	ldr	r1, [r7, #12]
 800f636:	69b8      	ldr	r0, [r7, #24]
 800f638:	f001 fa10 	bl	8010a5c <pxPortInitialiseStack>
 800f63c:	4602      	mov	r2, r0
 800f63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f640:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f644:	2b00      	cmp	r3, #0
 800f646:	d002      	beq.n	800f64e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f64c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f64e:	bf00      	nop
 800f650:	3720      	adds	r7, #32
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
	...

0800f658 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f660:	f001 fb28 	bl	8010cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f664:	4b2d      	ldr	r3, [pc, #180]	; (800f71c <prvAddNewTaskToReadyList+0xc4>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	3301      	adds	r3, #1
 800f66a:	4a2c      	ldr	r2, [pc, #176]	; (800f71c <prvAddNewTaskToReadyList+0xc4>)
 800f66c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f66e:	4b2c      	ldr	r3, [pc, #176]	; (800f720 <prvAddNewTaskToReadyList+0xc8>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d109      	bne.n	800f68a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f676:	4a2a      	ldr	r2, [pc, #168]	; (800f720 <prvAddNewTaskToReadyList+0xc8>)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f67c:	4b27      	ldr	r3, [pc, #156]	; (800f71c <prvAddNewTaskToReadyList+0xc4>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2b01      	cmp	r3, #1
 800f682:	d110      	bne.n	800f6a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f684:	f000 fcc6 	bl	8010014 <prvInitialiseTaskLists>
 800f688:	e00d      	b.n	800f6a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f68a:	4b26      	ldr	r3, [pc, #152]	; (800f724 <prvAddNewTaskToReadyList+0xcc>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d109      	bne.n	800f6a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f692:	4b23      	ldr	r3, [pc, #140]	; (800f720 <prvAddNewTaskToReadyList+0xc8>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d802      	bhi.n	800f6a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f6a0:	4a1f      	ldr	r2, [pc, #124]	; (800f720 <prvAddNewTaskToReadyList+0xc8>)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f6a6:	4b20      	ldr	r3, [pc, #128]	; (800f728 <prvAddNewTaskToReadyList+0xd0>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	4a1e      	ldr	r2, [pc, #120]	; (800f728 <prvAddNewTaskToReadyList+0xd0>)
 800f6ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f6b0:	4b1d      	ldr	r3, [pc, #116]	; (800f728 <prvAddNewTaskToReadyList+0xd0>)
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6bc:	4b1b      	ldr	r3, [pc, #108]	; (800f72c <prvAddNewTaskToReadyList+0xd4>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d903      	bls.n	800f6cc <prvAddNewTaskToReadyList+0x74>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c8:	4a18      	ldr	r2, [pc, #96]	; (800f72c <prvAddNewTaskToReadyList+0xd4>)
 800f6ca:	6013      	str	r3, [r2, #0]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	4413      	add	r3, r2
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	4a15      	ldr	r2, [pc, #84]	; (800f730 <prvAddNewTaskToReadyList+0xd8>)
 800f6da:	441a      	add	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	3304      	adds	r3, #4
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	f7ff f859 	bl	800e79a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f6e8:	f001 fb14 	bl	8010d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f6ec:	4b0d      	ldr	r3, [pc, #52]	; (800f724 <prvAddNewTaskToReadyList+0xcc>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00e      	beq.n	800f712 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f6f4:	4b0a      	ldr	r3, [pc, #40]	; (800f720 <prvAddNewTaskToReadyList+0xc8>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d207      	bcs.n	800f712 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f702:	4b0c      	ldr	r3, [pc, #48]	; (800f734 <prvAddNewTaskToReadyList+0xdc>)
 800f704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f708:	601a      	str	r2, [r3, #0]
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f712:	bf00      	nop
 800f714:	3708      	adds	r7, #8
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	20000d80 	.word	0x20000d80
 800f720:	200008ac 	.word	0x200008ac
 800f724:	20000d8c 	.word	0x20000d8c
 800f728:	20000d9c 	.word	0x20000d9c
 800f72c:	20000d88 	.word	0x20000d88
 800f730:	200008b0 	.word	0x200008b0
 800f734:	e000ed04 	.word	0xe000ed04

0800f738 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f740:	2300      	movs	r3, #0
 800f742:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d017      	beq.n	800f77a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f74a:	4b13      	ldr	r3, [pc, #76]	; (800f798 <vTaskDelay+0x60>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00a      	beq.n	800f768 <vTaskDelay+0x30>
	__asm volatile
 800f752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f756:	f383 8811 	msr	BASEPRI, r3
 800f75a:	f3bf 8f6f 	isb	sy
 800f75e:	f3bf 8f4f 	dsb	sy
 800f762:	60bb      	str	r3, [r7, #8]
}
 800f764:	bf00      	nop
 800f766:	e7fe      	b.n	800f766 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f768:	f000 f880 	bl	800f86c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f76c:	2100      	movs	r1, #0
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f000 fdb2 	bl	80102d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f774:	f000 f888 	bl	800f888 <xTaskResumeAll>
 800f778:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d107      	bne.n	800f790 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f780:	4b06      	ldr	r3, [pc, #24]	; (800f79c <vTaskDelay+0x64>)
 800f782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f786:	601a      	str	r2, [r3, #0]
 800f788:	f3bf 8f4f 	dsb	sy
 800f78c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f790:	bf00      	nop
 800f792:	3710      	adds	r7, #16
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	20000da8 	.word	0x20000da8
 800f79c:	e000ed04 	.word	0xe000ed04

0800f7a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b08a      	sub	sp, #40	; 0x28
 800f7a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f7ae:	463a      	mov	r2, r7
 800f7b0:	1d39      	adds	r1, r7, #4
 800f7b2:	f107 0308 	add.w	r3, r7, #8
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fe fd22 	bl	800e200 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f7bc:	6839      	ldr	r1, [r7, #0]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	68ba      	ldr	r2, [r7, #8]
 800f7c2:	9202      	str	r2, [sp, #8]
 800f7c4:	9301      	str	r3, [sp, #4]
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	9300      	str	r3, [sp, #0]
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	460a      	mov	r2, r1
 800f7ce:	4921      	ldr	r1, [pc, #132]	; (800f854 <vTaskStartScheduler+0xb4>)
 800f7d0:	4821      	ldr	r0, [pc, #132]	; (800f858 <vTaskStartScheduler+0xb8>)
 800f7d2:	f7ff fe0f 	bl	800f3f4 <xTaskCreateStatic>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	4a20      	ldr	r2, [pc, #128]	; (800f85c <vTaskStartScheduler+0xbc>)
 800f7da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f7dc:	4b1f      	ldr	r3, [pc, #124]	; (800f85c <vTaskStartScheduler+0xbc>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d002      	beq.n	800f7ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	617b      	str	r3, [r7, #20]
 800f7e8:	e001      	b.n	800f7ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d102      	bne.n	800f7fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f7f4:	f000 fdc4 	bl	8010380 <xTimerCreateTimerTask>
 800f7f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d116      	bne.n	800f82e <vTaskStartScheduler+0x8e>
	__asm volatile
 800f800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f804:	f383 8811 	msr	BASEPRI, r3
 800f808:	f3bf 8f6f 	isb	sy
 800f80c:	f3bf 8f4f 	dsb	sy
 800f810:	613b      	str	r3, [r7, #16]
}
 800f812:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f814:	4b12      	ldr	r3, [pc, #72]	; (800f860 <vTaskStartScheduler+0xc0>)
 800f816:	f04f 32ff 	mov.w	r2, #4294967295
 800f81a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f81c:	4b11      	ldr	r3, [pc, #68]	; (800f864 <vTaskStartScheduler+0xc4>)
 800f81e:	2201      	movs	r2, #1
 800f820:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f822:	4b11      	ldr	r3, [pc, #68]	; (800f868 <vTaskStartScheduler+0xc8>)
 800f824:	2200      	movs	r2, #0
 800f826:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f828:	f001 f9a2 	bl	8010b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f82c:	e00e      	b.n	800f84c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f834:	d10a      	bne.n	800f84c <vTaskStartScheduler+0xac>
	__asm volatile
 800f836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83a:	f383 8811 	msr	BASEPRI, r3
 800f83e:	f3bf 8f6f 	isb	sy
 800f842:	f3bf 8f4f 	dsb	sy
 800f846:	60fb      	str	r3, [r7, #12]
}
 800f848:	bf00      	nop
 800f84a:	e7fe      	b.n	800f84a <vTaskStartScheduler+0xaa>
}
 800f84c:	bf00      	nop
 800f84e:	3718      	adds	r7, #24
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	080120f8 	.word	0x080120f8
 800f858:	0800ffe5 	.word	0x0800ffe5
 800f85c:	20000da4 	.word	0x20000da4
 800f860:	20000da0 	.word	0x20000da0
 800f864:	20000d8c 	.word	0x20000d8c
 800f868:	20000d84 	.word	0x20000d84

0800f86c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f86c:	b480      	push	{r7}
 800f86e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f870:	4b04      	ldr	r3, [pc, #16]	; (800f884 <vTaskSuspendAll+0x18>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	3301      	adds	r3, #1
 800f876:	4a03      	ldr	r2, [pc, #12]	; (800f884 <vTaskSuspendAll+0x18>)
 800f878:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f87a:	bf00      	nop
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr
 800f884:	20000da8 	.word	0x20000da8

0800f888 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f88e:	2300      	movs	r3, #0
 800f890:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f892:	2300      	movs	r3, #0
 800f894:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f896:	4b42      	ldr	r3, [pc, #264]	; (800f9a0 <xTaskResumeAll+0x118>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d10a      	bne.n	800f8b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800f89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a2:	f383 8811 	msr	BASEPRI, r3
 800f8a6:	f3bf 8f6f 	isb	sy
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	603b      	str	r3, [r7, #0]
}
 800f8b0:	bf00      	nop
 800f8b2:	e7fe      	b.n	800f8b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f8b4:	f001 f9fe 	bl	8010cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f8b8:	4b39      	ldr	r3, [pc, #228]	; (800f9a0 <xTaskResumeAll+0x118>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	3b01      	subs	r3, #1
 800f8be:	4a38      	ldr	r2, [pc, #224]	; (800f9a0 <xTaskResumeAll+0x118>)
 800f8c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8c2:	4b37      	ldr	r3, [pc, #220]	; (800f9a0 <xTaskResumeAll+0x118>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d162      	bne.n	800f990 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f8ca:	4b36      	ldr	r3, [pc, #216]	; (800f9a4 <xTaskResumeAll+0x11c>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d05e      	beq.n	800f990 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f8d2:	e02f      	b.n	800f934 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8d4:	4b34      	ldr	r3, [pc, #208]	; (800f9a8 <xTaskResumeAll+0x120>)
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	3318      	adds	r3, #24
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fe ffb7 	bl	800e854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fe ffb2 	bl	800e854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f4:	4b2d      	ldr	r3, [pc, #180]	; (800f9ac <xTaskResumeAll+0x124>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d903      	bls.n	800f904 <xTaskResumeAll+0x7c>
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f900:	4a2a      	ldr	r2, [pc, #168]	; (800f9ac <xTaskResumeAll+0x124>)
 800f902:	6013      	str	r3, [r2, #0]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f908:	4613      	mov	r3, r2
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	4413      	add	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	4a27      	ldr	r2, [pc, #156]	; (800f9b0 <xTaskResumeAll+0x128>)
 800f912:	441a      	add	r2, r3
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	3304      	adds	r3, #4
 800f918:	4619      	mov	r1, r3
 800f91a:	4610      	mov	r0, r2
 800f91c:	f7fe ff3d 	bl	800e79a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f924:	4b23      	ldr	r3, [pc, #140]	; (800f9b4 <xTaskResumeAll+0x12c>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d302      	bcc.n	800f934 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f92e:	4b22      	ldr	r3, [pc, #136]	; (800f9b8 <xTaskResumeAll+0x130>)
 800f930:	2201      	movs	r2, #1
 800f932:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f934:	4b1c      	ldr	r3, [pc, #112]	; (800f9a8 <xTaskResumeAll+0x120>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1cb      	bne.n	800f8d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d001      	beq.n	800f946 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f942:	f000 fc05 	bl	8010150 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f946:	4b1d      	ldr	r3, [pc, #116]	; (800f9bc <xTaskResumeAll+0x134>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d010      	beq.n	800f974 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f952:	f000 f859 	bl	800fa08 <xTaskIncrementTick>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d002      	beq.n	800f962 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f95c:	4b16      	ldr	r3, [pc, #88]	; (800f9b8 <xTaskResumeAll+0x130>)
 800f95e:	2201      	movs	r2, #1
 800f960:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	3b01      	subs	r3, #1
 800f966:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d1f1      	bne.n	800f952 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f96e:	4b13      	ldr	r3, [pc, #76]	; (800f9bc <xTaskResumeAll+0x134>)
 800f970:	2200      	movs	r2, #0
 800f972:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f974:	4b10      	ldr	r3, [pc, #64]	; (800f9b8 <xTaskResumeAll+0x130>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d009      	beq.n	800f990 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f97c:	2301      	movs	r3, #1
 800f97e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f980:	4b0f      	ldr	r3, [pc, #60]	; (800f9c0 <xTaskResumeAll+0x138>)
 800f982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f986:	601a      	str	r2, [r3, #0]
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f990:	f001 f9c0 	bl	8010d14 <vPortExitCritical>

	return xAlreadyYielded;
 800f994:	68bb      	ldr	r3, [r7, #8]
}
 800f996:	4618      	mov	r0, r3
 800f998:	3710      	adds	r7, #16
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	20000da8 	.word	0x20000da8
 800f9a4:	20000d80 	.word	0x20000d80
 800f9a8:	20000d40 	.word	0x20000d40
 800f9ac:	20000d88 	.word	0x20000d88
 800f9b0:	200008b0 	.word	0x200008b0
 800f9b4:	200008ac 	.word	0x200008ac
 800f9b8:	20000d94 	.word	0x20000d94
 800f9bc:	20000d90 	.word	0x20000d90
 800f9c0:	e000ed04 	.word	0xe000ed04

0800f9c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f9ca:	4b05      	ldr	r3, [pc, #20]	; (800f9e0 <xTaskGetTickCount+0x1c>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f9d0:	687b      	ldr	r3, [r7, #4]
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	370c      	adds	r7, #12
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	20000d84 	.word	0x20000d84

0800f9e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f9ea:	f001 fa45 	bl	8010e78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f9f2:	4b04      	ldr	r3, [pc, #16]	; (800fa04 <xTaskGetTickCountFromISR+0x20>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f9f8:	683b      	ldr	r3, [r7, #0]
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	20000d84 	.word	0x20000d84

0800fa08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b086      	sub	sp, #24
 800fa0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa12:	4b4f      	ldr	r3, [pc, #316]	; (800fb50 <xTaskIncrementTick+0x148>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f040 808f 	bne.w	800fb3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fa1c:	4b4d      	ldr	r3, [pc, #308]	; (800fb54 <xTaskIncrementTick+0x14c>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	3301      	adds	r3, #1
 800fa22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fa24:	4a4b      	ldr	r2, [pc, #300]	; (800fb54 <xTaskIncrementTick+0x14c>)
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d120      	bne.n	800fa72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fa30:	4b49      	ldr	r3, [pc, #292]	; (800fb58 <xTaskIncrementTick+0x150>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00a      	beq.n	800fa50 <xTaskIncrementTick+0x48>
	__asm volatile
 800fa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa3e:	f383 8811 	msr	BASEPRI, r3
 800fa42:	f3bf 8f6f 	isb	sy
 800fa46:	f3bf 8f4f 	dsb	sy
 800fa4a:	603b      	str	r3, [r7, #0]
}
 800fa4c:	bf00      	nop
 800fa4e:	e7fe      	b.n	800fa4e <xTaskIncrementTick+0x46>
 800fa50:	4b41      	ldr	r3, [pc, #260]	; (800fb58 <xTaskIncrementTick+0x150>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	60fb      	str	r3, [r7, #12]
 800fa56:	4b41      	ldr	r3, [pc, #260]	; (800fb5c <xTaskIncrementTick+0x154>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a3f      	ldr	r2, [pc, #252]	; (800fb58 <xTaskIncrementTick+0x150>)
 800fa5c:	6013      	str	r3, [r2, #0]
 800fa5e:	4a3f      	ldr	r2, [pc, #252]	; (800fb5c <xTaskIncrementTick+0x154>)
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	6013      	str	r3, [r2, #0]
 800fa64:	4b3e      	ldr	r3, [pc, #248]	; (800fb60 <xTaskIncrementTick+0x158>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	3301      	adds	r3, #1
 800fa6a:	4a3d      	ldr	r2, [pc, #244]	; (800fb60 <xTaskIncrementTick+0x158>)
 800fa6c:	6013      	str	r3, [r2, #0]
 800fa6e:	f000 fb6f 	bl	8010150 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fa72:	4b3c      	ldr	r3, [pc, #240]	; (800fb64 <xTaskIncrementTick+0x15c>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	693a      	ldr	r2, [r7, #16]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d349      	bcc.n	800fb10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa7c:	4b36      	ldr	r3, [pc, #216]	; (800fb58 <xTaskIncrementTick+0x150>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d104      	bne.n	800fa90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa86:	4b37      	ldr	r3, [pc, #220]	; (800fb64 <xTaskIncrementTick+0x15c>)
 800fa88:	f04f 32ff 	mov.w	r2, #4294967295
 800fa8c:	601a      	str	r2, [r3, #0]
					break;
 800fa8e:	e03f      	b.n	800fb10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa90:	4b31      	ldr	r3, [pc, #196]	; (800fb58 <xTaskIncrementTick+0x150>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800faa0:	693a      	ldr	r2, [r7, #16]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d203      	bcs.n	800fab0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800faa8:	4a2e      	ldr	r2, [pc, #184]	; (800fb64 <xTaskIncrementTick+0x15c>)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800faae:	e02f      	b.n	800fb10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	3304      	adds	r3, #4
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7fe fecd 	bl	800e854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d004      	beq.n	800facc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	3318      	adds	r3, #24
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fe fec4 	bl	800e854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fad0:	4b25      	ldr	r3, [pc, #148]	; (800fb68 <xTaskIncrementTick+0x160>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d903      	bls.n	800fae0 <xTaskIncrementTick+0xd8>
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fadc:	4a22      	ldr	r2, [pc, #136]	; (800fb68 <xTaskIncrementTick+0x160>)
 800fade:	6013      	str	r3, [r2, #0]
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fae4:	4613      	mov	r3, r2
 800fae6:	009b      	lsls	r3, r3, #2
 800fae8:	4413      	add	r3, r2
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	4a1f      	ldr	r2, [pc, #124]	; (800fb6c <xTaskIncrementTick+0x164>)
 800faee:	441a      	add	r2, r3
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	3304      	adds	r3, #4
 800faf4:	4619      	mov	r1, r3
 800faf6:	4610      	mov	r0, r2
 800faf8:	f7fe fe4f 	bl	800e79a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb00:	4b1b      	ldr	r3, [pc, #108]	; (800fb70 <xTaskIncrementTick+0x168>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d3b8      	bcc.n	800fa7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb0e:	e7b5      	b.n	800fa7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fb10:	4b17      	ldr	r3, [pc, #92]	; (800fb70 <xTaskIncrementTick+0x168>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb16:	4915      	ldr	r1, [pc, #84]	; (800fb6c <xTaskIncrementTick+0x164>)
 800fb18:	4613      	mov	r3, r2
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	4413      	add	r3, r2
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	440b      	add	r3, r1
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d901      	bls.n	800fb2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fb28:	2301      	movs	r3, #1
 800fb2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fb2c:	4b11      	ldr	r3, [pc, #68]	; (800fb74 <xTaskIncrementTick+0x16c>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d007      	beq.n	800fb44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fb34:	2301      	movs	r3, #1
 800fb36:	617b      	str	r3, [r7, #20]
 800fb38:	e004      	b.n	800fb44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fb3a:	4b0f      	ldr	r3, [pc, #60]	; (800fb78 <xTaskIncrementTick+0x170>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	4a0d      	ldr	r2, [pc, #52]	; (800fb78 <xTaskIncrementTick+0x170>)
 800fb42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fb44:	697b      	ldr	r3, [r7, #20]
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3718      	adds	r7, #24
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	20000da8 	.word	0x20000da8
 800fb54:	20000d84 	.word	0x20000d84
 800fb58:	20000d38 	.word	0x20000d38
 800fb5c:	20000d3c 	.word	0x20000d3c
 800fb60:	20000d98 	.word	0x20000d98
 800fb64:	20000da0 	.word	0x20000da0
 800fb68:	20000d88 	.word	0x20000d88
 800fb6c:	200008b0 	.word	0x200008b0
 800fb70:	200008ac 	.word	0x200008ac
 800fb74:	20000d94 	.word	0x20000d94
 800fb78:	20000d90 	.word	0x20000d90

0800fb7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b085      	sub	sp, #20
 800fb80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fb82:	4b28      	ldr	r3, [pc, #160]	; (800fc24 <vTaskSwitchContext+0xa8>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d003      	beq.n	800fb92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fb8a:	4b27      	ldr	r3, [pc, #156]	; (800fc28 <vTaskSwitchContext+0xac>)
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fb90:	e041      	b.n	800fc16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800fb92:	4b25      	ldr	r3, [pc, #148]	; (800fc28 <vTaskSwitchContext+0xac>)
 800fb94:	2200      	movs	r2, #0
 800fb96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb98:	4b24      	ldr	r3, [pc, #144]	; (800fc2c <vTaskSwitchContext+0xb0>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	60fb      	str	r3, [r7, #12]
 800fb9e:	e010      	b.n	800fbc2 <vTaskSwitchContext+0x46>
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d10a      	bne.n	800fbbc <vTaskSwitchContext+0x40>
	__asm volatile
 800fba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbaa:	f383 8811 	msr	BASEPRI, r3
 800fbae:	f3bf 8f6f 	isb	sy
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	607b      	str	r3, [r7, #4]
}
 800fbb8:	bf00      	nop
 800fbba:	e7fe      	b.n	800fbba <vTaskSwitchContext+0x3e>
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	60fb      	str	r3, [r7, #12]
 800fbc2:	491b      	ldr	r1, [pc, #108]	; (800fc30 <vTaskSwitchContext+0xb4>)
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	4413      	add	r3, r2
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	440b      	add	r3, r1
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d0e4      	beq.n	800fba0 <vTaskSwitchContext+0x24>
 800fbd6:	68fa      	ldr	r2, [r7, #12]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	009b      	lsls	r3, r3, #2
 800fbdc:	4413      	add	r3, r2
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	4a13      	ldr	r2, [pc, #76]	; (800fc30 <vTaskSwitchContext+0xb4>)
 800fbe2:	4413      	add	r3, r2
 800fbe4:	60bb      	str	r3, [r7, #8]
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	685a      	ldr	r2, [r3, #4]
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	605a      	str	r2, [r3, #4]
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	685a      	ldr	r2, [r3, #4]
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	3308      	adds	r3, #8
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d104      	bne.n	800fc06 <vTaskSwitchContext+0x8a>
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	685a      	ldr	r2, [r3, #4]
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	605a      	str	r2, [r3, #4]
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	4a09      	ldr	r2, [pc, #36]	; (800fc34 <vTaskSwitchContext+0xb8>)
 800fc0e:	6013      	str	r3, [r2, #0]
 800fc10:	4a06      	ldr	r2, [pc, #24]	; (800fc2c <vTaskSwitchContext+0xb0>)
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	6013      	str	r3, [r2, #0]
}
 800fc16:	bf00      	nop
 800fc18:	3714      	adds	r7, #20
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr
 800fc22:	bf00      	nop
 800fc24:	20000da8 	.word	0x20000da8
 800fc28:	20000d94 	.word	0x20000d94
 800fc2c:	20000d88 	.word	0x20000d88
 800fc30:	200008b0 	.word	0x200008b0
 800fc34:	200008ac 	.word	0x200008ac

0800fc38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d10a      	bne.n	800fc5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4c:	f383 8811 	msr	BASEPRI, r3
 800fc50:	f3bf 8f6f 	isb	sy
 800fc54:	f3bf 8f4f 	dsb	sy
 800fc58:	60fb      	str	r3, [r7, #12]
}
 800fc5a:	bf00      	nop
 800fc5c:	e7fe      	b.n	800fc5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc5e:	4b07      	ldr	r3, [pc, #28]	; (800fc7c <vTaskPlaceOnEventList+0x44>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	3318      	adds	r3, #24
 800fc64:	4619      	mov	r1, r3
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f7fe fdbb 	bl	800e7e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fc6c:	2101      	movs	r1, #1
 800fc6e:	6838      	ldr	r0, [r7, #0]
 800fc70:	f000 fb32 	bl	80102d8 <prvAddCurrentTaskToDelayedList>
}
 800fc74:	bf00      	nop
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	200008ac 	.word	0x200008ac

0800fc80 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b086      	sub	sp, #24
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d10a      	bne.n	800fca8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800fc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc96:	f383 8811 	msr	BASEPRI, r3
 800fc9a:	f3bf 8f6f 	isb	sy
 800fc9e:	f3bf 8f4f 	dsb	sy
 800fca2:	617b      	str	r3, [r7, #20]
}
 800fca4:	bf00      	nop
 800fca6:	e7fe      	b.n	800fca6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800fca8:	4b11      	ldr	r3, [pc, #68]	; (800fcf0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d10a      	bne.n	800fcc6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800fcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb4:	f383 8811 	msr	BASEPRI, r3
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	613b      	str	r3, [r7, #16]
}
 800fcc2:	bf00      	nop
 800fcc4:	e7fe      	b.n	800fcc4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fcc6:	4b0b      	ldr	r3, [pc, #44]	; (800fcf4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	68ba      	ldr	r2, [r7, #8]
 800fccc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800fcd0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fcd2:	4b08      	ldr	r3, [pc, #32]	; (800fcf4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	3318      	adds	r3, #24
 800fcd8:	4619      	mov	r1, r3
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f7fe fd5d 	bl	800e79a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fce0:	2101      	movs	r1, #1
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 faf8 	bl	80102d8 <prvAddCurrentTaskToDelayedList>
}
 800fce8:	bf00      	nop
 800fcea:	3718      	adds	r7, #24
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	20000da8 	.word	0x20000da8
 800fcf4:	200008ac 	.word	0x200008ac

0800fcf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d10a      	bne.n	800fd20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0e:	f383 8811 	msr	BASEPRI, r3
 800fd12:	f3bf 8f6f 	isb	sy
 800fd16:	f3bf 8f4f 	dsb	sy
 800fd1a:	617b      	str	r3, [r7, #20]
}
 800fd1c:	bf00      	nop
 800fd1e:	e7fe      	b.n	800fd1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd20:	4b0a      	ldr	r3, [pc, #40]	; (800fd4c <vTaskPlaceOnEventListRestricted+0x54>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	3318      	adds	r3, #24
 800fd26:	4619      	mov	r1, r3
 800fd28:	68f8      	ldr	r0, [r7, #12]
 800fd2a:	f7fe fd36 	bl	800e79a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d002      	beq.n	800fd3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fd34:	f04f 33ff 	mov.w	r3, #4294967295
 800fd38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fd3a:	6879      	ldr	r1, [r7, #4]
 800fd3c:	68b8      	ldr	r0, [r7, #8]
 800fd3e:	f000 facb 	bl	80102d8 <prvAddCurrentTaskToDelayedList>
	}
 800fd42:	bf00      	nop
 800fd44:	3718      	adds	r7, #24
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	200008ac 	.word	0x200008ac

0800fd50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	68db      	ldr	r3, [r3, #12]
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d10a      	bne.n	800fd7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6a:	f383 8811 	msr	BASEPRI, r3
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	f3bf 8f4f 	dsb	sy
 800fd76:	60fb      	str	r3, [r7, #12]
}
 800fd78:	bf00      	nop
 800fd7a:	e7fe      	b.n	800fd7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	3318      	adds	r3, #24
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fe fd67 	bl	800e854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd86:	4b1e      	ldr	r3, [pc, #120]	; (800fe00 <xTaskRemoveFromEventList+0xb0>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d11d      	bne.n	800fdca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	3304      	adds	r3, #4
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fe fd5e 	bl	800e854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd9c:	4b19      	ldr	r3, [pc, #100]	; (800fe04 <xTaskRemoveFromEventList+0xb4>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d903      	bls.n	800fdac <xTaskRemoveFromEventList+0x5c>
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda8:	4a16      	ldr	r2, [pc, #88]	; (800fe04 <xTaskRemoveFromEventList+0xb4>)
 800fdaa:	6013      	str	r3, [r2, #0]
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdb0:	4613      	mov	r3, r2
 800fdb2:	009b      	lsls	r3, r3, #2
 800fdb4:	4413      	add	r3, r2
 800fdb6:	009b      	lsls	r3, r3, #2
 800fdb8:	4a13      	ldr	r2, [pc, #76]	; (800fe08 <xTaskRemoveFromEventList+0xb8>)
 800fdba:	441a      	add	r2, r3
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	3304      	adds	r3, #4
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	4610      	mov	r0, r2
 800fdc4:	f7fe fce9 	bl	800e79a <vListInsertEnd>
 800fdc8:	e005      	b.n	800fdd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	3318      	adds	r3, #24
 800fdce:	4619      	mov	r1, r3
 800fdd0:	480e      	ldr	r0, [pc, #56]	; (800fe0c <xTaskRemoveFromEventList+0xbc>)
 800fdd2:	f7fe fce2 	bl	800e79a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdda:	4b0d      	ldr	r3, [pc, #52]	; (800fe10 <xTaskRemoveFromEventList+0xc0>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d905      	bls.n	800fdf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fde4:	2301      	movs	r3, #1
 800fde6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fde8:	4b0a      	ldr	r3, [pc, #40]	; (800fe14 <xTaskRemoveFromEventList+0xc4>)
 800fdea:	2201      	movs	r2, #1
 800fdec:	601a      	str	r2, [r3, #0]
 800fdee:	e001      	b.n	800fdf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fdf4:	697b      	ldr	r3, [r7, #20]
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3718      	adds	r7, #24
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	bf00      	nop
 800fe00:	20000da8 	.word	0x20000da8
 800fe04:	20000d88 	.word	0x20000d88
 800fe08:	200008b0 	.word	0x200008b0
 800fe0c:	20000d40 	.word	0x20000d40
 800fe10:	200008ac 	.word	0x200008ac
 800fe14:	20000d94 	.word	0x20000d94

0800fe18 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b086      	sub	sp, #24
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800fe22:	4b29      	ldr	r3, [pc, #164]	; (800fec8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d10a      	bne.n	800fe40 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800fe2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2e:	f383 8811 	msr	BASEPRI, r3
 800fe32:	f3bf 8f6f 	isb	sy
 800fe36:	f3bf 8f4f 	dsb	sy
 800fe3a:	613b      	str	r3, [r7, #16]
}
 800fe3c:	bf00      	nop
 800fe3e:	e7fe      	b.n	800fe3e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10a      	bne.n	800fe6c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800fe56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5a:	f383 8811 	msr	BASEPRI, r3
 800fe5e:	f3bf 8f6f 	isb	sy
 800fe62:	f3bf 8f4f 	dsb	sy
 800fe66:	60fb      	str	r3, [r7, #12]
}
 800fe68:	bf00      	nop
 800fe6a:	e7fe      	b.n	800fe6a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7fe fcf1 	bl	800e854 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	3304      	adds	r3, #4
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fe fcec 	bl	800e854 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe80:	4b12      	ldr	r3, [pc, #72]	; (800fecc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d903      	bls.n	800fe90 <vTaskRemoveFromUnorderedEventList+0x78>
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe8c:	4a0f      	ldr	r2, [pc, #60]	; (800fecc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800fe8e:	6013      	str	r3, [r2, #0]
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe94:	4613      	mov	r3, r2
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	4413      	add	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	4a0c      	ldr	r2, [pc, #48]	; (800fed0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800fe9e:	441a      	add	r2, r3
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	3304      	adds	r3, #4
 800fea4:	4619      	mov	r1, r3
 800fea6:	4610      	mov	r0, r2
 800fea8:	f7fe fc77 	bl	800e79a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb0:	4b08      	ldr	r3, [pc, #32]	; (800fed4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d902      	bls.n	800fec0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800feba:	4b07      	ldr	r3, [pc, #28]	; (800fed8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800febc:	2201      	movs	r2, #1
 800febe:	601a      	str	r2, [r3, #0]
	}
}
 800fec0:	bf00      	nop
 800fec2:	3718      	adds	r7, #24
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	20000da8 	.word	0x20000da8
 800fecc:	20000d88 	.word	0x20000d88
 800fed0:	200008b0 	.word	0x200008b0
 800fed4:	200008ac 	.word	0x200008ac
 800fed8:	20000d94 	.word	0x20000d94

0800fedc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fee4:	4b06      	ldr	r3, [pc, #24]	; (800ff00 <vTaskInternalSetTimeOutState+0x24>)
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800feec:	4b05      	ldr	r3, [pc, #20]	; (800ff04 <vTaskInternalSetTimeOutState+0x28>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	605a      	str	r2, [r3, #4]
}
 800fef4:	bf00      	nop
 800fef6:	370c      	adds	r7, #12
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr
 800ff00:	20000d98 	.word	0x20000d98
 800ff04:	20000d84 	.word	0x20000d84

0800ff08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b088      	sub	sp, #32
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10a      	bne.n	800ff2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ff18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1c:	f383 8811 	msr	BASEPRI, r3
 800ff20:	f3bf 8f6f 	isb	sy
 800ff24:	f3bf 8f4f 	dsb	sy
 800ff28:	613b      	str	r3, [r7, #16]
}
 800ff2a:	bf00      	nop
 800ff2c:	e7fe      	b.n	800ff2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d10a      	bne.n	800ff4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ff34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff38:	f383 8811 	msr	BASEPRI, r3
 800ff3c:	f3bf 8f6f 	isb	sy
 800ff40:	f3bf 8f4f 	dsb	sy
 800ff44:	60fb      	str	r3, [r7, #12]
}
 800ff46:	bf00      	nop
 800ff48:	e7fe      	b.n	800ff48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ff4a:	f000 feb3 	bl	8010cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ff4e:	4b1d      	ldr	r3, [pc, #116]	; (800ffc4 <xTaskCheckForTimeOut+0xbc>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	69ba      	ldr	r2, [r7, #24]
 800ff5a:	1ad3      	subs	r3, r2, r3
 800ff5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff66:	d102      	bne.n	800ff6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	61fb      	str	r3, [r7, #28]
 800ff6c:	e023      	b.n	800ffb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681a      	ldr	r2, [r3, #0]
 800ff72:	4b15      	ldr	r3, [pc, #84]	; (800ffc8 <xTaskCheckForTimeOut+0xc0>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d007      	beq.n	800ff8a <xTaskCheckForTimeOut+0x82>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	69ba      	ldr	r2, [r7, #24]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d302      	bcc.n	800ff8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff84:	2301      	movs	r3, #1
 800ff86:	61fb      	str	r3, [r7, #28]
 800ff88:	e015      	b.n	800ffb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	697a      	ldr	r2, [r7, #20]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d20b      	bcs.n	800ffac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	1ad2      	subs	r2, r2, r3
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f7ff ff9b 	bl	800fedc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	61fb      	str	r3, [r7, #28]
 800ffaa:	e004      	b.n	800ffb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ffb6:	f000 fead 	bl	8010d14 <vPortExitCritical>

	return xReturn;
 800ffba:	69fb      	ldr	r3, [r7, #28]
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3720      	adds	r7, #32
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	20000d84 	.word	0x20000d84
 800ffc8:	20000d98 	.word	0x20000d98

0800ffcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ffcc:	b480      	push	{r7}
 800ffce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ffd0:	4b03      	ldr	r3, [pc, #12]	; (800ffe0 <vTaskMissedYield+0x14>)
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	601a      	str	r2, [r3, #0]
}
 800ffd6:	bf00      	nop
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr
 800ffe0:	20000d94 	.word	0x20000d94

0800ffe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ffec:	f000 f852 	bl	8010094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fff0:	4b06      	ldr	r3, [pc, #24]	; (801000c <prvIdleTask+0x28>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d9f9      	bls.n	800ffec <prvIdleTask+0x8>
			{
				taskYIELD();
 800fff8:	4b05      	ldr	r3, [pc, #20]	; (8010010 <prvIdleTask+0x2c>)
 800fffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fffe:	601a      	str	r2, [r3, #0]
 8010000:	f3bf 8f4f 	dsb	sy
 8010004:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010008:	e7f0      	b.n	800ffec <prvIdleTask+0x8>
 801000a:	bf00      	nop
 801000c:	200008b0 	.word	0x200008b0
 8010010:	e000ed04 	.word	0xe000ed04

08010014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801001a:	2300      	movs	r3, #0
 801001c:	607b      	str	r3, [r7, #4]
 801001e:	e00c      	b.n	801003a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	4613      	mov	r3, r2
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	4413      	add	r3, r2
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	4a12      	ldr	r2, [pc, #72]	; (8010074 <prvInitialiseTaskLists+0x60>)
 801002c:	4413      	add	r3, r2
 801002e:	4618      	mov	r0, r3
 8010030:	f7fe fb86 	bl	800e740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	3301      	adds	r3, #1
 8010038:	607b      	str	r3, [r7, #4]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2b37      	cmp	r3, #55	; 0x37
 801003e:	d9ef      	bls.n	8010020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010040:	480d      	ldr	r0, [pc, #52]	; (8010078 <prvInitialiseTaskLists+0x64>)
 8010042:	f7fe fb7d 	bl	800e740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010046:	480d      	ldr	r0, [pc, #52]	; (801007c <prvInitialiseTaskLists+0x68>)
 8010048:	f7fe fb7a 	bl	800e740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801004c:	480c      	ldr	r0, [pc, #48]	; (8010080 <prvInitialiseTaskLists+0x6c>)
 801004e:	f7fe fb77 	bl	800e740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010052:	480c      	ldr	r0, [pc, #48]	; (8010084 <prvInitialiseTaskLists+0x70>)
 8010054:	f7fe fb74 	bl	800e740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010058:	480b      	ldr	r0, [pc, #44]	; (8010088 <prvInitialiseTaskLists+0x74>)
 801005a:	f7fe fb71 	bl	800e740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801005e:	4b0b      	ldr	r3, [pc, #44]	; (801008c <prvInitialiseTaskLists+0x78>)
 8010060:	4a05      	ldr	r2, [pc, #20]	; (8010078 <prvInitialiseTaskLists+0x64>)
 8010062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010064:	4b0a      	ldr	r3, [pc, #40]	; (8010090 <prvInitialiseTaskLists+0x7c>)
 8010066:	4a05      	ldr	r2, [pc, #20]	; (801007c <prvInitialiseTaskLists+0x68>)
 8010068:	601a      	str	r2, [r3, #0]
}
 801006a:	bf00      	nop
 801006c:	3708      	adds	r7, #8
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}
 8010072:	bf00      	nop
 8010074:	200008b0 	.word	0x200008b0
 8010078:	20000d10 	.word	0x20000d10
 801007c:	20000d24 	.word	0x20000d24
 8010080:	20000d40 	.word	0x20000d40
 8010084:	20000d54 	.word	0x20000d54
 8010088:	20000d6c 	.word	0x20000d6c
 801008c:	20000d38 	.word	0x20000d38
 8010090:	20000d3c 	.word	0x20000d3c

08010094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801009a:	e019      	b.n	80100d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801009c:	f000 fe0a 	bl	8010cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100a0:	4b10      	ldr	r3, [pc, #64]	; (80100e4 <prvCheckTasksWaitingTermination+0x50>)
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	3304      	adds	r3, #4
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7fe fbd1 	bl	800e854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80100b2:	4b0d      	ldr	r3, [pc, #52]	; (80100e8 <prvCheckTasksWaitingTermination+0x54>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	3b01      	subs	r3, #1
 80100b8:	4a0b      	ldr	r2, [pc, #44]	; (80100e8 <prvCheckTasksWaitingTermination+0x54>)
 80100ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80100bc:	4b0b      	ldr	r3, [pc, #44]	; (80100ec <prvCheckTasksWaitingTermination+0x58>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	3b01      	subs	r3, #1
 80100c2:	4a0a      	ldr	r2, [pc, #40]	; (80100ec <prvCheckTasksWaitingTermination+0x58>)
 80100c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80100c6:	f000 fe25 	bl	8010d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f000 f810 	bl	80100f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100d0:	4b06      	ldr	r3, [pc, #24]	; (80100ec <prvCheckTasksWaitingTermination+0x58>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d1e1      	bne.n	801009c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80100d8:	bf00      	nop
 80100da:	bf00      	nop
 80100dc:	3708      	adds	r7, #8
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	bf00      	nop
 80100e4:	20000d54 	.word	0x20000d54
 80100e8:	20000d80 	.word	0x20000d80
 80100ec:	20000d68 	.word	0x20000d68

080100f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d108      	bne.n	8010114 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010106:	4618      	mov	r0, r3
 8010108:	f000 ffc2 	bl	8011090 <vPortFree>
				vPortFree( pxTCB );
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 ffbf 	bl	8011090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010112:	e018      	b.n	8010146 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801011a:	2b01      	cmp	r3, #1
 801011c:	d103      	bne.n	8010126 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f000 ffb6 	bl	8011090 <vPortFree>
	}
 8010124:	e00f      	b.n	8010146 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801012c:	2b02      	cmp	r3, #2
 801012e:	d00a      	beq.n	8010146 <prvDeleteTCB+0x56>
	__asm volatile
 8010130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010134:	f383 8811 	msr	BASEPRI, r3
 8010138:	f3bf 8f6f 	isb	sy
 801013c:	f3bf 8f4f 	dsb	sy
 8010140:	60fb      	str	r3, [r7, #12]
}
 8010142:	bf00      	nop
 8010144:	e7fe      	b.n	8010144 <prvDeleteTCB+0x54>
	}
 8010146:	bf00      	nop
 8010148:	3710      	adds	r7, #16
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
	...

08010150 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010150:	b480      	push	{r7}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010156:	4b0c      	ldr	r3, [pc, #48]	; (8010188 <prvResetNextTaskUnblockTime+0x38>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d104      	bne.n	801016a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010160:	4b0a      	ldr	r3, [pc, #40]	; (801018c <prvResetNextTaskUnblockTime+0x3c>)
 8010162:	f04f 32ff 	mov.w	r2, #4294967295
 8010166:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010168:	e008      	b.n	801017c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801016a:	4b07      	ldr	r3, [pc, #28]	; (8010188 <prvResetNextTaskUnblockTime+0x38>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	685b      	ldr	r3, [r3, #4]
 8010178:	4a04      	ldr	r2, [pc, #16]	; (801018c <prvResetNextTaskUnblockTime+0x3c>)
 801017a:	6013      	str	r3, [r2, #0]
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr
 8010188:	20000d38 	.word	0x20000d38
 801018c:	20000da0 	.word	0x20000da0

08010190 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010196:	4b0b      	ldr	r3, [pc, #44]	; (80101c4 <xTaskGetSchedulerState+0x34>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d102      	bne.n	80101a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801019e:	2301      	movs	r3, #1
 80101a0:	607b      	str	r3, [r7, #4]
 80101a2:	e008      	b.n	80101b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101a4:	4b08      	ldr	r3, [pc, #32]	; (80101c8 <xTaskGetSchedulerState+0x38>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d102      	bne.n	80101b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80101ac:	2302      	movs	r3, #2
 80101ae:	607b      	str	r3, [r7, #4]
 80101b0:	e001      	b.n	80101b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80101b2:	2300      	movs	r3, #0
 80101b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80101b6:	687b      	ldr	r3, [r7, #4]
	}
 80101b8:	4618      	mov	r0, r3
 80101ba:	370c      	adds	r7, #12
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr
 80101c4:	20000d8c 	.word	0x20000d8c
 80101c8:	20000da8 	.word	0x20000da8

080101cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80101d8:	2300      	movs	r3, #0
 80101da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d056      	beq.n	8010290 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80101e2:	4b2e      	ldr	r3, [pc, #184]	; (801029c <xTaskPriorityDisinherit+0xd0>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	693a      	ldr	r2, [r7, #16]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d00a      	beq.n	8010202 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80101ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f0:	f383 8811 	msr	BASEPRI, r3
 80101f4:	f3bf 8f6f 	isb	sy
 80101f8:	f3bf 8f4f 	dsb	sy
 80101fc:	60fb      	str	r3, [r7, #12]
}
 80101fe:	bf00      	nop
 8010200:	e7fe      	b.n	8010200 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010206:	2b00      	cmp	r3, #0
 8010208:	d10a      	bne.n	8010220 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801020a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	60bb      	str	r3, [r7, #8]
}
 801021c:	bf00      	nop
 801021e:	e7fe      	b.n	801021e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010224:	1e5a      	subs	r2, r3, #1
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010232:	429a      	cmp	r2, r3
 8010234:	d02c      	beq.n	8010290 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801023a:	2b00      	cmp	r3, #0
 801023c:	d128      	bne.n	8010290 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	3304      	adds	r3, #4
 8010242:	4618      	mov	r0, r3
 8010244:	f7fe fb06 	bl	800e854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010254:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010260:	4b0f      	ldr	r3, [pc, #60]	; (80102a0 <xTaskPriorityDisinherit+0xd4>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	429a      	cmp	r2, r3
 8010266:	d903      	bls.n	8010270 <xTaskPriorityDisinherit+0xa4>
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801026c:	4a0c      	ldr	r2, [pc, #48]	; (80102a0 <xTaskPriorityDisinherit+0xd4>)
 801026e:	6013      	str	r3, [r2, #0]
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010274:	4613      	mov	r3, r2
 8010276:	009b      	lsls	r3, r3, #2
 8010278:	4413      	add	r3, r2
 801027a:	009b      	lsls	r3, r3, #2
 801027c:	4a09      	ldr	r2, [pc, #36]	; (80102a4 <xTaskPriorityDisinherit+0xd8>)
 801027e:	441a      	add	r2, r3
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	3304      	adds	r3, #4
 8010284:	4619      	mov	r1, r3
 8010286:	4610      	mov	r0, r2
 8010288:	f7fe fa87 	bl	800e79a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801028c:	2301      	movs	r3, #1
 801028e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010290:	697b      	ldr	r3, [r7, #20]
	}
 8010292:	4618      	mov	r0, r3
 8010294:	3718      	adds	r7, #24
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	200008ac 	.word	0x200008ac
 80102a0:	20000d88 	.word	0x20000d88
 80102a4:	200008b0 	.word	0x200008b0

080102a8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80102ae:	4b09      	ldr	r3, [pc, #36]	; (80102d4 <uxTaskResetEventItemValue+0x2c>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	699b      	ldr	r3, [r3, #24]
 80102b4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102b6:	4b07      	ldr	r3, [pc, #28]	; (80102d4 <uxTaskResetEventItemValue+0x2c>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102bc:	4b05      	ldr	r3, [pc, #20]	; (80102d4 <uxTaskResetEventItemValue+0x2c>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80102c4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80102c6:	687b      	ldr	r3, [r7, #4]
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	370c      	adds	r7, #12
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr
 80102d4:	200008ac 	.word	0x200008ac

080102d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80102e2:	4b21      	ldr	r3, [pc, #132]	; (8010368 <prvAddCurrentTaskToDelayedList+0x90>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102e8:	4b20      	ldr	r3, [pc, #128]	; (801036c <prvAddCurrentTaskToDelayedList+0x94>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	3304      	adds	r3, #4
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fe fab0 	bl	800e854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102fa:	d10a      	bne.n	8010312 <prvAddCurrentTaskToDelayedList+0x3a>
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d007      	beq.n	8010312 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010302:	4b1a      	ldr	r3, [pc, #104]	; (801036c <prvAddCurrentTaskToDelayedList+0x94>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	3304      	adds	r3, #4
 8010308:	4619      	mov	r1, r3
 801030a:	4819      	ldr	r0, [pc, #100]	; (8010370 <prvAddCurrentTaskToDelayedList+0x98>)
 801030c:	f7fe fa45 	bl	800e79a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010310:	e026      	b.n	8010360 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010312:	68fa      	ldr	r2, [r7, #12]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4413      	add	r3, r2
 8010318:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801031a:	4b14      	ldr	r3, [pc, #80]	; (801036c <prvAddCurrentTaskToDelayedList+0x94>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010322:	68ba      	ldr	r2, [r7, #8]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	429a      	cmp	r2, r3
 8010328:	d209      	bcs.n	801033e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801032a:	4b12      	ldr	r3, [pc, #72]	; (8010374 <prvAddCurrentTaskToDelayedList+0x9c>)
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	4b0f      	ldr	r3, [pc, #60]	; (801036c <prvAddCurrentTaskToDelayedList+0x94>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	3304      	adds	r3, #4
 8010334:	4619      	mov	r1, r3
 8010336:	4610      	mov	r0, r2
 8010338:	f7fe fa53 	bl	800e7e2 <vListInsert>
}
 801033c:	e010      	b.n	8010360 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801033e:	4b0e      	ldr	r3, [pc, #56]	; (8010378 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	4b0a      	ldr	r3, [pc, #40]	; (801036c <prvAddCurrentTaskToDelayedList+0x94>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	3304      	adds	r3, #4
 8010348:	4619      	mov	r1, r3
 801034a:	4610      	mov	r0, r2
 801034c:	f7fe fa49 	bl	800e7e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010350:	4b0a      	ldr	r3, [pc, #40]	; (801037c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	429a      	cmp	r2, r3
 8010358:	d202      	bcs.n	8010360 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801035a:	4a08      	ldr	r2, [pc, #32]	; (801037c <prvAddCurrentTaskToDelayedList+0xa4>)
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	6013      	str	r3, [r2, #0]
}
 8010360:	bf00      	nop
 8010362:	3710      	adds	r7, #16
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}
 8010368:	20000d84 	.word	0x20000d84
 801036c:	200008ac 	.word	0x200008ac
 8010370:	20000d6c 	.word	0x20000d6c
 8010374:	20000d3c 	.word	0x20000d3c
 8010378:	20000d38 	.word	0x20000d38
 801037c:	20000da0 	.word	0x20000da0

08010380 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b08a      	sub	sp, #40	; 0x28
 8010384:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010386:	2300      	movs	r3, #0
 8010388:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801038a:	f000 fb07 	bl	801099c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801038e:	4b1c      	ldr	r3, [pc, #112]	; (8010400 <xTimerCreateTimerTask+0x80>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d021      	beq.n	80103da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801039a:	2300      	movs	r3, #0
 801039c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801039e:	1d3a      	adds	r2, r7, #4
 80103a0:	f107 0108 	add.w	r1, r7, #8
 80103a4:	f107 030c 	add.w	r3, r7, #12
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fd ff43 	bl	800e234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80103ae:	6879      	ldr	r1, [r7, #4]
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	9202      	str	r2, [sp, #8]
 80103b6:	9301      	str	r3, [sp, #4]
 80103b8:	2302      	movs	r3, #2
 80103ba:	9300      	str	r3, [sp, #0]
 80103bc:	2300      	movs	r3, #0
 80103be:	460a      	mov	r2, r1
 80103c0:	4910      	ldr	r1, [pc, #64]	; (8010404 <xTimerCreateTimerTask+0x84>)
 80103c2:	4811      	ldr	r0, [pc, #68]	; (8010408 <xTimerCreateTimerTask+0x88>)
 80103c4:	f7ff f816 	bl	800f3f4 <xTaskCreateStatic>
 80103c8:	4603      	mov	r3, r0
 80103ca:	4a10      	ldr	r2, [pc, #64]	; (801040c <xTimerCreateTimerTask+0x8c>)
 80103cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80103ce:	4b0f      	ldr	r3, [pc, #60]	; (801040c <xTimerCreateTimerTask+0x8c>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d001      	beq.n	80103da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80103d6:	2301      	movs	r3, #1
 80103d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d10a      	bne.n	80103f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80103e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e4:	f383 8811 	msr	BASEPRI, r3
 80103e8:	f3bf 8f6f 	isb	sy
 80103ec:	f3bf 8f4f 	dsb	sy
 80103f0:	613b      	str	r3, [r7, #16]
}
 80103f2:	bf00      	nop
 80103f4:	e7fe      	b.n	80103f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80103f6:	697b      	ldr	r3, [r7, #20]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3718      	adds	r7, #24
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	20000ddc 	.word	0x20000ddc
 8010404:	08012100 	.word	0x08012100
 8010408:	08010545 	.word	0x08010545
 801040c:	20000de0 	.word	0x20000de0

08010410 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b08a      	sub	sp, #40	; 0x28
 8010414:	af00      	add	r7, sp, #0
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	607a      	str	r2, [r7, #4]
 801041c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801041e:	2300      	movs	r3, #0
 8010420:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d10a      	bne.n	801043e <xTimerGenericCommand+0x2e>
	__asm volatile
 8010428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042c:	f383 8811 	msr	BASEPRI, r3
 8010430:	f3bf 8f6f 	isb	sy
 8010434:	f3bf 8f4f 	dsb	sy
 8010438:	623b      	str	r3, [r7, #32]
}
 801043a:	bf00      	nop
 801043c:	e7fe      	b.n	801043c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801043e:	4b1a      	ldr	r3, [pc, #104]	; (80104a8 <xTimerGenericCommand+0x98>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d02a      	beq.n	801049c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	2b05      	cmp	r3, #5
 8010456:	dc18      	bgt.n	801048a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010458:	f7ff fe9a 	bl	8010190 <xTaskGetSchedulerState>
 801045c:	4603      	mov	r3, r0
 801045e:	2b02      	cmp	r3, #2
 8010460:	d109      	bne.n	8010476 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010462:	4b11      	ldr	r3, [pc, #68]	; (80104a8 <xTimerGenericCommand+0x98>)
 8010464:	6818      	ldr	r0, [r3, #0]
 8010466:	f107 0110 	add.w	r1, r7, #16
 801046a:	2300      	movs	r3, #0
 801046c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801046e:	f7fe fb59 	bl	800eb24 <xQueueGenericSend>
 8010472:	6278      	str	r0, [r7, #36]	; 0x24
 8010474:	e012      	b.n	801049c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010476:	4b0c      	ldr	r3, [pc, #48]	; (80104a8 <xTimerGenericCommand+0x98>)
 8010478:	6818      	ldr	r0, [r3, #0]
 801047a:	f107 0110 	add.w	r1, r7, #16
 801047e:	2300      	movs	r3, #0
 8010480:	2200      	movs	r2, #0
 8010482:	f7fe fb4f 	bl	800eb24 <xQueueGenericSend>
 8010486:	6278      	str	r0, [r7, #36]	; 0x24
 8010488:	e008      	b.n	801049c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801048a:	4b07      	ldr	r3, [pc, #28]	; (80104a8 <xTimerGenericCommand+0x98>)
 801048c:	6818      	ldr	r0, [r3, #0]
 801048e:	f107 0110 	add.w	r1, r7, #16
 8010492:	2300      	movs	r3, #0
 8010494:	683a      	ldr	r2, [r7, #0]
 8010496:	f7fe fc43 	bl	800ed20 <xQueueGenericSendFromISR>
 801049a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3728      	adds	r7, #40	; 0x28
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	20000ddc 	.word	0x20000ddc

080104ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b088      	sub	sp, #32
 80104b0:	af02      	add	r7, sp, #8
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104b6:	4b22      	ldr	r3, [pc, #136]	; (8010540 <prvProcessExpiredTimer+0x94>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	3304      	adds	r3, #4
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7fe f9c5 	bl	800e854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104d0:	f003 0304 	and.w	r3, r3, #4
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d022      	beq.n	801051e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	699a      	ldr	r2, [r3, #24]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	18d1      	adds	r1, r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	683a      	ldr	r2, [r7, #0]
 80104e4:	6978      	ldr	r0, [r7, #20]
 80104e6:	f000 f8d1 	bl	801068c <prvInsertTimerInActiveList>
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d01f      	beq.n	8010530 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80104f0:	2300      	movs	r3, #0
 80104f2:	9300      	str	r3, [sp, #0]
 80104f4:	2300      	movs	r3, #0
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	2100      	movs	r1, #0
 80104fa:	6978      	ldr	r0, [r7, #20]
 80104fc:	f7ff ff88 	bl	8010410 <xTimerGenericCommand>
 8010500:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d113      	bne.n	8010530 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	60fb      	str	r3, [r7, #12]
}
 801051a:	bf00      	nop
 801051c:	e7fe      	b.n	801051c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010524:	f023 0301 	bic.w	r3, r3, #1
 8010528:	b2da      	uxtb	r2, r3
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	6a1b      	ldr	r3, [r3, #32]
 8010534:	6978      	ldr	r0, [r7, #20]
 8010536:	4798      	blx	r3
}
 8010538:	bf00      	nop
 801053a:	3718      	adds	r7, #24
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	20000dd4 	.word	0x20000dd4

08010544 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801054c:	f107 0308 	add.w	r3, r7, #8
 8010550:	4618      	mov	r0, r3
 8010552:	f000 f857 	bl	8010604 <prvGetNextExpireTime>
 8010556:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	4619      	mov	r1, r3
 801055c:	68f8      	ldr	r0, [r7, #12]
 801055e:	f000 f803 	bl	8010568 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010562:	f000 f8d5 	bl	8010710 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010566:	e7f1      	b.n	801054c <prvTimerTask+0x8>

08010568 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010572:	f7ff f97b 	bl	800f86c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010576:	f107 0308 	add.w	r3, r7, #8
 801057a:	4618      	mov	r0, r3
 801057c:	f000 f866 	bl	801064c <prvSampleTimeNow>
 8010580:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d130      	bne.n	80105ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d10a      	bne.n	80105a4 <prvProcessTimerOrBlockTask+0x3c>
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	429a      	cmp	r2, r3
 8010594:	d806      	bhi.n	80105a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010596:	f7ff f977 	bl	800f888 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801059a:	68f9      	ldr	r1, [r7, #12]
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f7ff ff85 	bl	80104ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80105a2:	e024      	b.n	80105ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d008      	beq.n	80105bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80105aa:	4b13      	ldr	r3, [pc, #76]	; (80105f8 <prvProcessTimerOrBlockTask+0x90>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d101      	bne.n	80105b8 <prvProcessTimerOrBlockTask+0x50>
 80105b4:	2301      	movs	r3, #1
 80105b6:	e000      	b.n	80105ba <prvProcessTimerOrBlockTask+0x52>
 80105b8:	2300      	movs	r3, #0
 80105ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80105bc:	4b0f      	ldr	r3, [pc, #60]	; (80105fc <prvProcessTimerOrBlockTask+0x94>)
 80105be:	6818      	ldr	r0, [r3, #0]
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	683a      	ldr	r2, [r7, #0]
 80105c8:	4619      	mov	r1, r3
 80105ca:	f7fe fedf 	bl	800f38c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80105ce:	f7ff f95b 	bl	800f888 <xTaskResumeAll>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d10a      	bne.n	80105ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80105d8:	4b09      	ldr	r3, [pc, #36]	; (8010600 <prvProcessTimerOrBlockTask+0x98>)
 80105da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105de:	601a      	str	r2, [r3, #0]
 80105e0:	f3bf 8f4f 	dsb	sy
 80105e4:	f3bf 8f6f 	isb	sy
}
 80105e8:	e001      	b.n	80105ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80105ea:	f7ff f94d 	bl	800f888 <xTaskResumeAll>
}
 80105ee:	bf00      	nop
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	20000dd8 	.word	0x20000dd8
 80105fc:	20000ddc 	.word	0x20000ddc
 8010600:	e000ed04 	.word	0xe000ed04

08010604 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010604:	b480      	push	{r7}
 8010606:	b085      	sub	sp, #20
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801060c:	4b0e      	ldr	r3, [pc, #56]	; (8010648 <prvGetNextExpireTime+0x44>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d101      	bne.n	801061a <prvGetNextExpireTime+0x16>
 8010616:	2201      	movs	r2, #1
 8010618:	e000      	b.n	801061c <prvGetNextExpireTime+0x18>
 801061a:	2200      	movs	r2, #0
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d105      	bne.n	8010634 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010628:	4b07      	ldr	r3, [pc, #28]	; (8010648 <prvGetNextExpireTime+0x44>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	60fb      	str	r3, [r7, #12]
 8010632:	e001      	b.n	8010638 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010634:	2300      	movs	r3, #0
 8010636:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010638:	68fb      	ldr	r3, [r7, #12]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3714      	adds	r7, #20
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	20000dd4 	.word	0x20000dd4

0801064c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010654:	f7ff f9b6 	bl	800f9c4 <xTaskGetTickCount>
 8010658:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801065a:	4b0b      	ldr	r3, [pc, #44]	; (8010688 <prvSampleTimeNow+0x3c>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	68fa      	ldr	r2, [r7, #12]
 8010660:	429a      	cmp	r2, r3
 8010662:	d205      	bcs.n	8010670 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010664:	f000 f936 	bl	80108d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2201      	movs	r2, #1
 801066c:	601a      	str	r2, [r3, #0]
 801066e:	e002      	b.n	8010676 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010676:	4a04      	ldr	r2, [pc, #16]	; (8010688 <prvSampleTimeNow+0x3c>)
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801067c:	68fb      	ldr	r3, [r7, #12]
}
 801067e:	4618      	mov	r0, r3
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	20000de4 	.word	0x20000de4

0801068c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b086      	sub	sp, #24
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
 8010698:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801069a:	2300      	movs	r3, #0
 801069c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	68ba      	ldr	r2, [r7, #8]
 80106a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d812      	bhi.n	80106d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106b2:	687a      	ldr	r2, [r7, #4]
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	1ad2      	subs	r2, r2, r3
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	699b      	ldr	r3, [r3, #24]
 80106bc:	429a      	cmp	r2, r3
 80106be:	d302      	bcc.n	80106c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80106c0:	2301      	movs	r3, #1
 80106c2:	617b      	str	r3, [r7, #20]
 80106c4:	e01b      	b.n	80106fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80106c6:	4b10      	ldr	r3, [pc, #64]	; (8010708 <prvInsertTimerInActiveList+0x7c>)
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	3304      	adds	r3, #4
 80106ce:	4619      	mov	r1, r3
 80106d0:	4610      	mov	r0, r2
 80106d2:	f7fe f886 	bl	800e7e2 <vListInsert>
 80106d6:	e012      	b.n	80106fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d206      	bcs.n	80106ee <prvInsertTimerInActiveList+0x62>
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d302      	bcc.n	80106ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80106e8:	2301      	movs	r3, #1
 80106ea:	617b      	str	r3, [r7, #20]
 80106ec:	e007      	b.n	80106fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80106ee:	4b07      	ldr	r3, [pc, #28]	; (801070c <prvInsertTimerInActiveList+0x80>)
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	3304      	adds	r3, #4
 80106f6:	4619      	mov	r1, r3
 80106f8:	4610      	mov	r0, r2
 80106fa:	f7fe f872 	bl	800e7e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80106fe:	697b      	ldr	r3, [r7, #20]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3718      	adds	r7, #24
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	20000dd8 	.word	0x20000dd8
 801070c:	20000dd4 	.word	0x20000dd4

08010710 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b08e      	sub	sp, #56	; 0x38
 8010714:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010716:	e0ca      	b.n	80108ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	da18      	bge.n	8010750 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801071e:	1d3b      	adds	r3, r7, #4
 8010720:	3304      	adds	r3, #4
 8010722:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010726:	2b00      	cmp	r3, #0
 8010728:	d10a      	bne.n	8010740 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801072a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072e:	f383 8811 	msr	BASEPRI, r3
 8010732:	f3bf 8f6f 	isb	sy
 8010736:	f3bf 8f4f 	dsb	sy
 801073a:	61fb      	str	r3, [r7, #28]
}
 801073c:	bf00      	nop
 801073e:	e7fe      	b.n	801073e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010746:	6850      	ldr	r0, [r2, #4]
 8010748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801074a:	6892      	ldr	r2, [r2, #8]
 801074c:	4611      	mov	r1, r2
 801074e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	f2c0 80aa 	blt.w	80108ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075e:	695b      	ldr	r3, [r3, #20]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d004      	beq.n	801076e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010766:	3304      	adds	r3, #4
 8010768:	4618      	mov	r0, r3
 801076a:	f7fe f873 	bl	800e854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801076e:	463b      	mov	r3, r7
 8010770:	4618      	mov	r0, r3
 8010772:	f7ff ff6b 	bl	801064c <prvSampleTimeNow>
 8010776:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2b09      	cmp	r3, #9
 801077c:	f200 8097 	bhi.w	80108ae <prvProcessReceivedCommands+0x19e>
 8010780:	a201      	add	r2, pc, #4	; (adr r2, 8010788 <prvProcessReceivedCommands+0x78>)
 8010782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010786:	bf00      	nop
 8010788:	080107b1 	.word	0x080107b1
 801078c:	080107b1 	.word	0x080107b1
 8010790:	080107b1 	.word	0x080107b1
 8010794:	08010825 	.word	0x08010825
 8010798:	08010839 	.word	0x08010839
 801079c:	08010883 	.word	0x08010883
 80107a0:	080107b1 	.word	0x080107b1
 80107a4:	080107b1 	.word	0x080107b1
 80107a8:	08010825 	.word	0x08010825
 80107ac:	08010839 	.word	0x08010839
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80107b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107b6:	f043 0301 	orr.w	r3, r3, #1
 80107ba:	b2da      	uxtb	r2, r3
 80107bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80107c2:	68ba      	ldr	r2, [r7, #8]
 80107c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c6:	699b      	ldr	r3, [r3, #24]
 80107c8:	18d1      	adds	r1, r2, r3
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107d0:	f7ff ff5c 	bl	801068c <prvInsertTimerInActiveList>
 80107d4:	4603      	mov	r3, r0
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d069      	beq.n	80108ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107dc:	6a1b      	ldr	r3, [r3, #32]
 80107de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107e8:	f003 0304 	and.w	r3, r3, #4
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d05e      	beq.n	80108ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80107f0:	68ba      	ldr	r2, [r7, #8]
 80107f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f4:	699b      	ldr	r3, [r3, #24]
 80107f6:	441a      	add	r2, r3
 80107f8:	2300      	movs	r3, #0
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	2300      	movs	r3, #0
 80107fe:	2100      	movs	r1, #0
 8010800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010802:	f7ff fe05 	bl	8010410 <xTimerGenericCommand>
 8010806:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010808:	6a3b      	ldr	r3, [r7, #32]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d14f      	bne.n	80108ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801080e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010812:	f383 8811 	msr	BASEPRI, r3
 8010816:	f3bf 8f6f 	isb	sy
 801081a:	f3bf 8f4f 	dsb	sy
 801081e:	61bb      	str	r3, [r7, #24]
}
 8010820:	bf00      	nop
 8010822:	e7fe      	b.n	8010822 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801082a:	f023 0301 	bic.w	r3, r3, #1
 801082e:	b2da      	uxtb	r2, r3
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010836:	e03a      	b.n	80108ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801083e:	f043 0301 	orr.w	r3, r3, #1
 8010842:	b2da      	uxtb	r2, r3
 8010844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801084a:	68ba      	ldr	r2, [r7, #8]
 801084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010852:	699b      	ldr	r3, [r3, #24]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d10a      	bne.n	801086e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801085c:	f383 8811 	msr	BASEPRI, r3
 8010860:	f3bf 8f6f 	isb	sy
 8010864:	f3bf 8f4f 	dsb	sy
 8010868:	617b      	str	r3, [r7, #20]
}
 801086a:	bf00      	nop
 801086c:	e7fe      	b.n	801086c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801086e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010870:	699a      	ldr	r2, [r3, #24]
 8010872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010874:	18d1      	adds	r1, r2, r3
 8010876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801087a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801087c:	f7ff ff06 	bl	801068c <prvInsertTimerInActiveList>
					break;
 8010880:	e015      	b.n	80108ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010888:	f003 0302 	and.w	r3, r3, #2
 801088c:	2b00      	cmp	r3, #0
 801088e:	d103      	bne.n	8010898 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010892:	f000 fbfd 	bl	8011090 <vPortFree>
 8010896:	e00a      	b.n	80108ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801089e:	f023 0301 	bic.w	r3, r3, #1
 80108a2:	b2da      	uxtb	r2, r3
 80108a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80108aa:	e000      	b.n	80108ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80108ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80108ae:	4b08      	ldr	r3, [pc, #32]	; (80108d0 <prvProcessReceivedCommands+0x1c0>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	1d39      	adds	r1, r7, #4
 80108b4:	2200      	movs	r2, #0
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fe face 	bl	800ee58 <xQueueReceive>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f47f af2a 	bne.w	8010718 <prvProcessReceivedCommands+0x8>
	}
}
 80108c4:	bf00      	nop
 80108c6:	bf00      	nop
 80108c8:	3730      	adds	r7, #48	; 0x30
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	20000ddc 	.word	0x20000ddc

080108d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b088      	sub	sp, #32
 80108d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80108da:	e048      	b.n	801096e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80108dc:	4b2d      	ldr	r3, [pc, #180]	; (8010994 <prvSwitchTimerLists+0xc0>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	68db      	ldr	r3, [r3, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108e6:	4b2b      	ldr	r3, [pc, #172]	; (8010994 <prvSwitchTimerLists+0xc0>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	68db      	ldr	r3, [r3, #12]
 80108ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	3304      	adds	r3, #4
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7fd ffad 	bl	800e854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6a1b      	ldr	r3, [r3, #32]
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010908:	f003 0304 	and.w	r3, r3, #4
 801090c:	2b00      	cmp	r3, #0
 801090e:	d02e      	beq.n	801096e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	699b      	ldr	r3, [r3, #24]
 8010914:	693a      	ldr	r2, [r7, #16]
 8010916:	4413      	add	r3, r2
 8010918:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801091a:	68ba      	ldr	r2, [r7, #8]
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	429a      	cmp	r2, r3
 8010920:	d90e      	bls.n	8010940 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	68ba      	ldr	r2, [r7, #8]
 8010926:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801092e:	4b19      	ldr	r3, [pc, #100]	; (8010994 <prvSwitchTimerLists+0xc0>)
 8010930:	681a      	ldr	r2, [r3, #0]
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	3304      	adds	r3, #4
 8010936:	4619      	mov	r1, r3
 8010938:	4610      	mov	r0, r2
 801093a:	f7fd ff52 	bl	800e7e2 <vListInsert>
 801093e:	e016      	b.n	801096e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010940:	2300      	movs	r3, #0
 8010942:	9300      	str	r3, [sp, #0]
 8010944:	2300      	movs	r3, #0
 8010946:	693a      	ldr	r2, [r7, #16]
 8010948:	2100      	movs	r1, #0
 801094a:	68f8      	ldr	r0, [r7, #12]
 801094c:	f7ff fd60 	bl	8010410 <xTimerGenericCommand>
 8010950:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d10a      	bne.n	801096e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095c:	f383 8811 	msr	BASEPRI, r3
 8010960:	f3bf 8f6f 	isb	sy
 8010964:	f3bf 8f4f 	dsb	sy
 8010968:	603b      	str	r3, [r7, #0]
}
 801096a:	bf00      	nop
 801096c:	e7fe      	b.n	801096c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801096e:	4b09      	ldr	r3, [pc, #36]	; (8010994 <prvSwitchTimerLists+0xc0>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d1b1      	bne.n	80108dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010978:	4b06      	ldr	r3, [pc, #24]	; (8010994 <prvSwitchTimerLists+0xc0>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801097e:	4b06      	ldr	r3, [pc, #24]	; (8010998 <prvSwitchTimerLists+0xc4>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	4a04      	ldr	r2, [pc, #16]	; (8010994 <prvSwitchTimerLists+0xc0>)
 8010984:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010986:	4a04      	ldr	r2, [pc, #16]	; (8010998 <prvSwitchTimerLists+0xc4>)
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	6013      	str	r3, [r2, #0]
}
 801098c:	bf00      	nop
 801098e:	3718      	adds	r7, #24
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	20000dd4 	.word	0x20000dd4
 8010998:	20000dd8 	.word	0x20000dd8

0801099c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80109a2:	f000 f987 	bl	8010cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80109a6:	4b15      	ldr	r3, [pc, #84]	; (80109fc <prvCheckForValidListAndQueue+0x60>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d120      	bne.n	80109f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80109ae:	4814      	ldr	r0, [pc, #80]	; (8010a00 <prvCheckForValidListAndQueue+0x64>)
 80109b0:	f7fd fec6 	bl	800e740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80109b4:	4813      	ldr	r0, [pc, #76]	; (8010a04 <prvCheckForValidListAndQueue+0x68>)
 80109b6:	f7fd fec3 	bl	800e740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80109ba:	4b13      	ldr	r3, [pc, #76]	; (8010a08 <prvCheckForValidListAndQueue+0x6c>)
 80109bc:	4a10      	ldr	r2, [pc, #64]	; (8010a00 <prvCheckForValidListAndQueue+0x64>)
 80109be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80109c0:	4b12      	ldr	r3, [pc, #72]	; (8010a0c <prvCheckForValidListAndQueue+0x70>)
 80109c2:	4a10      	ldr	r2, [pc, #64]	; (8010a04 <prvCheckForValidListAndQueue+0x68>)
 80109c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80109c6:	2300      	movs	r3, #0
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	4b11      	ldr	r3, [pc, #68]	; (8010a10 <prvCheckForValidListAndQueue+0x74>)
 80109cc:	4a11      	ldr	r2, [pc, #68]	; (8010a14 <prvCheckForValidListAndQueue+0x78>)
 80109ce:	2110      	movs	r1, #16
 80109d0:	200a      	movs	r0, #10
 80109d2:	f7fd ffd1 	bl	800e978 <xQueueGenericCreateStatic>
 80109d6:	4603      	mov	r3, r0
 80109d8:	4a08      	ldr	r2, [pc, #32]	; (80109fc <prvCheckForValidListAndQueue+0x60>)
 80109da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80109dc:	4b07      	ldr	r3, [pc, #28]	; (80109fc <prvCheckForValidListAndQueue+0x60>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d005      	beq.n	80109f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80109e4:	4b05      	ldr	r3, [pc, #20]	; (80109fc <prvCheckForValidListAndQueue+0x60>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	490b      	ldr	r1, [pc, #44]	; (8010a18 <prvCheckForValidListAndQueue+0x7c>)
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fe fca4 	bl	800f338 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80109f0:	f000 f990 	bl	8010d14 <vPortExitCritical>
}
 80109f4:	bf00      	nop
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
 80109fa:	bf00      	nop
 80109fc:	20000ddc 	.word	0x20000ddc
 8010a00:	20000dac 	.word	0x20000dac
 8010a04:	20000dc0 	.word	0x20000dc0
 8010a08:	20000dd4 	.word	0x20000dd4
 8010a0c:	20000dd8 	.word	0x20000dd8
 8010a10:	20000e88 	.word	0x20000e88
 8010a14:	20000de8 	.word	0x20000de8
 8010a18:	08012108 	.word	0x08012108

08010a1c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b08a      	sub	sp, #40	; 0x28
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
 8010a28:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010a2a:	f06f 0301 	mvn.w	r3, #1
 8010a2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a3c:	4b06      	ldr	r3, [pc, #24]	; (8010a58 <xTimerPendFunctionCallFromISR+0x3c>)
 8010a3e:	6818      	ldr	r0, [r3, #0]
 8010a40:	f107 0114 	add.w	r1, r7, #20
 8010a44:	2300      	movs	r3, #0
 8010a46:	683a      	ldr	r2, [r7, #0]
 8010a48:	f7fe f96a 	bl	800ed20 <xQueueGenericSendFromISR>
 8010a4c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3728      	adds	r7, #40	; 0x28
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	20000ddc 	.word	0x20000ddc

08010a5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b085      	sub	sp, #20
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	3b04      	subs	r3, #4
 8010a6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	3b04      	subs	r3, #4
 8010a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	f023 0201 	bic.w	r2, r3, #1
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	3b04      	subs	r3, #4
 8010a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010a8c:	4a0c      	ldr	r2, [pc, #48]	; (8010ac0 <pxPortInitialiseStack+0x64>)
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	3b14      	subs	r3, #20
 8010a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	3b04      	subs	r3, #4
 8010aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f06f 0202 	mvn.w	r2, #2
 8010aaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	3b20      	subs	r3, #32
 8010ab0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3714      	adds	r7, #20
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr
 8010ac0:	08010ac5 	.word	0x08010ac5

08010ac4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010aca:	2300      	movs	r3, #0
 8010acc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010ace:	4b12      	ldr	r3, [pc, #72]	; (8010b18 <prvTaskExitError+0x54>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ad6:	d00a      	beq.n	8010aee <prvTaskExitError+0x2a>
	__asm volatile
 8010ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010adc:	f383 8811 	msr	BASEPRI, r3
 8010ae0:	f3bf 8f6f 	isb	sy
 8010ae4:	f3bf 8f4f 	dsb	sy
 8010ae8:	60fb      	str	r3, [r7, #12]
}
 8010aea:	bf00      	nop
 8010aec:	e7fe      	b.n	8010aec <prvTaskExitError+0x28>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	60bb      	str	r3, [r7, #8]
}
 8010b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b02:	bf00      	nop
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d0fc      	beq.n	8010b04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b0a:	bf00      	nop
 8010b0c:	bf00      	nop
 8010b0e:	3714      	adds	r7, #20
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr
 8010b18:	2000011c 	.word	0x2000011c
 8010b1c:	00000000 	.word	0x00000000

08010b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010b20:	4b07      	ldr	r3, [pc, #28]	; (8010b40 <pxCurrentTCBConst2>)
 8010b22:	6819      	ldr	r1, [r3, #0]
 8010b24:	6808      	ldr	r0, [r1, #0]
 8010b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b2a:	f380 8809 	msr	PSP, r0
 8010b2e:	f3bf 8f6f 	isb	sy
 8010b32:	f04f 0000 	mov.w	r0, #0
 8010b36:	f380 8811 	msr	BASEPRI, r0
 8010b3a:	4770      	bx	lr
 8010b3c:	f3af 8000 	nop.w

08010b40 <pxCurrentTCBConst2>:
 8010b40:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010b44:	bf00      	nop
 8010b46:	bf00      	nop

08010b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010b48:	4808      	ldr	r0, [pc, #32]	; (8010b6c <prvPortStartFirstTask+0x24>)
 8010b4a:	6800      	ldr	r0, [r0, #0]
 8010b4c:	6800      	ldr	r0, [r0, #0]
 8010b4e:	f380 8808 	msr	MSP, r0
 8010b52:	f04f 0000 	mov.w	r0, #0
 8010b56:	f380 8814 	msr	CONTROL, r0
 8010b5a:	b662      	cpsie	i
 8010b5c:	b661      	cpsie	f
 8010b5e:	f3bf 8f4f 	dsb	sy
 8010b62:	f3bf 8f6f 	isb	sy
 8010b66:	df00      	svc	0
 8010b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010b6a:	bf00      	nop
 8010b6c:	e000ed08 	.word	0xe000ed08

08010b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b086      	sub	sp, #24
 8010b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010b76:	4b46      	ldr	r3, [pc, #280]	; (8010c90 <xPortStartScheduler+0x120>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	4a46      	ldr	r2, [pc, #280]	; (8010c94 <xPortStartScheduler+0x124>)
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d10a      	bne.n	8010b96 <xPortStartScheduler+0x26>
	__asm volatile
 8010b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b84:	f383 8811 	msr	BASEPRI, r3
 8010b88:	f3bf 8f6f 	isb	sy
 8010b8c:	f3bf 8f4f 	dsb	sy
 8010b90:	613b      	str	r3, [r7, #16]
}
 8010b92:	bf00      	nop
 8010b94:	e7fe      	b.n	8010b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010b96:	4b3e      	ldr	r3, [pc, #248]	; (8010c90 <xPortStartScheduler+0x120>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a3f      	ldr	r2, [pc, #252]	; (8010c98 <xPortStartScheduler+0x128>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d10a      	bne.n	8010bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8010ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba4:	f383 8811 	msr	BASEPRI, r3
 8010ba8:	f3bf 8f6f 	isb	sy
 8010bac:	f3bf 8f4f 	dsb	sy
 8010bb0:	60fb      	str	r3, [r7, #12]
}
 8010bb2:	bf00      	nop
 8010bb4:	e7fe      	b.n	8010bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010bb6:	4b39      	ldr	r3, [pc, #228]	; (8010c9c <xPortStartScheduler+0x12c>)
 8010bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	22ff      	movs	r2, #255	; 0xff
 8010bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010bd0:	78fb      	ldrb	r3, [r7, #3]
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010bd8:	b2da      	uxtb	r2, r3
 8010bda:	4b31      	ldr	r3, [pc, #196]	; (8010ca0 <xPortStartScheduler+0x130>)
 8010bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010bde:	4b31      	ldr	r3, [pc, #196]	; (8010ca4 <xPortStartScheduler+0x134>)
 8010be0:	2207      	movs	r2, #7
 8010be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010be4:	e009      	b.n	8010bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010be6:	4b2f      	ldr	r3, [pc, #188]	; (8010ca4 <xPortStartScheduler+0x134>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	3b01      	subs	r3, #1
 8010bec:	4a2d      	ldr	r2, [pc, #180]	; (8010ca4 <xPortStartScheduler+0x134>)
 8010bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010bf0:	78fb      	ldrb	r3, [r7, #3]
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	005b      	lsls	r3, r3, #1
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010bfa:	78fb      	ldrb	r3, [r7, #3]
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c02:	2b80      	cmp	r3, #128	; 0x80
 8010c04:	d0ef      	beq.n	8010be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c06:	4b27      	ldr	r3, [pc, #156]	; (8010ca4 <xPortStartScheduler+0x134>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f1c3 0307 	rsb	r3, r3, #7
 8010c0e:	2b04      	cmp	r3, #4
 8010c10:	d00a      	beq.n	8010c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8010c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c16:	f383 8811 	msr	BASEPRI, r3
 8010c1a:	f3bf 8f6f 	isb	sy
 8010c1e:	f3bf 8f4f 	dsb	sy
 8010c22:	60bb      	str	r3, [r7, #8]
}
 8010c24:	bf00      	nop
 8010c26:	e7fe      	b.n	8010c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010c28:	4b1e      	ldr	r3, [pc, #120]	; (8010ca4 <xPortStartScheduler+0x134>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	021b      	lsls	r3, r3, #8
 8010c2e:	4a1d      	ldr	r2, [pc, #116]	; (8010ca4 <xPortStartScheduler+0x134>)
 8010c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010c32:	4b1c      	ldr	r3, [pc, #112]	; (8010ca4 <xPortStartScheduler+0x134>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010c3a:	4a1a      	ldr	r2, [pc, #104]	; (8010ca4 <xPortStartScheduler+0x134>)
 8010c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	b2da      	uxtb	r2, r3
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c46:	4b18      	ldr	r3, [pc, #96]	; (8010ca8 <xPortStartScheduler+0x138>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4a17      	ldr	r2, [pc, #92]	; (8010ca8 <xPortStartScheduler+0x138>)
 8010c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010c52:	4b15      	ldr	r3, [pc, #84]	; (8010ca8 <xPortStartScheduler+0x138>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	4a14      	ldr	r2, [pc, #80]	; (8010ca8 <xPortStartScheduler+0x138>)
 8010c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010c5e:	f000 f8dd 	bl	8010e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010c62:	4b12      	ldr	r3, [pc, #72]	; (8010cac <xPortStartScheduler+0x13c>)
 8010c64:	2200      	movs	r2, #0
 8010c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010c68:	f000 f8fc 	bl	8010e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010c6c:	4b10      	ldr	r3, [pc, #64]	; (8010cb0 <xPortStartScheduler+0x140>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a0f      	ldr	r2, [pc, #60]	; (8010cb0 <xPortStartScheduler+0x140>)
 8010c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010c78:	f7ff ff66 	bl	8010b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010c7c:	f7fe ff7e 	bl	800fb7c <vTaskSwitchContext>
	prvTaskExitError();
 8010c80:	f7ff ff20 	bl	8010ac4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010c84:	2300      	movs	r3, #0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3718      	adds	r7, #24
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	e000ed00 	.word	0xe000ed00
 8010c94:	410fc271 	.word	0x410fc271
 8010c98:	410fc270 	.word	0x410fc270
 8010c9c:	e000e400 	.word	0xe000e400
 8010ca0:	20000ed8 	.word	0x20000ed8
 8010ca4:	20000edc 	.word	0x20000edc
 8010ca8:	e000ed20 	.word	0xe000ed20
 8010cac:	2000011c 	.word	0x2000011c
 8010cb0:	e000ef34 	.word	0xe000ef34

08010cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b083      	sub	sp, #12
 8010cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8010cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbe:	f383 8811 	msr	BASEPRI, r3
 8010cc2:	f3bf 8f6f 	isb	sy
 8010cc6:	f3bf 8f4f 	dsb	sy
 8010cca:	607b      	str	r3, [r7, #4]
}
 8010ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010cce:	4b0f      	ldr	r3, [pc, #60]	; (8010d0c <vPortEnterCritical+0x58>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	4a0d      	ldr	r2, [pc, #52]	; (8010d0c <vPortEnterCritical+0x58>)
 8010cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010cd8:	4b0c      	ldr	r3, [pc, #48]	; (8010d0c <vPortEnterCritical+0x58>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d10f      	bne.n	8010d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010ce0:	4b0b      	ldr	r3, [pc, #44]	; (8010d10 <vPortEnterCritical+0x5c>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d00a      	beq.n	8010d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8010cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cee:	f383 8811 	msr	BASEPRI, r3
 8010cf2:	f3bf 8f6f 	isb	sy
 8010cf6:	f3bf 8f4f 	dsb	sy
 8010cfa:	603b      	str	r3, [r7, #0]
}
 8010cfc:	bf00      	nop
 8010cfe:	e7fe      	b.n	8010cfe <vPortEnterCritical+0x4a>
	}
}
 8010d00:	bf00      	nop
 8010d02:	370c      	adds	r7, #12
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr
 8010d0c:	2000011c 	.word	0x2000011c
 8010d10:	e000ed04 	.word	0xe000ed04

08010d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010d1a:	4b12      	ldr	r3, [pc, #72]	; (8010d64 <vPortExitCritical+0x50>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d10a      	bne.n	8010d38 <vPortExitCritical+0x24>
	__asm volatile
 8010d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d26:	f383 8811 	msr	BASEPRI, r3
 8010d2a:	f3bf 8f6f 	isb	sy
 8010d2e:	f3bf 8f4f 	dsb	sy
 8010d32:	607b      	str	r3, [r7, #4]
}
 8010d34:	bf00      	nop
 8010d36:	e7fe      	b.n	8010d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010d38:	4b0a      	ldr	r3, [pc, #40]	; (8010d64 <vPortExitCritical+0x50>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	3b01      	subs	r3, #1
 8010d3e:	4a09      	ldr	r2, [pc, #36]	; (8010d64 <vPortExitCritical+0x50>)
 8010d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d42:	4b08      	ldr	r3, [pc, #32]	; (8010d64 <vPortExitCritical+0x50>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d105      	bne.n	8010d56 <vPortExitCritical+0x42>
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	f383 8811 	msr	BASEPRI, r3
}
 8010d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010d56:	bf00      	nop
 8010d58:	370c      	adds	r7, #12
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d60:	4770      	bx	lr
 8010d62:	bf00      	nop
 8010d64:	2000011c 	.word	0x2000011c
	...

08010d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010d70:	f3ef 8009 	mrs	r0, PSP
 8010d74:	f3bf 8f6f 	isb	sy
 8010d78:	4b15      	ldr	r3, [pc, #84]	; (8010dd0 <pxCurrentTCBConst>)
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	f01e 0f10 	tst.w	lr, #16
 8010d80:	bf08      	it	eq
 8010d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8a:	6010      	str	r0, [r2, #0]
 8010d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010d94:	f380 8811 	msr	BASEPRI, r0
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	f3bf 8f6f 	isb	sy
 8010da0:	f7fe feec 	bl	800fb7c <vTaskSwitchContext>
 8010da4:	f04f 0000 	mov.w	r0, #0
 8010da8:	f380 8811 	msr	BASEPRI, r0
 8010dac:	bc09      	pop	{r0, r3}
 8010dae:	6819      	ldr	r1, [r3, #0]
 8010db0:	6808      	ldr	r0, [r1, #0]
 8010db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db6:	f01e 0f10 	tst.w	lr, #16
 8010dba:	bf08      	it	eq
 8010dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010dc0:	f380 8809 	msr	PSP, r0
 8010dc4:	f3bf 8f6f 	isb	sy
 8010dc8:	4770      	bx	lr
 8010dca:	bf00      	nop
 8010dcc:	f3af 8000 	nop.w

08010dd0 <pxCurrentTCBConst>:
 8010dd0:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010dd4:	bf00      	nop
 8010dd6:	bf00      	nop

08010dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8010dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de2:	f383 8811 	msr	BASEPRI, r3
 8010de6:	f3bf 8f6f 	isb	sy
 8010dea:	f3bf 8f4f 	dsb	sy
 8010dee:	607b      	str	r3, [r7, #4]
}
 8010df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010df2:	f7fe fe09 	bl	800fa08 <xTaskIncrementTick>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d003      	beq.n	8010e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010dfc:	4b06      	ldr	r3, [pc, #24]	; (8010e18 <xPortSysTickHandler+0x40>)
 8010dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e02:	601a      	str	r2, [r3, #0]
 8010e04:	2300      	movs	r3, #0
 8010e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	f383 8811 	msr	BASEPRI, r3
}
 8010e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010e10:	bf00      	nop
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	e000ed04 	.word	0xe000ed04

08010e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010e20:	4b0b      	ldr	r3, [pc, #44]	; (8010e50 <vPortSetupTimerInterrupt+0x34>)
 8010e22:	2200      	movs	r2, #0
 8010e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010e26:	4b0b      	ldr	r3, [pc, #44]	; (8010e54 <vPortSetupTimerInterrupt+0x38>)
 8010e28:	2200      	movs	r2, #0
 8010e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e2c:	4b0a      	ldr	r3, [pc, #40]	; (8010e58 <vPortSetupTimerInterrupt+0x3c>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	4a0a      	ldr	r2, [pc, #40]	; (8010e5c <vPortSetupTimerInterrupt+0x40>)
 8010e32:	fba2 2303 	umull	r2, r3, r2, r3
 8010e36:	099b      	lsrs	r3, r3, #6
 8010e38:	4a09      	ldr	r2, [pc, #36]	; (8010e60 <vPortSetupTimerInterrupt+0x44>)
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010e3e:	4b04      	ldr	r3, [pc, #16]	; (8010e50 <vPortSetupTimerInterrupt+0x34>)
 8010e40:	2207      	movs	r2, #7
 8010e42:	601a      	str	r2, [r3, #0]
}
 8010e44:	bf00      	nop
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr
 8010e4e:	bf00      	nop
 8010e50:	e000e010 	.word	0xe000e010
 8010e54:	e000e018 	.word	0xe000e018
 8010e58:	20000000 	.word	0x20000000
 8010e5c:	10624dd3 	.word	0x10624dd3
 8010e60:	e000e014 	.word	0xe000e014

08010e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010e74 <vPortEnableVFP+0x10>
 8010e68:	6801      	ldr	r1, [r0, #0]
 8010e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010e6e:	6001      	str	r1, [r0, #0]
 8010e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010e72:	bf00      	nop
 8010e74:	e000ed88 	.word	0xe000ed88

08010e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010e78:	b480      	push	{r7}
 8010e7a:	b085      	sub	sp, #20
 8010e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010e7e:	f3ef 8305 	mrs	r3, IPSR
 8010e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2b0f      	cmp	r3, #15
 8010e88:	d914      	bls.n	8010eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010e8a:	4a17      	ldr	r2, [pc, #92]	; (8010ee8 <vPortValidateInterruptPriority+0x70>)
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	4413      	add	r3, r2
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010e94:	4b15      	ldr	r3, [pc, #84]	; (8010eec <vPortValidateInterruptPriority+0x74>)
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	7afa      	ldrb	r2, [r7, #11]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d20a      	bcs.n	8010eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea2:	f383 8811 	msr	BASEPRI, r3
 8010ea6:	f3bf 8f6f 	isb	sy
 8010eaa:	f3bf 8f4f 	dsb	sy
 8010eae:	607b      	str	r3, [r7, #4]
}
 8010eb0:	bf00      	nop
 8010eb2:	e7fe      	b.n	8010eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010eb4:	4b0e      	ldr	r3, [pc, #56]	; (8010ef0 <vPortValidateInterruptPriority+0x78>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010ebc:	4b0d      	ldr	r3, [pc, #52]	; (8010ef4 <vPortValidateInterruptPriority+0x7c>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d90a      	bls.n	8010eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec8:	f383 8811 	msr	BASEPRI, r3
 8010ecc:	f3bf 8f6f 	isb	sy
 8010ed0:	f3bf 8f4f 	dsb	sy
 8010ed4:	603b      	str	r3, [r7, #0]
}
 8010ed6:	bf00      	nop
 8010ed8:	e7fe      	b.n	8010ed8 <vPortValidateInterruptPriority+0x60>
	}
 8010eda:	bf00      	nop
 8010edc:	3714      	adds	r7, #20
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr
 8010ee6:	bf00      	nop
 8010ee8:	e000e3f0 	.word	0xe000e3f0
 8010eec:	20000ed8 	.word	0x20000ed8
 8010ef0:	e000ed0c 	.word	0xe000ed0c
 8010ef4:	20000edc 	.word	0x20000edc

08010ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b08a      	sub	sp, #40	; 0x28
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f00:	2300      	movs	r3, #0
 8010f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010f04:	f7fe fcb2 	bl	800f86c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010f08:	4b5b      	ldr	r3, [pc, #364]	; (8011078 <pvPortMalloc+0x180>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d101      	bne.n	8010f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010f10:	f000 f920 	bl	8011154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010f14:	4b59      	ldr	r3, [pc, #356]	; (801107c <pvPortMalloc+0x184>)
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4013      	ands	r3, r2
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	f040 8093 	bne.w	8011048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d01d      	beq.n	8010f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010f28:	2208      	movs	r2, #8
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	4413      	add	r3, r2
 8010f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f003 0307 	and.w	r3, r3, #7
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d014      	beq.n	8010f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f023 0307 	bic.w	r3, r3, #7
 8010f40:	3308      	adds	r3, #8
 8010f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f003 0307 	and.w	r3, r3, #7
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d00a      	beq.n	8010f64 <pvPortMalloc+0x6c>
	__asm volatile
 8010f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f52:	f383 8811 	msr	BASEPRI, r3
 8010f56:	f3bf 8f6f 	isb	sy
 8010f5a:	f3bf 8f4f 	dsb	sy
 8010f5e:	617b      	str	r3, [r7, #20]
}
 8010f60:	bf00      	nop
 8010f62:	e7fe      	b.n	8010f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d06e      	beq.n	8011048 <pvPortMalloc+0x150>
 8010f6a:	4b45      	ldr	r3, [pc, #276]	; (8011080 <pvPortMalloc+0x188>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d869      	bhi.n	8011048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010f74:	4b43      	ldr	r3, [pc, #268]	; (8011084 <pvPortMalloc+0x18c>)
 8010f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010f78:	4b42      	ldr	r3, [pc, #264]	; (8011084 <pvPortMalloc+0x18c>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010f7e:	e004      	b.n	8010f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8c:	685b      	ldr	r3, [r3, #4]
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d903      	bls.n	8010f9c <pvPortMalloc+0xa4>
 8010f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d1f1      	bne.n	8010f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010f9c:	4b36      	ldr	r3, [pc, #216]	; (8011078 <pvPortMalloc+0x180>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d050      	beq.n	8011048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010fa6:	6a3b      	ldr	r3, [r7, #32]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2208      	movs	r2, #8
 8010fac:	4413      	add	r3, r2
 8010fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb2:	681a      	ldr	r2, [r3, #0]
 8010fb4:	6a3b      	ldr	r3, [r7, #32]
 8010fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fba:	685a      	ldr	r2, [r3, #4]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	1ad2      	subs	r2, r2, r3
 8010fc0:	2308      	movs	r3, #8
 8010fc2:	005b      	lsls	r3, r3, #1
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d91f      	bls.n	8011008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4413      	add	r3, r2
 8010fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010fd0:	69bb      	ldr	r3, [r7, #24]
 8010fd2:	f003 0307 	and.w	r3, r3, #7
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d00a      	beq.n	8010ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8010fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fde:	f383 8811 	msr	BASEPRI, r3
 8010fe2:	f3bf 8f6f 	isb	sy
 8010fe6:	f3bf 8f4f 	dsb	sy
 8010fea:	613b      	str	r3, [r7, #16]
}
 8010fec:	bf00      	nop
 8010fee:	e7fe      	b.n	8010fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff2:	685a      	ldr	r2, [r3, #4]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	1ad2      	subs	r2, r2, r3
 8010ff8:	69bb      	ldr	r3, [r7, #24]
 8010ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011002:	69b8      	ldr	r0, [r7, #24]
 8011004:	f000 f908 	bl	8011218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011008:	4b1d      	ldr	r3, [pc, #116]	; (8011080 <pvPortMalloc+0x188>)
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	1ad3      	subs	r3, r2, r3
 8011012:	4a1b      	ldr	r2, [pc, #108]	; (8011080 <pvPortMalloc+0x188>)
 8011014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011016:	4b1a      	ldr	r3, [pc, #104]	; (8011080 <pvPortMalloc+0x188>)
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	4b1b      	ldr	r3, [pc, #108]	; (8011088 <pvPortMalloc+0x190>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	429a      	cmp	r2, r3
 8011020:	d203      	bcs.n	801102a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011022:	4b17      	ldr	r3, [pc, #92]	; (8011080 <pvPortMalloc+0x188>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	4a18      	ldr	r2, [pc, #96]	; (8011088 <pvPortMalloc+0x190>)
 8011028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102c:	685a      	ldr	r2, [r3, #4]
 801102e:	4b13      	ldr	r3, [pc, #76]	; (801107c <pvPortMalloc+0x184>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	431a      	orrs	r2, r3
 8011034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103a:	2200      	movs	r2, #0
 801103c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801103e:	4b13      	ldr	r3, [pc, #76]	; (801108c <pvPortMalloc+0x194>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	3301      	adds	r3, #1
 8011044:	4a11      	ldr	r2, [pc, #68]	; (801108c <pvPortMalloc+0x194>)
 8011046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011048:	f7fe fc1e 	bl	800f888 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	f003 0307 	and.w	r3, r3, #7
 8011052:	2b00      	cmp	r3, #0
 8011054:	d00a      	beq.n	801106c <pvPortMalloc+0x174>
	__asm volatile
 8011056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801105a:	f383 8811 	msr	BASEPRI, r3
 801105e:	f3bf 8f6f 	isb	sy
 8011062:	f3bf 8f4f 	dsb	sy
 8011066:	60fb      	str	r3, [r7, #12]
}
 8011068:	bf00      	nop
 801106a:	e7fe      	b.n	801106a <pvPortMalloc+0x172>
	return pvReturn;
 801106c:	69fb      	ldr	r3, [r7, #28]
}
 801106e:	4618      	mov	r0, r3
 8011070:	3728      	adds	r7, #40	; 0x28
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	20001aa0 	.word	0x20001aa0
 801107c:	20001ab4 	.word	0x20001ab4
 8011080:	20001aa4 	.word	0x20001aa4
 8011084:	20001a98 	.word	0x20001a98
 8011088:	20001aa8 	.word	0x20001aa8
 801108c:	20001aac 	.word	0x20001aac

08011090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b086      	sub	sp, #24
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d04d      	beq.n	801113e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80110a2:	2308      	movs	r3, #8
 80110a4:	425b      	negs	r3, r3
 80110a6:	697a      	ldr	r2, [r7, #20]
 80110a8:	4413      	add	r3, r2
 80110aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	685a      	ldr	r2, [r3, #4]
 80110b4:	4b24      	ldr	r3, [pc, #144]	; (8011148 <vPortFree+0xb8>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	4013      	ands	r3, r2
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d10a      	bne.n	80110d4 <vPortFree+0x44>
	__asm volatile
 80110be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c2:	f383 8811 	msr	BASEPRI, r3
 80110c6:	f3bf 8f6f 	isb	sy
 80110ca:	f3bf 8f4f 	dsb	sy
 80110ce:	60fb      	str	r3, [r7, #12]
}
 80110d0:	bf00      	nop
 80110d2:	e7fe      	b.n	80110d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d00a      	beq.n	80110f2 <vPortFree+0x62>
	__asm volatile
 80110dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e0:	f383 8811 	msr	BASEPRI, r3
 80110e4:	f3bf 8f6f 	isb	sy
 80110e8:	f3bf 8f4f 	dsb	sy
 80110ec:	60bb      	str	r3, [r7, #8]
}
 80110ee:	bf00      	nop
 80110f0:	e7fe      	b.n	80110f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	685a      	ldr	r2, [r3, #4]
 80110f6:	4b14      	ldr	r3, [pc, #80]	; (8011148 <vPortFree+0xb8>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	4013      	ands	r3, r2
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d01e      	beq.n	801113e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d11a      	bne.n	801113e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	685a      	ldr	r2, [r3, #4]
 801110c:	4b0e      	ldr	r3, [pc, #56]	; (8011148 <vPortFree+0xb8>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	43db      	mvns	r3, r3
 8011112:	401a      	ands	r2, r3
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011118:	f7fe fba8 	bl	800f86c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801111c:	693b      	ldr	r3, [r7, #16]
 801111e:	685a      	ldr	r2, [r3, #4]
 8011120:	4b0a      	ldr	r3, [pc, #40]	; (801114c <vPortFree+0xbc>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4413      	add	r3, r2
 8011126:	4a09      	ldr	r2, [pc, #36]	; (801114c <vPortFree+0xbc>)
 8011128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801112a:	6938      	ldr	r0, [r7, #16]
 801112c:	f000 f874 	bl	8011218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011130:	4b07      	ldr	r3, [pc, #28]	; (8011150 <vPortFree+0xc0>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	3301      	adds	r3, #1
 8011136:	4a06      	ldr	r2, [pc, #24]	; (8011150 <vPortFree+0xc0>)
 8011138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801113a:	f7fe fba5 	bl	800f888 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801113e:	bf00      	nop
 8011140:	3718      	adds	r7, #24
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	20001ab4 	.word	0x20001ab4
 801114c:	20001aa4 	.word	0x20001aa4
 8011150:	20001ab0 	.word	0x20001ab0

08011154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011154:	b480      	push	{r7}
 8011156:	b085      	sub	sp, #20
 8011158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801115a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801115e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011160:	4b27      	ldr	r3, [pc, #156]	; (8011200 <prvHeapInit+0xac>)
 8011162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	f003 0307 	and.w	r3, r3, #7
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00c      	beq.n	8011188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	3307      	adds	r3, #7
 8011172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	f023 0307 	bic.w	r3, r3, #7
 801117a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801117c:	68ba      	ldr	r2, [r7, #8]
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	1ad3      	subs	r3, r2, r3
 8011182:	4a1f      	ldr	r2, [pc, #124]	; (8011200 <prvHeapInit+0xac>)
 8011184:	4413      	add	r3, r2
 8011186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801118c:	4a1d      	ldr	r2, [pc, #116]	; (8011204 <prvHeapInit+0xb0>)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011192:	4b1c      	ldr	r3, [pc, #112]	; (8011204 <prvHeapInit+0xb0>)
 8011194:	2200      	movs	r2, #0
 8011196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	68ba      	ldr	r2, [r7, #8]
 801119c:	4413      	add	r3, r2
 801119e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80111a0:	2208      	movs	r2, #8
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	1a9b      	subs	r3, r3, r2
 80111a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	f023 0307 	bic.w	r3, r3, #7
 80111ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	4a15      	ldr	r2, [pc, #84]	; (8011208 <prvHeapInit+0xb4>)
 80111b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80111b6:	4b14      	ldr	r3, [pc, #80]	; (8011208 <prvHeapInit+0xb4>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	2200      	movs	r2, #0
 80111bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80111be:	4b12      	ldr	r3, [pc, #72]	; (8011208 <prvHeapInit+0xb4>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	2200      	movs	r2, #0
 80111c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	68fa      	ldr	r2, [r7, #12]
 80111ce:	1ad2      	subs	r2, r2, r3
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80111d4:	4b0c      	ldr	r3, [pc, #48]	; (8011208 <prvHeapInit+0xb4>)
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	4a0a      	ldr	r2, [pc, #40]	; (801120c <prvHeapInit+0xb8>)
 80111e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	4a09      	ldr	r2, [pc, #36]	; (8011210 <prvHeapInit+0xbc>)
 80111ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80111ec:	4b09      	ldr	r3, [pc, #36]	; (8011214 <prvHeapInit+0xc0>)
 80111ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80111f2:	601a      	str	r2, [r3, #0]
}
 80111f4:	bf00      	nop
 80111f6:	3714      	adds	r7, #20
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr
 8011200:	20000ee0 	.word	0x20000ee0
 8011204:	20001a98 	.word	0x20001a98
 8011208:	20001aa0 	.word	0x20001aa0
 801120c:	20001aa8 	.word	0x20001aa8
 8011210:	20001aa4 	.word	0x20001aa4
 8011214:	20001ab4 	.word	0x20001ab4

08011218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011218:	b480      	push	{r7}
 801121a:	b085      	sub	sp, #20
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011220:	4b28      	ldr	r3, [pc, #160]	; (80112c4 <prvInsertBlockIntoFreeList+0xac>)
 8011222:	60fb      	str	r3, [r7, #12]
 8011224:	e002      	b.n	801122c <prvInsertBlockIntoFreeList+0x14>
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	60fb      	str	r3, [r7, #12]
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	429a      	cmp	r2, r3
 8011234:	d8f7      	bhi.n	8011226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	68ba      	ldr	r2, [r7, #8]
 8011240:	4413      	add	r3, r2
 8011242:	687a      	ldr	r2, [r7, #4]
 8011244:	429a      	cmp	r2, r3
 8011246:	d108      	bne.n	801125a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	685a      	ldr	r2, [r3, #4]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	441a      	add	r2, r3
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	68ba      	ldr	r2, [r7, #8]
 8011264:	441a      	add	r2, r3
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	429a      	cmp	r2, r3
 801126c:	d118      	bne.n	80112a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681a      	ldr	r2, [r3, #0]
 8011272:	4b15      	ldr	r3, [pc, #84]	; (80112c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	429a      	cmp	r2, r3
 8011278:	d00d      	beq.n	8011296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	685a      	ldr	r2, [r3, #4]
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	441a      	add	r2, r3
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	681a      	ldr	r2, [r3, #0]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	601a      	str	r2, [r3, #0]
 8011294:	e008      	b.n	80112a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011296:	4b0c      	ldr	r3, [pc, #48]	; (80112c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	601a      	str	r2, [r3, #0]
 801129e:	e003      	b.n	80112a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681a      	ldr	r2, [r3, #0]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80112a8:	68fa      	ldr	r2, [r7, #12]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d002      	beq.n	80112b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	687a      	ldr	r2, [r7, #4]
 80112b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112b6:	bf00      	nop
 80112b8:	3714      	adds	r7, #20
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop
 80112c4:	20001a98 	.word	0x20001a98
 80112c8:	20001aa0 	.word	0x20001aa0

080112cc <InitFastTask>:
//extern osEventFlagsId_t fastTaskEventHandle;

static osEventFlagsId_t *myEvHdl = NULL;

void InitFastTask(osEventFlagsId_t *fTEvHnd)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
	myEvHdl = fTEvHnd;
 80112d4:	4a04      	ldr	r2, [pc, #16]	; (80112e8 <InitFastTask+0x1c>)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6013      	str	r3, [r2, #0]

}
 80112da:	bf00      	nop
 80112dc:	370c      	adds	r7, #12
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr
 80112e6:	bf00      	nop
 80112e8:	20001ab8 	.word	0x20001ab8

080112ec <StartFastTask>:

void StartFastTask(void *argument)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
	uint32_t tim=0;
 80112f4:	2300      	movs	r3, #0
 80112f6:	60fb      	str	r3, [r7, #12]
	while(!myEvHdl)
 80112f8:	bf00      	nop
 80112fa:	4b11      	ldr	r3, [pc, #68]	; (8011340 <StartFastTask+0x54>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d0fb      	beq.n	80112fa <StartFastTask+0xe>
		;
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait (*myEvHdl , FAST_TASK_EVENT, 0, 15);
 8011302:	4b0f      	ldr	r3, [pc, #60]	; (8011340 <StartFastTask+0x54>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	6818      	ldr	r0, [r3, #0]
 8011308:	230f      	movs	r3, #15
 801130a:	2200      	movs	r2, #0
 801130c:	2101      	movs	r1, #1
 801130e:	f7fc fddf 	bl	800ded0 <osEventFlagsWait>
	    osEventFlagsClear (*myEvHdl , FAST_TASK_EVENT);
 8011312:	4b0b      	ldr	r3, [pc, #44]	; (8011340 <StartFastTask+0x54>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	2101      	movs	r1, #1
 801131a:	4618      	mov	r0, r3
 801131c:	f7fc fda6 	bl	800de6c <osEventFlagsClear>
		tim++;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	3301      	adds	r3, #1
 8011324:	60fb      	str	r3, [r7, #12]
		if(tim >= 10){
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2b09      	cmp	r3, #9
 801132a:	d9ea      	bls.n	8011302 <StartFastTask+0x16>
			tim= 0;
 801132c:	2300      	movs	r3, #0
 801132e:	60fb      	str	r3, [r7, #12]
			osEventFlagsSet(*myEvHdl, NORMAL_TASK_EVENT);
 8011330:	4b03      	ldr	r3, [pc, #12]	; (8011340 <StartFastTask+0x54>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2102      	movs	r1, #2
 8011338:	4618      	mov	r0, r3
 801133a:	f7fc fd53 	bl	800dde4 <osEventFlagsSet>
		osEventFlagsWait (*myEvHdl , FAST_TASK_EVENT, 0, 15);
 801133e:	e7e0      	b.n	8011302 <StartFastTask+0x16>
 8011340:	20001ab8 	.word	0x20001ab8

08011344 <InitNormalTask>:
#include "normalTask.h"

static osEventFlagsId_t *myEvHdl = NULL;

void InitNormalTask(osEventFlagsId_t *fTEvHnd)
{
 8011344:	b480      	push	{r7}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
	myEvHdl = fTEvHnd;
 801134c:	4a04      	ldr	r2, [pc, #16]	; (8011360 <InitNormalTask+0x1c>)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6013      	str	r3, [r2, #0]
}
 8011352:	bf00      	nop
 8011354:	370c      	adds	r7, #12
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop
 8011360:	20001abc 	.word	0x20001abc

08011364 <StartNormalTask>:

void StartNormalTask(void *argument)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
	uint32_t tim=0;
 801136c:	2300      	movs	r3, #0
 801136e:	60fb      	str	r3, [r7, #12]
	while(!myEvHdl)
 8011370:	bf00      	nop
 8011372:	4b11      	ldr	r3, [pc, #68]	; (80113b8 <StartNormalTask+0x54>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d0fb      	beq.n	8011372 <StartNormalTask+0xe>
		;
	/* Infinite loop */
	for(;;)
	{
	    osEventFlagsWait (*myEvHdl , NORMAL_TASK_EVENT, 0, 150);
 801137a:	4b0f      	ldr	r3, [pc, #60]	; (80113b8 <StartNormalTask+0x54>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	6818      	ldr	r0, [r3, #0]
 8011380:	2396      	movs	r3, #150	; 0x96
 8011382:	2200      	movs	r2, #0
 8011384:	2102      	movs	r1, #2
 8011386:	f7fc fda3 	bl	800ded0 <osEventFlagsWait>
	    osEventFlagsClear (*myEvHdl , NORMAL_TASK_EVENT);
 801138a:	4b0b      	ldr	r3, [pc, #44]	; (80113b8 <StartNormalTask+0x54>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	2102      	movs	r1, #2
 8011392:	4618      	mov	r0, r3
 8011394:	f7fc fd6a 	bl	800de6c <osEventFlagsClear>
		tim++;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	3301      	adds	r3, #1
 801139c:	60fb      	str	r3, [r7, #12]
		if(tim >= 10){
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2b09      	cmp	r3, #9
 80113a2:	d9ea      	bls.n	801137a <StartNormalTask+0x16>
			tim= 0;
 80113a4:	2300      	movs	r3, #0
 80113a6:	60fb      	str	r3, [r7, #12]
			osEventFlagsSet(*myEvHdl, SLOW_TASK_EVENT);
 80113a8:	4b03      	ldr	r3, [pc, #12]	; (80113b8 <StartNormalTask+0x54>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	2104      	movs	r1, #4
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7fc fd17 	bl	800dde4 <osEventFlagsSet>
	    osEventFlagsWait (*myEvHdl , NORMAL_TASK_EVENT, 0, 150);
 80113b6:	e7e0      	b.n	801137a <StartNormalTask+0x16>
 80113b8:	20001abc 	.word	0x20001abc

080113bc <InitSlowTask>:
#include "slowTask.h"

static osEventFlagsId_t *myEvHdl = NULL;

void InitSlowTask(osEventFlagsId_t *fTEvHnd)
{
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
	myEvHdl = fTEvHnd;
 80113c4:	4a04      	ldr	r2, [pc, #16]	; (80113d8 <InitSlowTask+0x1c>)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6013      	str	r3, [r2, #0]
}
 80113ca:	bf00      	nop
 80113cc:	370c      	adds	r7, #12
 80113ce:	46bd      	mov	sp, r7
 80113d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop
 80113d8:	20001ac0 	.word	0x20001ac0

080113dc <StartSlowTask>:


void StartSlowTask(void *argument)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
	while(!myEvHdl)
 80113e4:	bf00      	nop
 80113e6:	4b0c      	ldr	r3, [pc, #48]	; (8011418 <StartSlowTask+0x3c>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d0fb      	beq.n	80113e6 <StartSlowTask+0xa>
		;
	/* Infinite loop */
	for(;;)
	{
	    osEventFlagsWait (*myEvHdl , SLOW_TASK_EVENT, 0, 1500);
 80113ee:	4b0a      	ldr	r3, [pc, #40]	; (8011418 <StartSlowTask+0x3c>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	6818      	ldr	r0, [r3, #0]
 80113f4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80113f8:	2200      	movs	r2, #0
 80113fa:	2104      	movs	r1, #4
 80113fc:	f7fc fd68 	bl	800ded0 <osEventFlagsWait>
	    osEventFlagsClear (*myEvHdl , SLOW_TASK_EVENT);
 8011400:	4b05      	ldr	r3, [pc, #20]	; (8011418 <StartSlowTask+0x3c>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2104      	movs	r1, #4
 8011408:	4618      	mov	r0, r3
 801140a:	f7fc fd2f 	bl	800de6c <osEventFlagsClear>

		HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
 801140e:	2104      	movs	r1, #4
 8011410:	4802      	ldr	r0, [pc, #8]	; (801141c <StartSlowTask+0x40>)
 8011412:	f7f1 ffc7 	bl	80033a4 <HAL_GPIO_TogglePin>
	    osEventFlagsWait (*myEvHdl , SLOW_TASK_EVENT, 0, 1500);
 8011416:	e7ea      	b.n	80113ee <StartSlowTask+0x12>
 8011418:	20001ac0 	.word	0x20001ac0
 801141c:	48001400 	.word	0x48001400

08011420 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011424:	2200      	movs	r2, #0
 8011426:	4912      	ldr	r1, [pc, #72]	; (8011470 <MX_USB_DEVICE_Init+0x50>)
 8011428:	4812      	ldr	r0, [pc, #72]	; (8011474 <MX_USB_DEVICE_Init+0x54>)
 801142a:	f7fb f939 	bl	800c6a0 <USBD_Init>
 801142e:	4603      	mov	r3, r0
 8011430:	2b00      	cmp	r3, #0
 8011432:	d001      	beq.n	8011438 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011434:	f7ef fd48 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011438:	490f      	ldr	r1, [pc, #60]	; (8011478 <MX_USB_DEVICE_Init+0x58>)
 801143a:	480e      	ldr	r0, [pc, #56]	; (8011474 <MX_USB_DEVICE_Init+0x54>)
 801143c:	f7fb f960 	bl	800c700 <USBD_RegisterClass>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d001      	beq.n	801144a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011446:	f7ef fd3f 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801144a:	490c      	ldr	r1, [pc, #48]	; (801147c <MX_USB_DEVICE_Init+0x5c>)
 801144c:	4809      	ldr	r0, [pc, #36]	; (8011474 <MX_USB_DEVICE_Init+0x54>)
 801144e:	f7fb f8b1 	bl	800c5b4 <USBD_CDC_RegisterInterface>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d001      	beq.n	801145c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011458:	f7ef fd36 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801145c:	4805      	ldr	r0, [pc, #20]	; (8011474 <MX_USB_DEVICE_Init+0x54>)
 801145e:	f7fb f976 	bl	800c74e <USBD_Start>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d001      	beq.n	801146c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011468:	f7ef fd2e 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801146c:	bf00      	nop
 801146e:	bd80      	pop	{r7, pc}
 8011470:	20000134 	.word	0x20000134
 8011474:	20002e18 	.word	0x20002e18
 8011478:	20000018 	.word	0x20000018
 801147c:	20000120 	.word	0x20000120

08011480 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011484:	2200      	movs	r2, #0
 8011486:	4905      	ldr	r1, [pc, #20]	; (801149c <CDC_Init_FS+0x1c>)
 8011488:	4805      	ldr	r0, [pc, #20]	; (80114a0 <CDC_Init_FS+0x20>)
 801148a:	f7fb f8a8 	bl	800c5de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801148e:	4905      	ldr	r1, [pc, #20]	; (80114a4 <CDC_Init_FS+0x24>)
 8011490:	4803      	ldr	r0, [pc, #12]	; (80114a0 <CDC_Init_FS+0x20>)
 8011492:	f7fb f8c2 	bl	800c61a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011496:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011498:	4618      	mov	r0, r3
 801149a:	bd80      	pop	{r7, pc}
 801149c:	200038e8 	.word	0x200038e8
 80114a0:	20002e18 	.word	0x20002e18
 80114a4:	200030e8 	.word	0x200030e8

080114a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80114a8:	b480      	push	{r7}
 80114aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80114ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr

080114b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b083      	sub	sp, #12
 80114bc:	af00      	add	r7, sp, #0
 80114be:	4603      	mov	r3, r0
 80114c0:	6039      	str	r1, [r7, #0]
 80114c2:	71fb      	strb	r3, [r7, #7]
 80114c4:	4613      	mov	r3, r2
 80114c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80114c8:	79fb      	ldrb	r3, [r7, #7]
 80114ca:	2b23      	cmp	r3, #35	; 0x23
 80114cc:	d84a      	bhi.n	8011564 <CDC_Control_FS+0xac>
 80114ce:	a201      	add	r2, pc, #4	; (adr r2, 80114d4 <CDC_Control_FS+0x1c>)
 80114d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d4:	08011565 	.word	0x08011565
 80114d8:	08011565 	.word	0x08011565
 80114dc:	08011565 	.word	0x08011565
 80114e0:	08011565 	.word	0x08011565
 80114e4:	08011565 	.word	0x08011565
 80114e8:	08011565 	.word	0x08011565
 80114ec:	08011565 	.word	0x08011565
 80114f0:	08011565 	.word	0x08011565
 80114f4:	08011565 	.word	0x08011565
 80114f8:	08011565 	.word	0x08011565
 80114fc:	08011565 	.word	0x08011565
 8011500:	08011565 	.word	0x08011565
 8011504:	08011565 	.word	0x08011565
 8011508:	08011565 	.word	0x08011565
 801150c:	08011565 	.word	0x08011565
 8011510:	08011565 	.word	0x08011565
 8011514:	08011565 	.word	0x08011565
 8011518:	08011565 	.word	0x08011565
 801151c:	08011565 	.word	0x08011565
 8011520:	08011565 	.word	0x08011565
 8011524:	08011565 	.word	0x08011565
 8011528:	08011565 	.word	0x08011565
 801152c:	08011565 	.word	0x08011565
 8011530:	08011565 	.word	0x08011565
 8011534:	08011565 	.word	0x08011565
 8011538:	08011565 	.word	0x08011565
 801153c:	08011565 	.word	0x08011565
 8011540:	08011565 	.word	0x08011565
 8011544:	08011565 	.word	0x08011565
 8011548:	08011565 	.word	0x08011565
 801154c:	08011565 	.word	0x08011565
 8011550:	08011565 	.word	0x08011565
 8011554:	08011565 	.word	0x08011565
 8011558:	08011565 	.word	0x08011565
 801155c:	08011565 	.word	0x08011565
 8011560:	08011565 	.word	0x08011565
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011564:	bf00      	nop
  }

  return (USBD_OK);
 8011566:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011568:	4618      	mov	r0, r3
 801156a:	370c      	adds	r7, #12
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801157e:	6879      	ldr	r1, [r7, #4]
 8011580:	4805      	ldr	r0, [pc, #20]	; (8011598 <CDC_Receive_FS+0x24>)
 8011582:	f7fb f84a 	bl	800c61a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011586:	4804      	ldr	r0, [pc, #16]	; (8011598 <CDC_Receive_FS+0x24>)
 8011588:	f7fb f860 	bl	800c64c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801158c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801158e:	4618      	mov	r0, r3
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
 8011596:	bf00      	nop
 8011598:	20002e18 	.word	0x20002e18

0801159c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801159c:	b480      	push	{r7}
 801159e:	b087      	sub	sp, #28
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	4613      	mov	r3, r2
 80115a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80115aa:	2300      	movs	r3, #0
 80115ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80115ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	371c      	adds	r7, #28
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr
	...

080115c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	4603      	mov	r3, r0
 80115c8:	6039      	str	r1, [r7, #0]
 80115ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	2212      	movs	r2, #18
 80115d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80115d2:	4b03      	ldr	r3, [pc, #12]	; (80115e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	370c      	adds	r7, #12
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr
 80115e0:	20000154 	.word	0x20000154

080115e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	4603      	mov	r3, r0
 80115ec:	6039      	str	r1, [r7, #0]
 80115ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	2204      	movs	r2, #4
 80115f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80115f6:	4b03      	ldr	r3, [pc, #12]	; (8011604 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	370c      	adds	r7, #12
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr
 8011604:	20000174 	.word	0x20000174

08011608 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	4603      	mov	r3, r0
 8011610:	6039      	str	r1, [r7, #0]
 8011612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011614:	79fb      	ldrb	r3, [r7, #7]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d105      	bne.n	8011626 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	4907      	ldr	r1, [pc, #28]	; (801163c <USBD_FS_ProductStrDescriptor+0x34>)
 801161e:	4808      	ldr	r0, [pc, #32]	; (8011640 <USBD_FS_ProductStrDescriptor+0x38>)
 8011620:	f7fc f8f1 	bl	800d806 <USBD_GetString>
 8011624:	e004      	b.n	8011630 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	4904      	ldr	r1, [pc, #16]	; (801163c <USBD_FS_ProductStrDescriptor+0x34>)
 801162a:	4805      	ldr	r0, [pc, #20]	; (8011640 <USBD_FS_ProductStrDescriptor+0x38>)
 801162c:	f7fc f8eb 	bl	800d806 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011630:	4b02      	ldr	r3, [pc, #8]	; (801163c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011632:	4618      	mov	r0, r3
 8011634:	3708      	adds	r7, #8
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	200040e8 	.word	0x200040e8
 8011640:	08012110 	.word	0x08012110

08011644 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	4603      	mov	r3, r0
 801164c:	6039      	str	r1, [r7, #0]
 801164e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011650:	683a      	ldr	r2, [r7, #0]
 8011652:	4904      	ldr	r1, [pc, #16]	; (8011664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011654:	4804      	ldr	r0, [pc, #16]	; (8011668 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011656:	f7fc f8d6 	bl	800d806 <USBD_GetString>
  return USBD_StrDesc;
 801165a:	4b02      	ldr	r3, [pc, #8]	; (8011664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801165c:	4618      	mov	r0, r3
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	200040e8 	.word	0x200040e8
 8011668:	08012128 	.word	0x08012128

0801166c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b082      	sub	sp, #8
 8011670:	af00      	add	r7, sp, #0
 8011672:	4603      	mov	r3, r0
 8011674:	6039      	str	r1, [r7, #0]
 8011676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	221a      	movs	r2, #26
 801167c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801167e:	f000 f855 	bl	801172c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011682:	4b02      	ldr	r3, [pc, #8]	; (801168c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011684:	4618      	mov	r0, r3
 8011686:	3708      	adds	r7, #8
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}
 801168c:	20000178 	.word	0x20000178

08011690 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	4603      	mov	r3, r0
 8011698:	6039      	str	r1, [r7, #0]
 801169a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801169c:	79fb      	ldrb	r3, [r7, #7]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d105      	bne.n	80116ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80116a2:	683a      	ldr	r2, [r7, #0]
 80116a4:	4907      	ldr	r1, [pc, #28]	; (80116c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80116a6:	4808      	ldr	r0, [pc, #32]	; (80116c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80116a8:	f7fc f8ad 	bl	800d806 <USBD_GetString>
 80116ac:	e004      	b.n	80116b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80116ae:	683a      	ldr	r2, [r7, #0]
 80116b0:	4904      	ldr	r1, [pc, #16]	; (80116c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80116b2:	4805      	ldr	r0, [pc, #20]	; (80116c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80116b4:	f7fc f8a7 	bl	800d806 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116b8:	4b02      	ldr	r3, [pc, #8]	; (80116c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3708      	adds	r7, #8
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	200040e8 	.word	0x200040e8
 80116c8:	0801213c 	.word	0x0801213c

080116cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	4603      	mov	r3, r0
 80116d4:	6039      	str	r1, [r7, #0]
 80116d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80116d8:	79fb      	ldrb	r3, [r7, #7]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d105      	bne.n	80116ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80116de:	683a      	ldr	r2, [r7, #0]
 80116e0:	4907      	ldr	r1, [pc, #28]	; (8011700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80116e2:	4808      	ldr	r0, [pc, #32]	; (8011704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80116e4:	f7fc f88f 	bl	800d806 <USBD_GetString>
 80116e8:	e004      	b.n	80116f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80116ea:	683a      	ldr	r2, [r7, #0]
 80116ec:	4904      	ldr	r1, [pc, #16]	; (8011700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80116ee:	4805      	ldr	r0, [pc, #20]	; (8011704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80116f0:	f7fc f889 	bl	800d806 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116f4:	4b02      	ldr	r3, [pc, #8]	; (8011700 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	200040e8 	.word	0x200040e8
 8011704:	08012148 	.word	0x08012148

08011708 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011708:	b480      	push	{r7}
 801170a:	b083      	sub	sp, #12
 801170c:	af00      	add	r7, sp, #0
 801170e:	4603      	mov	r3, r0
 8011710:	6039      	str	r1, [r7, #0]
 8011712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	220c      	movs	r2, #12
 8011718:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801171a:	4b03      	ldr	r3, [pc, #12]	; (8011728 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801171c:	4618      	mov	r0, r3
 801171e:	370c      	adds	r7, #12
 8011720:	46bd      	mov	sp, r7
 8011722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011726:	4770      	bx	lr
 8011728:	20000168 	.word	0x20000168

0801172c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011732:	4b0f      	ldr	r3, [pc, #60]	; (8011770 <Get_SerialNum+0x44>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011738:	4b0e      	ldr	r3, [pc, #56]	; (8011774 <Get_SerialNum+0x48>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801173e:	4b0e      	ldr	r3, [pc, #56]	; (8011778 <Get_SerialNum+0x4c>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011744:	68fa      	ldr	r2, [r7, #12]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	4413      	add	r3, r2
 801174a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d009      	beq.n	8011766 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011752:	2208      	movs	r2, #8
 8011754:	4909      	ldr	r1, [pc, #36]	; (801177c <Get_SerialNum+0x50>)
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f000 f814 	bl	8011784 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801175c:	2204      	movs	r2, #4
 801175e:	4908      	ldr	r1, [pc, #32]	; (8011780 <Get_SerialNum+0x54>)
 8011760:	68b8      	ldr	r0, [r7, #8]
 8011762:	f000 f80f 	bl	8011784 <IntToUnicode>
  }
}
 8011766:	bf00      	nop
 8011768:	3710      	adds	r7, #16
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
 801176e:	bf00      	nop
 8011770:	1fff7590 	.word	0x1fff7590
 8011774:	1fff7594 	.word	0x1fff7594
 8011778:	1fff7598 	.word	0x1fff7598
 801177c:	2000017a 	.word	0x2000017a
 8011780:	2000018a 	.word	0x2000018a

08011784 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011784:	b480      	push	{r7}
 8011786:	b087      	sub	sp, #28
 8011788:	af00      	add	r7, sp, #0
 801178a:	60f8      	str	r0, [r7, #12]
 801178c:	60b9      	str	r1, [r7, #8]
 801178e:	4613      	mov	r3, r2
 8011790:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011792:	2300      	movs	r3, #0
 8011794:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011796:	2300      	movs	r3, #0
 8011798:	75fb      	strb	r3, [r7, #23]
 801179a:	e027      	b.n	80117ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	0f1b      	lsrs	r3, r3, #28
 80117a0:	2b09      	cmp	r3, #9
 80117a2:	d80b      	bhi.n	80117bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	0f1b      	lsrs	r3, r3, #28
 80117a8:	b2da      	uxtb	r2, r3
 80117aa:	7dfb      	ldrb	r3, [r7, #23]
 80117ac:	005b      	lsls	r3, r3, #1
 80117ae:	4619      	mov	r1, r3
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	440b      	add	r3, r1
 80117b4:	3230      	adds	r2, #48	; 0x30
 80117b6:	b2d2      	uxtb	r2, r2
 80117b8:	701a      	strb	r2, [r3, #0]
 80117ba:	e00a      	b.n	80117d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	0f1b      	lsrs	r3, r3, #28
 80117c0:	b2da      	uxtb	r2, r3
 80117c2:	7dfb      	ldrb	r3, [r7, #23]
 80117c4:	005b      	lsls	r3, r3, #1
 80117c6:	4619      	mov	r1, r3
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	440b      	add	r3, r1
 80117cc:	3237      	adds	r2, #55	; 0x37
 80117ce:	b2d2      	uxtb	r2, r2
 80117d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	011b      	lsls	r3, r3, #4
 80117d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80117d8:	7dfb      	ldrb	r3, [r7, #23]
 80117da:	005b      	lsls	r3, r3, #1
 80117dc:	3301      	adds	r3, #1
 80117de:	68ba      	ldr	r2, [r7, #8]
 80117e0:	4413      	add	r3, r2
 80117e2:	2200      	movs	r2, #0
 80117e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80117e6:	7dfb      	ldrb	r3, [r7, #23]
 80117e8:	3301      	adds	r3, #1
 80117ea:	75fb      	strb	r3, [r7, #23]
 80117ec:	7dfa      	ldrb	r2, [r7, #23]
 80117ee:	79fb      	ldrb	r3, [r7, #7]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d3d3      	bcc.n	801179c <IntToUnicode+0x18>
  }
}
 80117f4:	bf00      	nop
 80117f6:	bf00      	nop
 80117f8:	371c      	adds	r7, #28
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr
	...

08011804 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b08a      	sub	sp, #40	; 0x28
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801180c:	f107 0314 	add.w	r3, r7, #20
 8011810:	2200      	movs	r2, #0
 8011812:	601a      	str	r2, [r3, #0]
 8011814:	605a      	str	r2, [r3, #4]
 8011816:	609a      	str	r2, [r3, #8]
 8011818:	60da      	str	r2, [r3, #12]
 801181a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011824:	d14e      	bne.n	80118c4 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011826:	4b29      	ldr	r3, [pc, #164]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 8011828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801182a:	4a28      	ldr	r2, [pc, #160]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 801182c:	f043 0301 	orr.w	r3, r3, #1
 8011830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011832:	4b26      	ldr	r3, [pc, #152]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 8011834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011836:	f003 0301 	and.w	r3, r3, #1
 801183a:	613b      	str	r3, [r7, #16]
 801183c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 801183e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011844:	2302      	movs	r3, #2
 8011846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011848:	2300      	movs	r3, #0
 801184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801184c:	2303      	movs	r3, #3
 801184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011850:	230a      	movs	r3, #10
 8011852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011854:	f107 0314 	add.w	r3, r7, #20
 8011858:	4619      	mov	r1, r3
 801185a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801185e:	f7f1 fbdf 	bl	8003020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011862:	4b1a      	ldr	r3, [pc, #104]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 8011864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011866:	4a19      	ldr	r2, [pc, #100]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 8011868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801186e:	4b17      	ldr	r3, [pc, #92]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 8011870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011876:	60fb      	str	r3, [r7, #12]
 8011878:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801187a:	4b14      	ldr	r3, [pc, #80]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 801187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011882:	2b00      	cmp	r3, #0
 8011884:	d114      	bne.n	80118b0 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011886:	4b11      	ldr	r3, [pc, #68]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 8011888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801188a:	4a10      	ldr	r2, [pc, #64]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 801188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011890:	6593      	str	r3, [r2, #88]	; 0x58
 8011892:	4b0e      	ldr	r3, [pc, #56]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 8011894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801189a:	60bb      	str	r3, [r7, #8]
 801189c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 801189e:	f7f3 f835 	bl	800490c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80118a2:	4b0a      	ldr	r3, [pc, #40]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 80118a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118a6:	4a09      	ldr	r2, [pc, #36]	; (80118cc <HAL_PCD_MspInit+0xc8>)
 80118a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80118ac:	6593      	str	r3, [r2, #88]	; 0x58
 80118ae:	e001      	b.n	80118b4 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80118b0:	f7f3 f82c 	bl	800490c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80118b4:	2200      	movs	r2, #0
 80118b6:	2105      	movs	r1, #5
 80118b8:	2043      	movs	r0, #67	; 0x43
 80118ba:	f7f0 ffa1 	bl	8002800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80118be:	2043      	movs	r0, #67	; 0x43
 80118c0:	f7f0 ffba 	bl	8002838 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80118c4:	bf00      	nop
 80118c6:	3728      	adds	r7, #40	; 0x28
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	40021000 	.word	0x40021000

080118d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80118e4:	4619      	mov	r1, r3
 80118e6:	4610      	mov	r0, r2
 80118e8:	f7fa ff7c 	bl	800c7e4 <USBD_LL_SetupStage>
}
 80118ec:	bf00      	nop
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	460b      	mov	r3, r1
 80118fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011906:	78fa      	ldrb	r2, [r7, #3]
 8011908:	6879      	ldr	r1, [r7, #4]
 801190a:	4613      	mov	r3, r2
 801190c:	00db      	lsls	r3, r3, #3
 801190e:	1a9b      	subs	r3, r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	440b      	add	r3, r1
 8011914:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	78fb      	ldrb	r3, [r7, #3]
 801191c:	4619      	mov	r1, r3
 801191e:	f7fa ffb6 	bl	800c88e <USBD_LL_DataOutStage>
}
 8011922:	bf00      	nop
 8011924:	3708      	adds	r7, #8
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}

0801192a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801192a:	b580      	push	{r7, lr}
 801192c:	b082      	sub	sp, #8
 801192e:	af00      	add	r7, sp, #0
 8011930:	6078      	str	r0, [r7, #4]
 8011932:	460b      	mov	r3, r1
 8011934:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801193c:	78fa      	ldrb	r2, [r7, #3]
 801193e:	6879      	ldr	r1, [r7, #4]
 8011940:	4613      	mov	r3, r2
 8011942:	00db      	lsls	r3, r3, #3
 8011944:	1a9b      	subs	r3, r3, r2
 8011946:	009b      	lsls	r3, r3, #2
 8011948:	440b      	add	r3, r1
 801194a:	3348      	adds	r3, #72	; 0x48
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	78fb      	ldrb	r3, [r7, #3]
 8011950:	4619      	mov	r1, r3
 8011952:	f7fa ffff 	bl	800c954 <USBD_LL_DataInStage>
}
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b082      	sub	sp, #8
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801196c:	4618      	mov	r0, r3
 801196e:	f7fb f913 	bl	800cb98 <USBD_LL_SOF>
}
 8011972:	bf00      	nop
 8011974:	3708      	adds	r7, #8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}

0801197a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801197a:	b580      	push	{r7, lr}
 801197c:	b084      	sub	sp, #16
 801197e:	af00      	add	r7, sp, #0
 8011980:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011982:	2301      	movs	r3, #1
 8011984:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	2b02      	cmp	r3, #2
 801198c:	d001      	beq.n	8011992 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801198e:	f7ef fa9b 	bl	8000ec8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011998:	7bfa      	ldrb	r2, [r7, #15]
 801199a:	4611      	mov	r1, r2
 801199c:	4618      	mov	r0, r3
 801199e:	f7fb f8bd 	bl	800cb1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7fb f869 	bl	800ca80 <USBD_LL_Reset>
}
 80119ae:	bf00      	nop
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
	...

080119b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	6812      	ldr	r2, [r2, #0]
 80119ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80119d2:	f043 0301 	orr.w	r3, r3, #1
 80119d6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119de:	4618      	mov	r0, r3
 80119e0:	f7fb f8ac 	bl	800cb3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6a1b      	ldr	r3, [r3, #32]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d005      	beq.n	80119f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119ec:	4b04      	ldr	r3, [pc, #16]	; (8011a00 <HAL_PCD_SuspendCallback+0x48>)
 80119ee:	691b      	ldr	r3, [r3, #16]
 80119f0:	4a03      	ldr	r2, [pc, #12]	; (8011a00 <HAL_PCD_SuspendCallback+0x48>)
 80119f2:	f043 0306 	orr.w	r3, r3, #6
 80119f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80119f8:	bf00      	nop
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	e000ed00 	.word	0xe000ed00

08011a04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	6812      	ldr	r2, [r2, #0]
 8011a1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a1e:	f023 0301 	bic.w	r3, r3, #1
 8011a22:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6a1b      	ldr	r3, [r3, #32]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d007      	beq.n	8011a3c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a2c:	4b08      	ldr	r3, [pc, #32]	; (8011a50 <HAL_PCD_ResumeCallback+0x4c>)
 8011a2e:	691b      	ldr	r3, [r3, #16]
 8011a30:	4a07      	ldr	r2, [pc, #28]	; (8011a50 <HAL_PCD_ResumeCallback+0x4c>)
 8011a32:	f023 0306 	bic.w	r3, r3, #6
 8011a36:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011a38:	f000 faf4 	bl	8012024 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fb f890 	bl	800cb68 <USBD_LL_Resume>
}
 8011a48:	bf00      	nop
 8011a4a:	3708      	adds	r7, #8
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}
 8011a50:	e000ed00 	.word	0xe000ed00

08011a54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	460b      	mov	r3, r1
 8011a5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a66:	78fa      	ldrb	r2, [r7, #3]
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fb f8dc 	bl	800cc28 <USBD_LL_IsoOUTIncomplete>
}
 8011a70:	bf00      	nop
 8011a72:	3708      	adds	r7, #8
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	460b      	mov	r3, r1
 8011a82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a8a:	78fa      	ldrb	r2, [r7, #3]
 8011a8c:	4611      	mov	r1, r2
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7fb f8a4 	bl	800cbdc <USBD_LL_IsoINIncomplete>
}
 8011a94:	bf00      	nop
 8011a96:	3708      	adds	r7, #8
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fb f8e2 	bl	800cc74 <USBD_LL_DevConnected>
}
 8011ab0:	bf00      	nop
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7fb f8df 	bl	800cc8a <USBD_LL_DevDisconnected>
}
 8011acc:	bf00      	nop
 8011ace:	3708      	adds	r7, #8
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}

08011ad4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d139      	bne.n	8011b58 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011ae4:	4a1f      	ldr	r2, [pc, #124]	; (8011b64 <USBD_LL_Init+0x90>)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	4a1d      	ldr	r2, [pc, #116]	; (8011b64 <USBD_LL_Init+0x90>)
 8011af0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011af4:	4b1b      	ldr	r3, [pc, #108]	; (8011b64 <USBD_LL_Init+0x90>)
 8011af6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011afa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011afc:	4b19      	ldr	r3, [pc, #100]	; (8011b64 <USBD_LL_Init+0x90>)
 8011afe:	2206      	movs	r2, #6
 8011b00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011b02:	4b18      	ldr	r3, [pc, #96]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b04:	2202      	movs	r2, #2
 8011b06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011b08:	4b16      	ldr	r3, [pc, #88]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011b0e:	4b15      	ldr	r3, [pc, #84]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b10:	2200      	movs	r2, #0
 8011b12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011b14:	4b13      	ldr	r3, [pc, #76]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b16:	2200      	movs	r2, #0
 8011b18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8011b1a:	4b12      	ldr	r3, [pc, #72]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011b20:	4b10      	ldr	r3, [pc, #64]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b22:	2200      	movs	r2, #0
 8011b24:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011b26:	4b0f      	ldr	r3, [pc, #60]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b28:	2200      	movs	r2, #0
 8011b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011b2c:	480d      	ldr	r0, [pc, #52]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b2e:	f7f1 fd79 	bl	8003624 <HAL_PCD_Init>
 8011b32:	4603      	mov	r3, r0
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d001      	beq.n	8011b3c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8011b38:	f7ef f9c6 	bl	8000ec8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011b3c:	2180      	movs	r1, #128	; 0x80
 8011b3e:	4809      	ldr	r0, [pc, #36]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b40:	f7f2 fddb 	bl	80046fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011b44:	2240      	movs	r2, #64	; 0x40
 8011b46:	2100      	movs	r1, #0
 8011b48:	4806      	ldr	r0, [pc, #24]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b4a:	f7f2 fd8f 	bl	800466c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011b4e:	2280      	movs	r2, #128	; 0x80
 8011b50:	2101      	movs	r1, #1
 8011b52:	4804      	ldr	r0, [pc, #16]	; (8011b64 <USBD_LL_Init+0x90>)
 8011b54:	f7f2 fd8a 	bl	800466c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011b58:	2300      	movs	r3, #0
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3708      	adds	r7, #8
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	200042e8 	.word	0x200042e8

08011b68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b70:	2300      	movs	r3, #0
 8011b72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b74:	2300      	movs	r3, #0
 8011b76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7f1 fe74 	bl	800386c <HAL_PCD_Start>
 8011b84:	4603      	mov	r3, r0
 8011b86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011b88:	7bbb      	ldrb	r3, [r7, #14]
 8011b8a:	2b03      	cmp	r3, #3
 8011b8c:	d816      	bhi.n	8011bbc <USBD_LL_Start+0x54>
 8011b8e:	a201      	add	r2, pc, #4	; (adr r2, 8011b94 <USBD_LL_Start+0x2c>)
 8011b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b94:	08011ba5 	.word	0x08011ba5
 8011b98:	08011bab 	.word	0x08011bab
 8011b9c:	08011bb1 	.word	0x08011bb1
 8011ba0:	08011bb7 	.word	0x08011bb7
    case HAL_OK :
      usb_status = USBD_OK;
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ba8:	e00b      	b.n	8011bc2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011baa:	2303      	movs	r3, #3
 8011bac:	73fb      	strb	r3, [r7, #15]
    break;
 8011bae:	e008      	b.n	8011bc2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8011bb4:	e005      	b.n	8011bc2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011bb6:	2303      	movs	r3, #3
 8011bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8011bba:	e002      	b.n	8011bc2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8011bbc:	2303      	movs	r3, #3
 8011bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8011bc0:	bf00      	nop
  }
  return usb_status;
 8011bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3710      	adds	r7, #16
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	4608      	mov	r0, r1
 8011bd6:	4611      	mov	r1, r2
 8011bd8:	461a      	mov	r2, r3
 8011bda:	4603      	mov	r3, r0
 8011bdc:	70fb      	strb	r3, [r7, #3]
 8011bde:	460b      	mov	r3, r1
 8011be0:	70bb      	strb	r3, [r7, #2]
 8011be2:	4613      	mov	r3, r2
 8011be4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011be6:	2300      	movs	r3, #0
 8011be8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bea:	2300      	movs	r3, #0
 8011bec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011bf4:	78bb      	ldrb	r3, [r7, #2]
 8011bf6:	883a      	ldrh	r2, [r7, #0]
 8011bf8:	78f9      	ldrb	r1, [r7, #3]
 8011bfa:	f7f2 fa2f 	bl	800405c <HAL_PCD_EP_Open>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011c02:	7bbb      	ldrb	r3, [r7, #14]
 8011c04:	2b03      	cmp	r3, #3
 8011c06:	d817      	bhi.n	8011c38 <USBD_LL_OpenEP+0x6c>
 8011c08:	a201      	add	r2, pc, #4	; (adr r2, 8011c10 <USBD_LL_OpenEP+0x44>)
 8011c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c0e:	bf00      	nop
 8011c10:	08011c21 	.word	0x08011c21
 8011c14:	08011c27 	.word	0x08011c27
 8011c18:	08011c2d 	.word	0x08011c2d
 8011c1c:	08011c33 	.word	0x08011c33
    case HAL_OK :
      usb_status = USBD_OK;
 8011c20:	2300      	movs	r3, #0
 8011c22:	73fb      	strb	r3, [r7, #15]
    break;
 8011c24:	e00b      	b.n	8011c3e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c26:	2303      	movs	r3, #3
 8011c28:	73fb      	strb	r3, [r7, #15]
    break;
 8011c2a:	e008      	b.n	8011c3e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8011c30:	e005      	b.n	8011c3e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c32:	2303      	movs	r3, #3
 8011c34:	73fb      	strb	r3, [r7, #15]
    break;
 8011c36:	e002      	b.n	8011c3e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8011c38:	2303      	movs	r3, #3
 8011c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c3c:	bf00      	nop
  }
  return usb_status;
 8011c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3710      	adds	r7, #16
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	460b      	mov	r3, r1
 8011c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c54:	2300      	movs	r3, #0
 8011c56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c62:	78fa      	ldrb	r2, [r7, #3]
 8011c64:	4611      	mov	r1, r2
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7f2 fa60 	bl	800412c <HAL_PCD_EP_Close>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011c70:	7bbb      	ldrb	r3, [r7, #14]
 8011c72:	2b03      	cmp	r3, #3
 8011c74:	d816      	bhi.n	8011ca4 <USBD_LL_CloseEP+0x5c>
 8011c76:	a201      	add	r2, pc, #4	; (adr r2, 8011c7c <USBD_LL_CloseEP+0x34>)
 8011c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c7c:	08011c8d 	.word	0x08011c8d
 8011c80:	08011c93 	.word	0x08011c93
 8011c84:	08011c99 	.word	0x08011c99
 8011c88:	08011c9f 	.word	0x08011c9f
    case HAL_OK :
      usb_status = USBD_OK;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8011c90:	e00b      	b.n	8011caa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c92:	2303      	movs	r3, #3
 8011c94:	73fb      	strb	r3, [r7, #15]
    break;
 8011c96:	e008      	b.n	8011caa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c98:	2301      	movs	r3, #1
 8011c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c9c:	e005      	b.n	8011caa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c9e:	2303      	movs	r3, #3
 8011ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8011ca2:	e002      	b.n	8011caa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011ca4:	2303      	movs	r3, #3
 8011ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ca8:	bf00      	nop
  }
  return usb_status;
 8011caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cce:	78fa      	ldrb	r2, [r7, #3]
 8011cd0:	4611      	mov	r1, r2
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7f2 fb07 	bl	80042e6 <HAL_PCD_EP_SetStall>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011cdc:	7bbb      	ldrb	r3, [r7, #14]
 8011cde:	2b03      	cmp	r3, #3
 8011ce0:	d816      	bhi.n	8011d10 <USBD_LL_StallEP+0x5c>
 8011ce2:	a201      	add	r2, pc, #4	; (adr r2, 8011ce8 <USBD_LL_StallEP+0x34>)
 8011ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ce8:	08011cf9 	.word	0x08011cf9
 8011cec:	08011cff 	.word	0x08011cff
 8011cf0:	08011d05 	.word	0x08011d05
 8011cf4:	08011d0b 	.word	0x08011d0b
    case HAL_OK :
      usb_status = USBD_OK;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8011cfc:	e00b      	b.n	8011d16 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011cfe:	2303      	movs	r3, #3
 8011d00:	73fb      	strb	r3, [r7, #15]
    break;
 8011d02:	e008      	b.n	8011d16 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d04:	2301      	movs	r3, #1
 8011d06:	73fb      	strb	r3, [r7, #15]
    break;
 8011d08:	e005      	b.n	8011d16 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d0a:	2303      	movs	r3, #3
 8011d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8011d0e:	e002      	b.n	8011d16 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011d10:	2303      	movs	r3, #3
 8011d12:	73fb      	strb	r3, [r7, #15]
    break;
 8011d14:	bf00      	nop
  }
  return usb_status;
 8011d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3710      	adds	r7, #16
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b084      	sub	sp, #16
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	460b      	mov	r3, r1
 8011d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d30:	2300      	movs	r3, #0
 8011d32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d3a:	78fa      	ldrb	r2, [r7, #3]
 8011d3c:	4611      	mov	r1, r2
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7f2 fb33 	bl	80043aa <HAL_PCD_EP_ClrStall>
 8011d44:	4603      	mov	r3, r0
 8011d46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011d48:	7bbb      	ldrb	r3, [r7, #14]
 8011d4a:	2b03      	cmp	r3, #3
 8011d4c:	d816      	bhi.n	8011d7c <USBD_LL_ClearStallEP+0x5c>
 8011d4e:	a201      	add	r2, pc, #4	; (adr r2, 8011d54 <USBD_LL_ClearStallEP+0x34>)
 8011d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d54:	08011d65 	.word	0x08011d65
 8011d58:	08011d6b 	.word	0x08011d6b
 8011d5c:	08011d71 	.word	0x08011d71
 8011d60:	08011d77 	.word	0x08011d77
    case HAL_OK :
      usb_status = USBD_OK;
 8011d64:	2300      	movs	r3, #0
 8011d66:	73fb      	strb	r3, [r7, #15]
    break;
 8011d68:	e00b      	b.n	8011d82 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011d6a:	2303      	movs	r3, #3
 8011d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8011d6e:	e008      	b.n	8011d82 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d70:	2301      	movs	r3, #1
 8011d72:	73fb      	strb	r3, [r7, #15]
    break;
 8011d74:	e005      	b.n	8011d82 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d76:	2303      	movs	r3, #3
 8011d78:	73fb      	strb	r3, [r7, #15]
    break;
 8011d7a:	e002      	b.n	8011d82 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011d7c:	2303      	movs	r3, #3
 8011d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d80:	bf00      	nop
  }
  return usb_status;
 8011d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3710      	adds	r7, #16
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d8c:	b480      	push	{r7}
 8011d8e:	b085      	sub	sp, #20
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	460b      	mov	r3, r1
 8011d96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	da0b      	bge.n	8011dc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011da8:	78fb      	ldrb	r3, [r7, #3]
 8011daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011dae:	68f9      	ldr	r1, [r7, #12]
 8011db0:	4613      	mov	r3, r2
 8011db2:	00db      	lsls	r3, r3, #3
 8011db4:	1a9b      	subs	r3, r3, r2
 8011db6:	009b      	lsls	r3, r3, #2
 8011db8:	440b      	add	r3, r1
 8011dba:	333e      	adds	r3, #62	; 0x3e
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	e00b      	b.n	8011dd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011dc0:	78fb      	ldrb	r3, [r7, #3]
 8011dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011dc6:	68f9      	ldr	r1, [r7, #12]
 8011dc8:	4613      	mov	r3, r2
 8011dca:	00db      	lsls	r3, r3, #3
 8011dcc:	1a9b      	subs	r3, r3, r2
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	440b      	add	r3, r1
 8011dd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011dd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3714      	adds	r7, #20
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de2:	4770      	bx	lr

08011de4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	460b      	mov	r3, r1
 8011dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011df0:	2300      	movs	r3, #0
 8011df2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011df4:	2300      	movs	r3, #0
 8011df6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011dfe:	78fa      	ldrb	r2, [r7, #3]
 8011e00:	4611      	mov	r1, r2
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7f2 f905 	bl	8004012 <HAL_PCD_SetAddress>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011e0c:	7bbb      	ldrb	r3, [r7, #14]
 8011e0e:	2b03      	cmp	r3, #3
 8011e10:	d816      	bhi.n	8011e40 <USBD_LL_SetUSBAddress+0x5c>
 8011e12:	a201      	add	r2, pc, #4	; (adr r2, 8011e18 <USBD_LL_SetUSBAddress+0x34>)
 8011e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e18:	08011e29 	.word	0x08011e29
 8011e1c:	08011e2f 	.word	0x08011e2f
 8011e20:	08011e35 	.word	0x08011e35
 8011e24:	08011e3b 	.word	0x08011e3b
    case HAL_OK :
      usb_status = USBD_OK;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8011e2c:	e00b      	b.n	8011e46 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e2e:	2303      	movs	r3, #3
 8011e30:	73fb      	strb	r3, [r7, #15]
    break;
 8011e32:	e008      	b.n	8011e46 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e34:	2301      	movs	r3, #1
 8011e36:	73fb      	strb	r3, [r7, #15]
    break;
 8011e38:	e005      	b.n	8011e46 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e3a:	2303      	movs	r3, #3
 8011e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8011e3e:	e002      	b.n	8011e46 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8011e40:	2303      	movs	r3, #3
 8011e42:	73fb      	strb	r3, [r7, #15]
    break;
 8011e44:	bf00      	nop
  }
  return usb_status;
 8011e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3710      	adds	r7, #16
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b086      	sub	sp, #24
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	607a      	str	r2, [r7, #4]
 8011e5a:	603b      	str	r3, [r7, #0]
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e60:	2300      	movs	r3, #0
 8011e62:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e64:	2300      	movs	r3, #0
 8011e66:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011e6e:	7af9      	ldrb	r1, [r7, #11]
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	f7f2 f9fa 	bl	800426c <HAL_PCD_EP_Transmit>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011e7c:	7dbb      	ldrb	r3, [r7, #22]
 8011e7e:	2b03      	cmp	r3, #3
 8011e80:	d816      	bhi.n	8011eb0 <USBD_LL_Transmit+0x60>
 8011e82:	a201      	add	r2, pc, #4	; (adr r2, 8011e88 <USBD_LL_Transmit+0x38>)
 8011e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e88:	08011e99 	.word	0x08011e99
 8011e8c:	08011e9f 	.word	0x08011e9f
 8011e90:	08011ea5 	.word	0x08011ea5
 8011e94:	08011eab 	.word	0x08011eab
    case HAL_OK :
      usb_status = USBD_OK;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	75fb      	strb	r3, [r7, #23]
    break;
 8011e9c:	e00b      	b.n	8011eb6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e9e:	2303      	movs	r3, #3
 8011ea0:	75fb      	strb	r3, [r7, #23]
    break;
 8011ea2:	e008      	b.n	8011eb6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	75fb      	strb	r3, [r7, #23]
    break;
 8011ea8:	e005      	b.n	8011eb6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011eaa:	2303      	movs	r3, #3
 8011eac:	75fb      	strb	r3, [r7, #23]
    break;
 8011eae:	e002      	b.n	8011eb6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8011eb0:	2303      	movs	r3, #3
 8011eb2:	75fb      	strb	r3, [r7, #23]
    break;
 8011eb4:	bf00      	nop
  }
  return usb_status;
 8011eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3718      	adds	r7, #24
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	607a      	str	r2, [r7, #4]
 8011eca:	603b      	str	r3, [r7, #0]
 8011ecc:	460b      	mov	r3, r1
 8011ece:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ede:	7af9      	ldrb	r1, [r7, #11]
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	687a      	ldr	r2, [r7, #4]
 8011ee4:	f7f2 f96c 	bl	80041c0 <HAL_PCD_EP_Receive>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011eec:	7dbb      	ldrb	r3, [r7, #22]
 8011eee:	2b03      	cmp	r3, #3
 8011ef0:	d816      	bhi.n	8011f20 <USBD_LL_PrepareReceive+0x60>
 8011ef2:	a201      	add	r2, pc, #4	; (adr r2, 8011ef8 <USBD_LL_PrepareReceive+0x38>)
 8011ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ef8:	08011f09 	.word	0x08011f09
 8011efc:	08011f0f 	.word	0x08011f0f
 8011f00:	08011f15 	.word	0x08011f15
 8011f04:	08011f1b 	.word	0x08011f1b
    case HAL_OK :
      usb_status = USBD_OK;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	75fb      	strb	r3, [r7, #23]
    break;
 8011f0c:	e00b      	b.n	8011f26 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011f0e:	2303      	movs	r3, #3
 8011f10:	75fb      	strb	r3, [r7, #23]
    break;
 8011f12:	e008      	b.n	8011f26 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011f14:	2301      	movs	r3, #1
 8011f16:	75fb      	strb	r3, [r7, #23]
    break;
 8011f18:	e005      	b.n	8011f26 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011f1a:	2303      	movs	r3, #3
 8011f1c:	75fb      	strb	r3, [r7, #23]
    break;
 8011f1e:	e002      	b.n	8011f26 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8011f20:	2303      	movs	r3, #3
 8011f22:	75fb      	strb	r3, [r7, #23]
    break;
 8011f24:	bf00      	nop
  }
  return usb_status;
 8011f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3718      	adds	r7, #24
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	460b      	mov	r3, r1
 8011f3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011f42:	78fa      	ldrb	r2, [r7, #3]
 8011f44:	4611      	mov	r1, r2
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7f2 f978 	bl	800423c <HAL_PCD_EP_GetRxCount>
 8011f4c:	4603      	mov	r3, r0
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3708      	adds	r7, #8
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}
	...

08011f58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	460b      	mov	r3, r1
 8011f62:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011f64:	78fb      	ldrb	r3, [r7, #3]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d002      	beq.n	8011f70 <HAL_PCDEx_LPM_Callback+0x18>
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d01f      	beq.n	8011fae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011f6e:	e03b      	b.n	8011fe8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6a1b      	ldr	r3, [r3, #32]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d007      	beq.n	8011f88 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011f78:	f000 f854 	bl	8012024 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f7c:	4b1c      	ldr	r3, [pc, #112]	; (8011ff0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011f7e:	691b      	ldr	r3, [r3, #16]
 8011f80:	4a1b      	ldr	r2, [pc, #108]	; (8011ff0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011f82:	f023 0306 	bic.w	r3, r3, #6
 8011f86:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	6812      	ldr	r2, [r2, #0]
 8011f96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011f9a:	f023 0301 	bic.w	r3, r3, #1
 8011f9e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7fa fdde 	bl	800cb68 <USBD_LL_Resume>
    break;
 8011fac:	e01c      	b.n	8011fe8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	6812      	ldr	r2, [r2, #0]
 8011fbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011fc0:	f043 0301 	orr.w	r3, r3, #1
 8011fc4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7fa fdb5 	bl	800cb3c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6a1b      	ldr	r3, [r3, #32]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d005      	beq.n	8011fe6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011fda:	4b05      	ldr	r3, [pc, #20]	; (8011ff0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011fdc:	691b      	ldr	r3, [r3, #16]
 8011fde:	4a04      	ldr	r2, [pc, #16]	; (8011ff0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011fe0:	f043 0306 	orr.w	r3, r3, #6
 8011fe4:	6113      	str	r3, [r2, #16]
    break;
 8011fe6:	bf00      	nop
}
 8011fe8:	bf00      	nop
 8011fea:	3708      	adds	r7, #8
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	e000ed00 	.word	0xe000ed00

08011ff4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011ffc:	4b03      	ldr	r3, [pc, #12]	; (801200c <USBD_static_malloc+0x18>)
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	370c      	adds	r7, #12
 8012002:	46bd      	mov	sp, r7
 8012004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012008:	4770      	bx	lr
 801200a:	bf00      	nop
 801200c:	20001ac4 	.word	0x20001ac4

08012010 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012010:	b480      	push	{r7}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]

}
 8012018:	bf00      	nop
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012028:	f7ee f966 	bl	80002f8 <SystemClock_Config>
}
 801202c:	bf00      	nop
 801202e:	bd80      	pop	{r7, pc}

08012030 <__libc_init_array>:
 8012030:	b570      	push	{r4, r5, r6, lr}
 8012032:	4d0d      	ldr	r5, [pc, #52]	; (8012068 <__libc_init_array+0x38>)
 8012034:	4c0d      	ldr	r4, [pc, #52]	; (801206c <__libc_init_array+0x3c>)
 8012036:	1b64      	subs	r4, r4, r5
 8012038:	10a4      	asrs	r4, r4, #2
 801203a:	2600      	movs	r6, #0
 801203c:	42a6      	cmp	r6, r4
 801203e:	d109      	bne.n	8012054 <__libc_init_array+0x24>
 8012040:	4d0b      	ldr	r5, [pc, #44]	; (8012070 <__libc_init_array+0x40>)
 8012042:	4c0c      	ldr	r4, [pc, #48]	; (8012074 <__libc_init_array+0x44>)
 8012044:	f000 f82e 	bl	80120a4 <_init>
 8012048:	1b64      	subs	r4, r4, r5
 801204a:	10a4      	asrs	r4, r4, #2
 801204c:	2600      	movs	r6, #0
 801204e:	42a6      	cmp	r6, r4
 8012050:	d105      	bne.n	801205e <__libc_init_array+0x2e>
 8012052:	bd70      	pop	{r4, r5, r6, pc}
 8012054:	f855 3b04 	ldr.w	r3, [r5], #4
 8012058:	4798      	blx	r3
 801205a:	3601      	adds	r6, #1
 801205c:	e7ee      	b.n	801203c <__libc_init_array+0xc>
 801205e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012062:	4798      	blx	r3
 8012064:	3601      	adds	r6, #1
 8012066:	e7f2      	b.n	801204e <__libc_init_array+0x1e>
 8012068:	08012254 	.word	0x08012254
 801206c:	08012254 	.word	0x08012254
 8012070:	08012254 	.word	0x08012254
 8012074:	08012258 	.word	0x08012258

08012078 <memcpy>:
 8012078:	440a      	add	r2, r1
 801207a:	4291      	cmp	r1, r2
 801207c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012080:	d100      	bne.n	8012084 <memcpy+0xc>
 8012082:	4770      	bx	lr
 8012084:	b510      	push	{r4, lr}
 8012086:	f811 4b01 	ldrb.w	r4, [r1], #1
 801208a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801208e:	4291      	cmp	r1, r2
 8012090:	d1f9      	bne.n	8012086 <memcpy+0xe>
 8012092:	bd10      	pop	{r4, pc}

08012094 <memset>:
 8012094:	4402      	add	r2, r0
 8012096:	4603      	mov	r3, r0
 8012098:	4293      	cmp	r3, r2
 801209a:	d100      	bne.n	801209e <memset+0xa>
 801209c:	4770      	bx	lr
 801209e:	f803 1b01 	strb.w	r1, [r3], #1
 80120a2:	e7f9      	b.n	8012098 <memset+0x4>

080120a4 <_init>:
 80120a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a6:	bf00      	nop
 80120a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120aa:	bc08      	pop	{r3}
 80120ac:	469e      	mov	lr, r3
 80120ae:	4770      	bx	lr

080120b0 <_fini>:
 80120b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120b2:	bf00      	nop
 80120b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120b6:	bc08      	pop	{r3}
 80120b8:	469e      	mov	lr, r3
 80120ba:	4770      	bx	lr
